{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap f18f34d650e0f5483547","webpack:///./src/utils/logger.js","webpack:///./src/events.js","webpack:///./src/errors.js","webpack:///./src/empty.js","webpack:///./src/demux/id3.js","webpack:///./node_modules/events/events.js","webpack:///./node_modules/url-toolkit/src/url-toolkit.js","webpack:///./src/crypt/aes-crypto.js","webpack:///./src/crypt/fast-aes-key.js","webpack:///./src/crypt/aes-decryptor.js","webpack:///./src/crypt/decrypter.js","webpack:///./src/demux/adts.js","webpack:///./src/demux/aacdemuxer.js","webpack:///./src/demux/mp4demuxer.js","webpack:///./src/demux/mpegaudio.js","webpack:///./src/demux/exp-golomb.js","webpack:///./src/demux/sample-aes.js","webpack:///./src/demux/tsdemuxer.js","webpack:///./src/demux/mp3demuxer.js","webpack:///./src/helper/aac.js","webpack:///./src/remux/mp4-generator.js","webpack:///./src/remux/mp4-remuxer.js","webpack:///./src/remux/passthrough-remuxer.js","webpack:///./src/demux/demuxer-inline.js","webpack:///./src/event-handler.js","webpack:///./src/utils/attr-list.js","webpack:///./src/loader/playlist-loader.js","webpack:///./src/loader/fragment-loader.js","webpack:///./src/loader/key-loader.js","webpack:///./src/utils/binary-search.js","webpack:///./src/helper/buffer-helper.js","webpack:///./src/demux/demuxer.js","webpack:///./src/helper/level-helper.js","webpack:///./src/utils/timeRanges.js","webpack:///./src/utils/discontinuities.js","webpack:///./src/controller/stream-controller.js","webpack:///./src/controller/level-controller.js","webpack:///./src/controller/id3-track-controller.js","webpack:///./src/utils/ewma.js","webpack:///./src/utils/ewma-bandwidth-estimator.js","webpack:///./src/controller/abr-controller.js","webpack:///./src/controller/buffer-controller.js","webpack:///./src/controller/cap-level-controller.js","webpack:///./src/controller/fps-controller.js","webpack:///./src/utils/xhr-loader.js","webpack:///./src/config.js","webpack:///./src/hls.js","webpack:///./node_modules/webworkify-webpack/index.js","webpack:///./src/demux/demuxer-worker.js"],"names":["noop","fakeLogger","trace","debug","log","warn","info","error","exportedLogger","formatMsg","type","msg","consolePrintFn","func","self","console","args","apply","exportLoggerFunctions","debugConfig","functions","forEach","bind","enableLogs","e","logger","MEDIA_ATTACHING","MEDIA_ATTACHED","MEDIA_DETACHING","MEDIA_DETACHED","BUFFER_RESET","BUFFER_CODECS","BUFFER_CREATED","BUFFER_APPENDING","BUFFER_APPENDED","BUFFER_EOS","BUFFER_FLUSHING","BUFFER_FLUSHED","MANIFEST_LOADING","MANIFEST_LOADED","MANIFEST_PARSED","LEVEL_SWITCH","LEVEL_SWITCHING","LEVEL_SWITCHED","LEVEL_LOADING","LEVEL_LOADED","LEVEL_UPDATED","LEVEL_PTS_UPDATED","LEVEL_REMOVED","AUDIO_TRACKS_UPDATED","AUDIO_TRACK_SWITCH","AUDIO_TRACK_SWITCHING","AUDIO_TRACK_SWITCHED","AUDIO_TRACK_LOADING","AUDIO_TRACK_LOADED","SUBTITLE_TRACKS_UPDATED","SUBTITLE_TRACK_SWITCH","SUBTITLE_TRACK_LOADING","SUBTITLE_TRACK_LOADED","SUBTITLE_FRAG_PROCESSED","CUES_PARSED","NON_NATIVE_TEXT_TRACKS_FOUND","INIT_PTS_FOUND","FRAG_LOADING","FRAG_LOAD_PROGRESS","FRAG_LOAD_EMERGENCY_ABORTED","FRAG_LOADED","FRAG_DECRYPT_STARTED","FRAG_DECRYPTED","FRAG_PARSING_INIT_SEGMENT","FRAG_PARSING_USERDATA","FRAG_PARSING_METADATA","FRAG_PARSING_DATA","FRAG_PARSED","FRAG_BUFFERED","FRAG_CHANGED","FPS_DROP","FPS_DROP_LEVEL_CAPPING","ERROR","DESTROYING","KEY_LOADING","KEY_LOADED","STREAM_STATE_TRANSITION","ErrorTypes","NETWORK_ERROR","MEDIA_ERROR","MUX_ERROR","OTHER_ERROR","ErrorDetails","MANIFEST_LOAD_ERROR","MANIFEST_LOAD_TIMEOUT","MANIFEST_PARSING_ERROR","MANIFEST_INCOMPATIBLE_CODECS_ERROR","MANIFEST_EMPTY_ERROR","LEVEL_LOAD_ERROR","LEVEL_LOAD_TIMEOUT","LEVEL_SWITCH_ERROR","AUDIO_TRACK_LOAD_ERROR","AUDIO_TRACK_LOAD_TIMEOUT","FRAG_LOAD_ERROR","FRAG_LOOP_LOADING_ERROR","FRAG_LOAD_TIMEOUT","FRAG_DECRYPT_ERROR","FRAG_PARSING_ERROR","REMUX_ALLOC_ERROR","KEY_LOAD_ERROR","KEY_LOAD_TIMEOUT","BUFFER_ADD_CODEC_ERROR","BUFFER_APPEND_ERROR","BUFFER_APPENDING_ERROR","BUFFER_STALLED_ERROR","BUFFER_FULL_ERROR","BUFFER_SEEK_OVER_HOLE","BUFFER_NUDGE_ON_STALL","INTERNAL_EXCEPTION","WEBVTT_EXCEPTION","ID3","isHeader","data","offset","length","isFooter","getID3Data","front","size","_readSize","subarray","undefined","getTimeStamp","frames","getID3Frames","i","frame","isTimeStampFrame","_readTimeStamp","key","_getFrameData","String","fromCharCode","id3Data","end","frameData","_decodeFrame","push","_decodePrivFrame","_decodeTextFrame","_decodeURLFrame","timeStampFrame","byteLength","Uint8Array","pts33Bit","timestamp","Math","round","owner","_utf8ArrayToStr","privateData","buffer","index","description","value","text","url","array","char2","char3","out","c","AESCrypto","subtle","iv","aesIV","decrypt","name","FastAESKey","expandKey","importKey","AESDecryptor","rcon","subMix","Uint32Array","invSubMix","sBox","invSBox","initTable","uint8ArrayToUint32Array_","arrayBuffer","view","DataView","newArray","getUint32","subMix0","subMix1","subMix2","subMix3","invSubMix0","invSubMix1","invSubMix2","invSubMix3","d","x","xi","sx","x2","x4","x8","t","keyBuffer","sameKey","keySize","Error","ksRows","ksRow","invKsRow","keySchedule","invKeySchedule","sbox","prev","networkToHostOrderSwap","word","inputArrayBuffer","nRounds","invSBOX","initVector","initVector0","initVector1","initVector2","initVector3","inputInt32","Int32Array","outputInt32","t0","t1","t2","t3","s0","s1","s2","s3","inputWords0","inputWords1","inputWords2","inputWords3","swapWord","destroy","observer","config","logEnabled","browserCrypto","crypto","webkitSubtle","disableWebCrypto","isSync","enableSoftwareAES","callback","decryptor","fastAesKey","then","aesKey","catch","err","onWebCryptoError","result","message","trigger","Event","details","fatal","reason","getAudioConfig","audioCodec","adtsObjectType","adtsSampleingIndex","adtsExtensionSampleingIndex","adtsChanelConfig","userAgent","navigator","toLowerCase","manifestCodec","adtsSampleingRates","test","Array","indexOf","samplerate","channelCount","codec","isHeaderPattern","getHeaderLength","getFullFrameLength","headerLength","frameLength","newOffset","initTrackConfig","track","getFrameDuration","parseFrameHeader","pts","frameIndex","frameDuration","stamp","appendFrame","header","aacSample","unit","dts","samples","len","sample","remuxer","resetInitSegment","initSegment","videoCodec","duration","_audioTrack","container","id","sequenceNumber","isAAC","inputTimeScale","resetTimeStamp","probe","append","timeOffset","contiguous","accurateTimeOffset","id3Samples","ADTS","remux","UINT32_MAX","pow","initPTS","initData","MP4Demuxer","parseInitSegment","tracks","audio","video","dataType","bin2str","readUint32","start","val","writeUint32","findBox","path","results","subresults","endbox","slice","concat","traks","tkhd","trak","version","trackId","mdhd","timescale","hdlr","hdlrType","getStartDTS","fragment","trafs","baseTimes","map","traf","tfhd","scale","baseTime","tfdt","Infinity","min","isFinite","offsetStartDTS","baseMediaDecodeTime","upper","floor","lower","startDTS","MpegAudio","BitratesMap","SamplingRateMap","parseHeader","sampleRate","headerB","headerC","headerE","headerF","headerG","columnInBitrates","bitRate","columnInSampleRates","padding","bytesAvailable","bitsAvailable","loadWord","position","workingBytes","availableBytes","set","skipBits","count","skipBytes","readBits","bits","valu","skipLZ","leadingZeroCount","skipUEG","skipEG","readUEG","clz","readEG","readBoolean","readUByte","readUShort","readUInt","skipScalingList","lastScale","nextScale","j","deltaScale","readSPS","frameCropLeftOffset","frameCropRightOffset","frameCropTopOffset","frameCropBottomOffset","profileIdc","profileCompat","levelIdc","numRefFramesInPicOrderCntCycle","picWidthInMbsMinus1","picHeightInMapUnitsMinus1","frameMbsOnlyFlag","scalingListCount","chromaFormatIdc","picOrderCntType","pixelRatio","aspectRatioIdc","width","ceil","height","readSliceType","decryptdata","discardEPB","decrypter","decryptBuffer","encryptedData","decryptAacSample","sampleIndex","sync","curUnit","encryptedBuffer","byteOffset","localthis","decryptedData","decryptAacSamples","getAvcEncryptedData","decodedData","encryptedDataLen","Int8Array","outputPos","inputPos","getAvcDecryptedUnit","decryptAvcSample","unitIndex","decryptAvcSamples","curUnits","units","typeSupported","sampleAes","setDecryptData","method","pmtParsed","_pmtId","_avcTrack","dropped","_id3Track","_txtTrack","aacOverFlow","aacLastPTS","avcSample","_duration","stt","pid","atf","pes","unknownPIDs","avcTrack","audioTrack","id3Track","avcId","audioId","id3Id","pmtId","avcData","pesData","audioData","parsePAT","_parsePAT","parsePMT","_parsePMT","parsePES","_parsePES","parseAVCPES","_parseAVCPES","parseAACPES","_parseAACPES","parseMPEGPES","_parseMPEGPES","parseID3PES","_parseID3PES","parsedPIDs","mpeg","mp3","avc","id3","decryptAndRemux","videoTrack","textTrack","decryptAndRemuxAvc","_initPTS","_initDTS","mpegSupported","isSampleAes","sectionLength","tableEnd","programInfoLength","stream","frag","pesFlags","pesPrefix","pesLen","pesHdrLen","pesPts","pesDts","payloadStartOffset","newData","splice","dataLen","pushAccesUnit","nbSamples","forceKeyFrameOnDiscontinuity","sps","last","_parseAVCNALu","expGolombDecoder","spsfound","createAVCSample","sliceType","payloadType","payloadSize","endOfCaptions","b","countryCode","providerCode","userStructure","userDataType","firstByte","secondByte","totalCCs","byteArray","_insertSampleInOrder","bytes","codecarray","codecstring","h","toString","pps","arr","pos","_getLastNalUnit","lastUnit","overflow","state","naluState","lastState","unitType","lastUnitStart","lastUnitType","tmp","EPBPositions","newLength","sourceIndex","shift","startOffset","newPTS","abs","AAC","getSilentFrame","MP4","init","types","avc1","avcC","btrt","dinf","dref","esds","ftyp","mdat","mdia","mfhd","minf","moof","moov","mp4a","mvex","mvhd","pasp","sdtp","stbl","stco","stsc","stsd","stsz","stts","trun","trex","vmhd","smhd","hasOwnProperty","charCodeAt","videoHdlr","audioHdlr","HDLR_TYPES","STTS","STSC","STCO","STSZ","VMHD","SMHD","STSD","majorBrand","avc1Brand","minorVersion","FTYP","box","DINF","payload","prototype","call","arguments","upperWordDuration","lowerWordDuration","sn","boxes","flags","dependsOn","isDependedOn","hasRedundancy","avcc","hSpacing","vSpacing","configlen","sampleDependencyTable","upperWordBaseMediaDecodeTime","lowerWordBaseMediaDecodeTime","arraylen","cts","isLeading","paddingValue","isNonSync","degradPrio","movie","MAX_SILENT_FRAME_DURATION","vendor","isSafari","match","ISGenerated","defaultTimeStamp","generateIS","refPTS","ptsNormalize","_PTSNormalize","timeScale","initDTS","initPTSDelta","toFixed","remuxAudio","audioTrackLength","endPTS","startPTS","remuxVideo","videoData","remuxEmptyAudio","remuxID3","remuxText","audioSamples","videoSamples","computePTSDTS","metadata","Object","keys","mp4SampleDuration","firstPTS","firstDTS","nextDTS","lastPTS","lastDTS","inputSamples","outputSamples","nextAvcDts","sort","a","deltadts","deltapts","PTSDTSshift","reduce","curr","max","delta","nbNalu","naluLen","nbUnits","sampleLen","mdatSize","setUint32","avcSampleUnits","mp4SampleLength","compositionTimeOffset","unitData","unitDataLen","lastFrameDuration","stretchShortVideoTrack","maxBufferHole","maxSeekHole","gapTolerance","deltaToFrameEnd","nextAudioPts","data1","data2","endDTS","nb","mp4timeScale","scaleFactor","inputSampleDuration","rawMPEG","mp4Sample","fillFrame","nextPts","missing","newStamp","audioSample","numMissingFrames","unitLen","lastSampleDuration","sampleDuration","silentFrame","reference","rawData","streamType","demuxer","discontinuity","trackSwitch","defaultInitPTS","startTime","performance","now","Date","endTime","stats","tstart","tdecrypt","pushDecrypted","muxConfig","demux","mux","hls","onEvent","events","handledEvents","useGenericHandler","registerListeners","unregisterListeners","isEventHandler","event","on","off","onEventGeneric","eventToFunction","funcName","replace","constructor","DECIMAL_RESOLUTION_REGEX","ATTR_LIST_REGEX","AttrList","attrs","parseAttrList","attr","decimalInteger","attrName","intValue","parseInt","Number","MAX_SAFE_INTEGER","hexadecimalInteger","stringValue","hexadecimalIntegerAsNumber","decimalFloatingPoint","parseFloat","enumeratedString","decimalResolution","res","exec","input","lastIndex","quote","lastIndexOf","MASTER_PLAYLIST_REGEX","MASTER_PLAYLIST_MEDIA_REGEX","LEVEL_PLAYLIST_REGEX_FAST","RegExp","source","join","LEVEL_PLAYLIST_REGEX_SLOW","_uri","reluri","URLToolkit","buildAbsoluteURL","baseuri","alwaysNormalize","_url","_byteRange","_decryptdata","tagList","createInitializationVector","segmentNumber","uint8View","fragmentDecryptdataFromLevelkey","levelkey","uri","cloneObj","obj","JSON","parse","stringify","relurl","baseurl","_programDateTime","rawProgramDateTime","byteRange","rawByteRange","params","split","lastByteRangeEndOffset","loaders","loaderName","loader","EventHandler","onManifestLoading","load","onLevelLoading","level","onAudioTrackLoading","onSubtitleTrackLoading","context","loaderContext","abort","retry","timeout","retryDelay","maxRetryDelay","manifestLoadingMaxRetry","manifestLoadingTimeOut","manifestLoadingRetryDelay","manifestLoadingMaxRetryTimeout","levelLoadingMaxRetry","levelLoadingTimeOut","levelLoadingRetryDelay","levelLoadingMaxRetryTimeout","pLoader","responseType","loaderConfig","loaderCallbacks","maxRetry","onSuccess","loadsuccess","onError","loaderror","onTimeout","loadtimeout","resolve","baseUrl","parseMasterPlaylist","string","levels","resolution","bitrate","NAME","codecs","CODECS","avc1toavcoti","parseMasterPlaylistMedia","audioGroups","medias","findGroup","groups","mediaGroupId","find","group","media","TYPE","groupId","instreamId","default","DEFAULT","autoselect","AUTOSELECT","forced","FORCED","URI","lang","LANGUAGE","groupCodec","avcdata","substr","parseLevelPlaylist","currentSN","totalduration","fragments","live","startSN","cc","prevFrag","title","isNaN","byteRangeEndOffset","value1","value2","toUpperCase","targetduration","decryptparams","keyAttrs","decryptmethod","decrypturi","decryptiv","startParams","startAttrs","startTimeOffset","mapAttrs","BYTERANGE","pop","averagetargetduration","endSN","startCC","endCC","response","networkDetails","tload","isLevel","levelId","levelDetails","audioTracks","tparsed","l","AUDIO","subtitles","captions","embeddedAudioFound","unshift","onFragLoading","loaded","fLoader","progressData","byteRangeStartOffset","rangeStart","rangeEnd","fragLoadingTimeOut","fragLoadingMaxRetryTimeout","onProgress","loadprogress","decryptkey","decrypturl","onKeyLoading","fragLoadingMaxRetry","fragLoadingRetryDelay","BinarySearch","search","list","comparisonFunction","minIndex","maxIndex","currentIndex","currentElement","comparisonResult","BufferHelper","isBuffered","buffered","bufferInfo","maxHoleDuration","defaultBufferInfo","nextStart","vbuffered","bufferedInfo","buffered2","bufferLen","bufferStart","bufferEnd","bufferStartNext","diff","buf2len","buf2end","emit","removeListener","forwardMessage","ev","mp4","MediaSource","isTypeSupported","enableWorker","Worker","w","work","onwmsg","onWorkerMessage","addEventListener","onerror","filename","lineno","postMessage","cmd","URL","revokeObjectURL","objectURL","removeEventListener","terminate","removeAllListeners","lastFrag","nextSN","updatePTS","fromIdx","toIdx","fragFrom","fragTo","fragToPTS","updateFragPTSDTS","deltaPTS","drift","fragIdx","PTSKnown","mergeDetails","oldDetails","newDetails","oldfragments","newfragments","ccOffset","PTSFrag","oldFrag","newFrag","backtracked","sliding","TimeRanges","r","findFirstFragWithCC","firstFrag","currentFrag","findFragWithCC","CC","candidate","shouldAlignOnDiscontinuities","lastLevel","shouldAlign","findDiscontinuousReferenceFrag","prevDetails","curDetails","prevFrags","curFrags","prevStartFrag","adjustPtsByReferenceFrag","referenceFrag","alignDiscontinuities","State","STOPPED","IDLE","FRAG_LOADING_WAITING_RETRY","WAITING_LEVEL","PARSING","PARSED","ENDED","audioCodecSwap","ticks","_state","ontick","tick","stopLoad","timer","clearInterval","startLoad","startPosition","lastCurrentTime","setInterval","fragLoadError","startFragRequested","startLevel","bitrateTest","nextLoadLevel","loadedmetadata","nextLoadPosition","forceStartLoad","fragCurrent","fragPrevious","doTick","setTimeout","_doTickIdle","retryDate","seeking","_checkBuffer","_checkFragmentChanged","levelLastLoaded","startFragPrefetch","currentTime","levelInfo","levelBitrate","maxBufLen","maxBufferSize","maxBufferLength","maxMaxBufferLength","mediaBuffer","altAudio","_fetchPayloadOrEos","fragLen","initialLiveManifestSize","_ensureFragmentAtLivePoint","_findFragment","_loadFragmentOrKey","maxLatency","liveMaxLatencyDuration","liveMaxLatencyDurationCount","maxFragLookUpTolerance","liveSyncPosition","computeLivePosition","readyState","targetSN","targetCC","foundFrag","fragNext","fragmentWithinToleranceTest","candidateLookupTolerance","curSNIdx","sameLevel","nextFrag","loadCounter","fragLoadIdx","maxThreshold","fragLoadingLoopThreshold","loadIdx","autoLevel","autoLevelEnabled","getBufferedFrag","_bufferedFrags","followingBufferedFrag","fragPlayingCurrent","playbackRate","fragPlaying","fragPlayingLevel","immediateLevelSwitch","immediateSwitch","previouslyPaused","paused","pause","flushMainBuffer","POSITIVE_INFINITY","immediateLevelSwitchEnd","play","nextLevelSwitch","fetchdelay","nextBufferedFrag","nextLevelId","nextLevel","fragLastKbps","maxStartPTS","endOffset","flushScope","onMediaAttached","onvseeking","onMediaSeeking","onvseeked","onMediaSeeked","onvended","onMediaEnded","autoStartLoad","onMediaDetaching","ended","tolerance","fragStartOffset","fragEndOffset","stalled","onManifestParsed","aac","heaac","audioCodecSwitch","startLevelLoaded","onLevelLoaded","newLevelId","curLevel","LevelHelper","onKeyLoaded","onFragLoaded","fragLoaded","currentLevel","tbuffered","defaultAudioCodec","lastAudioCodec","pendingBuffering","appended","mediaSeeking","initSegmentData","onFragParsingInitSegment","fragNew","trackName","ua","levelCodec","parent","content","onFragParsingData","onFragParsed","_checkAppendedParsed","onAudioTrackSwitching","onAudioTrackSwitched","videoBuffer","onBufferCreated","mediaTrack","alternate","onBufferAppended","pending","bufferedFrags","filter","total","tfirst","mediaBuffered","loadError","delay","_reduceMaxBufferLength","levelRetry","minLength","startPositionBuffered","firstbufferedPosition","expectedPlaying","jumpThreshold","playheadMoving","stallReported","nudgeRetry","tnow","stalledDuration","lowBufferWatchdogPeriod","nextBufferStart","nudgeOffset","hole","highBufferWatchdogPeriod","nudgeMaxRetry","targetTime","onFragLoadEmergencyAborted","onBufferFlushed","onLevelRemoved","swapAudioCodec","targetLatency","liveSyncDuration","liveSyncDurationCount","nextState","previousState","_liveSyncPosition","_manualLevel","cleanTimer","clearTimeout","canload","_levels","onManifestLoaded","levels0","bitrateStart","bitrateSet","videoCodecFound","audioCodecFound","brokenmp4inmp3","checkSupported","redundantLevelId","urlId","_firstLevel","firstLevel","setLevelInternal","newLevel","_level","levelProperties","levelError","removeLevel","nbRedundantLevel","recoverable","nextAutoLevel","reloadInterval","trequest","_startLevel","configStartLevel","addTextTrack","mode","onFragParsingMetadata","Cue","window","WebKitDataCue","VTTCue","TextTrackCue","cue","addCue","EWMA","halfLife","alpha_","exp","estimate_","totalWeight_","weight","adjAlpha","getTotalWeight","getEstimate","zeroFactor","slow","fast","defaultEstimate","defaultEstimate_","minWeight_","minDelayMs_","slow_","fast_","durationMs","numBytes","bandwidth","canEstimate","lastLoadedFragLevel","_nextAutoLevel","_bwEstimator","onCheck","_abandonRulesCheck","clearTimer","isLive","ewmaFast","ewmaSlow","abrEwmaFastLive","abrEwmaSlowLive","abrEwmaFastVoD","abrEwmaSlowVoD","abrEwmaDefaultEstimate","v","minAutoLevel","aborted","requestDelay","loadRate","bw","realBitrate","expectedLen","fragLoadedDelay","bufferStarvationDelay","fragLevelNextLoadedDelay","levelNextBitrate","abrMaxWithRealBitrate","loadedBytes","loadedDuration","onFragBuffered","fragLoadingProcessingMs","bwEstimate","bitrateTestDelay","_findBestLevel","currentFragDuration","currentBw","maxAutoLevel","maxFetchDuration","bwFactor","bwUpFactor","avgDuration","adjustedbw","fetchDuration","forcedAutoLevel","bwEstimator","nextABRAutoLevel","_nextABRAutoLevel","avgbw","bestLevel","abrBandWidthFactor","abrBandWidthUpFactor","maxStarvationDelay","maxLoadingDelay","_msDuration","_levelDuration","onsbue","onSBUpdateEnd","onsbe","onSBUpdateError","pendingTracks","onLevelPtsUpdated","audioBuffer","sourceBuffer","timestampOffset","updating","audioTimestampOffset","audioExpected","videoExpected","sourceBufferNb","onMediaAttaching","ms","mediaSource","onmso","onMediaSourceOpen","onmse","onMediaSourceEnded","onmsc","onMediaSourceClose","src","createObjectURL","endOfStream","removeAttribute","flushRange","segments","checkPendingTracks","pendingTracksNb","createSourceBuffers","doAppending","_needsFlush","doFlush","_needsEos","checkEos","appending","counter","segment","updateMediaElementDuration","onBufferReset","sb","removeSourceBuffer","onBufferCodecs","mimeType","addSourceBuffer","onBufferAppending","onBufferAppendFail","onBufferEos","sbobj","onBufferFlushing","flushBufferCounter","onLevelUpdated","levelDuration","range","flushBuffer","appendBuffer","appendError","code","appendErrorMaxRetry","typeIn","bufStart","bufEnd","flushStart","flushEnd","remove","capLevelToPlayerSize","restrictedLevels","autoLevelCapping","onFpsDropLevelCapping","CapLevelController","isLevelAllowed","droppedLevel","HTMLVideoElement","getMaxLevel","detectPlayerSize","levelsLength","streamController","capLevelIndex","validLevels","getMaxLevelByMediaSize","mediaWidth","mediaHeight","atGreatestBandiwdth","maxLevelIndex","clientWidth","offsetWidth","contentScaleFactor","clientHeight","offsetHeight","devicePixelRatio","isVideoPlaybackQualityAvailable","capLevelOnFPSDrop","getVideoPlaybackQuality","checkFPSInterval","fpsDroppedMonitoringPeriod","checkFPS","decodedFrames","droppedFrames","lastTime","currentPeriod","currentDropped","lastDroppedFrames","currentDecoded","lastDecodedFrames","droppedFPS","totalDroppedFrames","fpsDroppedMonitoringThreshold","videoPlaybackQuality","totalVideoFrames","droppedVideoFrames","webkitDecodedFrameCount","webkitDroppedFrameCount","xhrSetup","requestTimeout","retryTimeout","callbacks","loadInternal","xhr","XDomainRequest","XMLHttpRequest","open","status","setRequestHeader","onreadystatechange","readystatechange","onprogress","send","currentTarget","responseText","responseURL","statusText","lengthComputable","hlsDefaultConfig","fetchSetup","abrController","bufferController","capLevelController","fpsController","minAutoBitrate","__BUILD_VERSION__","audioStreamController","audioTrackController","subtitleStreamController","subtitleTrackController","timelineController","cueHandler","enableCEA708Captions","enableWebVTT","captionsTextTrack1Label","captionsTextTrack1LanguageCode","captionsTextTrack2Label","captionsTextTrack2LanguageCode","isSupported","WebKitMediaSource","SourceBuffer","WebKitSourceBuffer","sourceBufferValidAPI","Hls","defaultConfig","DefaultConfig","prop","_autoLevelCapping","playListLoader","fragmentLoader","keyLoader","id3TrackController","levelController","networkControllers","Controller","coreComponents","detachMedia","component","attachMedia","loadSource","location","href","controller","recoverMediaError","loadLevel","manualLevel","audioTrackId","subtitleTracks","subtitleTrack","subtitleTrackId","DemuxerWorker","transferable"],"mappings":"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A;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,GAAG;AACH,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;AC7SA;;AAEA;AACA,iB;AACA;;AAEA,6BAA6B,mBAAmB,eAAe;AAC/D,oCAAoC;AACpC;AACA;;AAEA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF;AACtF;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB,EAAE;AAChD;AACA;AACA;AACA;AACA,CAAC;AACD;;;;;;;;;;;;;;;;;;;IClKqBoD,S;AACnB,qBAAYC,MAAZ,EAAmBC,EAAnB,EAAuB;AAAA;;AACrB,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKE,KAAL,GAAaD,EAAb;AACD;;sBAEDE,O,oBAAQtD,I,EAAMiB,G,EAAK;AACjB,WAAO,KAAKkC,MAAL,CAAYG,OAAZ,CAAoB,EAACC,MAAM,SAAP,EAAkBH,IAAI,KAAKC,KAA3B,EAApB,EAAuDpC,GAAvD,EAA4DjB,IAA5D,CAAP;AACD,G;;;;;+CARkBkD,S;;;;ICAfM,U;AACJ,sBAAYL,MAAZ,EAAmBlC,GAAnB,EAAwB;AAAA;;AACtB,SAAKkC,MAAL,GAAcA,MAAd;AACA,SAAKlC,GAAL,GAAWA,GAAX;AACD;;uBAEDwC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","file":"hls.light.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Hls\"] = factory();\n\telse\n\t\troot[\"Hls\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/hls.js/dist/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f18f34d650e0f5483547","function noop() {}\n\nconst fakeLogger = {\n  trace: noop,\n  debug: noop,\n  log: noop,\n  warn: noop,\n  info: noop,\n  error: noop\n};\n\nlet exportedLogger = fakeLogger;\n\n/*globals self: false */\n\n//let lastCallTime;\n// function formatMsgWithTimeInfo(type, msg) {\n//   const now = Date.now();\n//   const diff = lastCallTime ? '+' + (now - lastCallTime) : '0';\n//   lastCallTime = now;\n//   msg = (new Date(now)).toISOString() + ' | [' +  type + '] > ' + msg + ' ( ' + diff + ' ms )';\n//   return msg;\n// }\n\nfunction formatMsg(type, msg) {\n  msg = '[' +  type + '] > ' + msg;\n  return msg;\n}\n\nfunction consolePrintFn(type) {\n  const func = self.console[type];\n  if (func) {\n    return function(...args) {\n      if(args[0]) {\n        args[0] = formatMsg(type, args[0]);\n      }\n      func.apply(self.console, args);\n    };\n  }\n  return noop;\n}\n\nfunction exportLoggerFunctions(debugConfig, ...functions) {\n  functions.forEach(function(type) {\n    exportedLogger[type] = debugConfig[type] ? debugConfig[type].bind(debugConfig) : consolePrintFn(type);\n  });\n}\n\nexport var enableLogs = function(debugConfig) {\n  if (debugConfig === true || typeof debugConfig === 'object') {\n    exportLoggerFunctions(debugConfig,\n      // Remove out from list here to hard-disable a log-level\n      //'trace',\n      'debug',\n      'log',\n      'info',\n      'warn',\n      'error'\n    );\n    // Some browsers don't allow to use bind on console object anyway\n    // fallback to default if needed\n    try {\n     exportedLogger.log();\n    } catch (e) {\n      exportedLogger = fakeLogger;\n    }\n  }\n  else {\n    exportedLogger = fakeLogger;\n  }\n};\n\nexport var logger = exportedLogger;\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/logger.js","export default {\n  // fired before MediaSource is attaching to media element - data: { media }\n  MEDIA_ATTACHING: 'hlsMediaAttaching',\n  // fired when MediaSource has been succesfully attached to media element - data: { }\n  MEDIA_ATTACHED: 'hlsMediaAttached',\n  // fired before detaching MediaSource from media element - data: { }\n  MEDIA_DETACHING: 'hlsMediaDetaching',\n  // fired when MediaSource has been detached from media element - data: { }\n  MEDIA_DETACHED: 'hlsMediaDetached',\n  // fired when we buffer is going to be reset - data: { }\n  BUFFER_RESET: 'hlsBufferReset',\n  // fired when we know about the codecs that we need buffers for to push into - data: {tracks : { container, codec, levelCodec, initSegment, metadata }}\n  BUFFER_CODECS: 'hlsBufferCodecs',\n  // fired when sourcebuffers have been created - data: { tracks : tracks }\n  BUFFER_CREATED: 'hlsBufferCreated',\n  // fired when we append a segment to the buffer - data: { segment: segment object }\n  BUFFER_APPENDING: 'hlsBufferAppending',\n  // fired when we are done with appending a media segment to the buffer - data : { parent : segment parent that triggered BUFFER_APPENDING, pending : nb of segments waiting for appending for this segment parent}\n  BUFFER_APPENDED: 'hlsBufferAppended',\n  // fired when the stream is finished and we want to notify the media buffer that there will be no more data - data: { }\n  BUFFER_EOS: 'hlsBufferEos',\n  // fired when the media buffer should be flushed - data { startOffset, endOffset }\n  BUFFER_FLUSHING: 'hlsBufferFlushing',\n  // fired when the media buffer has been flushed - data: { }\n  BUFFER_FLUSHED: 'hlsBufferFlushed',\n  // fired to signal that a manifest loading starts - data: { url : manifestURL}\n  MANIFEST_LOADING: 'hlsManifestLoading',\n  // fired after manifest has been loaded - data: { levels : [available quality levels], audioTracks : [ available audio tracks], url : manifestURL, stats : { trequest, tfirst, tload, mtime}}\n  MANIFEST_LOADED: 'hlsManifestLoaded',\n  // fired after manifest has been parsed - data: { levels : [available quality levels], firstLevel : index of first quality level appearing in Manifest}\n  MANIFEST_PARSED: 'hlsManifestParsed',\n  // fired when a level switch is requested - data: { level : id of new level } // deprecated in favor LEVEL_SWITCHING\n  LEVEL_SWITCH: 'hlsLevelSwitch',\n  // fired when a level switch is requested - data: { level : id of new level }\n  LEVEL_SWITCHING: 'hlsLevelSwitching',\n  // fired when a level switch is effective - data: { level : id of new level }\n  LEVEL_SWITCHED: 'hlsLevelSwitched',\n  // fired when a level playlist loading starts - data: { url : level URL, level : id of level being loaded}\n  LEVEL_LOADING: 'hlsLevelLoading',\n  // fired when a level playlist loading finishes - data: { details : levelDetails object, level : id of loaded level, stats : { trequest, tfirst, tload, mtime} }\n  LEVEL_LOADED: 'hlsLevelLoaded',\n  // fired when a level's details have been updated based on previous details, after it has been loaded - data: { details : levelDetails object, level : id of updated level }\n  LEVEL_UPDATED: 'hlsLevelUpdated',\n  // fired when a level's PTS information has been updated after parsing a fragment - data: { details : levelDetails object, level : id of updated level, drift: PTS drift observed when parsing last fragment }\n  LEVEL_PTS_UPDATED: 'hlsLevelPtsUpdated',\n  // fired to notify that audio track lists has been updated - data: { audioTracks : audioTracks }\n  LEVEL_REMOVED: 'hlsLevelRemoved',\n  // fired when a level should no longer be used\n  AUDIO_TRACKS_UPDATED: 'hlsAudioTracksUpdated',\n  // fired when an audio track switch occurs - data: { id : audio track id } // deprecated in favor AUDIO_TRACK_SWITCHING\n  AUDIO_TRACK_SWITCH: 'hlsAudioTrackSwitch',\n  // fired when an audio track switching is requested - data: { id : audio track id }\n  AUDIO_TRACK_SWITCHING: 'hlsAudioTrackSwitching',\n  // fired when an audio track switch actually occurs - data: { id : audio track id }\n  AUDIO_TRACK_SWITCHED: 'hlsAudioTrackSwitched',\n  // fired when an audio track loading starts - data: { url : audio track URL, id : audio track id }\n  AUDIO_TRACK_LOADING: 'hlsAudioTrackLoading',\n  // fired when an audio track loading finishes - data: { details : levelDetails object, id : audio track id, stats : { trequest, tfirst, tload, mtime } }\n  AUDIO_TRACK_LOADED: 'hlsAudioTrackLoaded',\n  // fired to notify that subtitle track lists has been updated - data: { subtitleTracks : subtitleTracks }\n  SUBTITLE_TRACKS_UPDATED: 'hlsSubtitleTracksUpdated',\n  // fired when an subtitle track switch occurs - data: { id : subtitle track id }\n  SUBTITLE_TRACK_SWITCH: 'hlsSubtitleTrackSwitch',\n  // fired when a subtitle track loading starts - data: { url : subtitle track URL, id : subtitle track id }\n  SUBTITLE_TRACK_LOADING: 'hlsSubtitleTrackLoading',\n  // fired when a subtitle track loading finishes - data: { details : levelDetails object, id : subtitle track id, stats : { trequest, tfirst, tload, mtime } }\n  SUBTITLE_TRACK_LOADED: 'hlsSubtitleTrackLoaded',\n  // fired when a subtitle fragment has been processed - data: { success : boolean, frag : the processed frag }\n  SUBTITLE_FRAG_PROCESSED: 'hlsSubtitleFragProcessed',\n  // fired when a set of VTTCues to be managed externally has been parsed - data: { type: string, track: string, cues: [ VTTCue ] }\n  CUES_PARSED: 'hlsCuesParsed',\n  // fired when a text track to be managed externally is found - data: { tracks: [ { label: string, kind: string, default: boolean } ] }\n  NON_NATIVE_TEXT_TRACKS_FOUND: 'hlsNonNativeTextTracksFound',\n  // fired when the first timestamp is found - data: { id : demuxer id, initPTS: initPTS, frag : fragment object }\n  INIT_PTS_FOUND: 'hlsInitPtsFound',\n  // fired when a fragment loading starts - data: { frag : fragment object }\n  FRAG_LOADING: 'hlsFragLoading',\n  // fired when a fragment loading is progressing - data: { frag : fragment object, { trequest, tfirst, loaded } }\n  FRAG_LOAD_PROGRESS: 'hlsFragLoadProgress',\n  // Identifier for fragment load aborting for emergency switch down - data: { frag : fragment object }\n  FRAG_LOAD_EMERGENCY_ABORTED: 'hlsFragLoadEmergencyAborted',\n  // fired when a fragment loading is completed - data: { frag : fragment object, payload : fragment payload, stats : { trequest, tfirst, tload, length } }\n  FRAG_LOADED: 'hlsFragLoaded',\n  // fired when a fragment has started decrypting - data: { level : levelId, sn : sequence number }\n  FRAG_DECRYPT_STARTED: 'hlsFragDecryptStarted',\n  // fired when a fragment has finished decrypting - data: { id : demuxer id, frag: fragment object, stats : { tstart, tdecrypt } }\n  FRAG_DECRYPTED: 'hlsFragDecrypted',\n  // fired when Init Segment has been extracted from fragment - data: { id : demuxer id, frag: fragment object, moov : moov MP4 box, codecs : codecs found while parsing fragment }\n  FRAG_PARSING_INIT_SEGMENT: 'hlsFragParsingInitSegment',\n  // fired when parsing sei text is completed - data: { id : demuxer id, frag: fragment object, samples : [ sei samples pes ] }\n  FRAG_PARSING_USERDATA: 'hlsFragParsingUserdata',\n  // fired when parsing id3 is completed - data: { id : demuxer id, frag: fragment object, samples : [ id3 samples pes ] }\n  FRAG_PARSING_METADATA: 'hlsFragParsingMetadata',\n  // fired when data have been extracted from fragment - data: { id : demuxer id, frag: fragment object, data1 : moof MP4 box or TS fragments, data2 : mdat MP4 box or null}\n  FRAG_PARSING_DATA: 'hlsFragParsingData',\n  // fired when fragment parsing is completed - data: { id : demuxer id, frag: fragment object }\n  FRAG_PARSED: 'hlsFragParsed',\n  // fired when fragment remuxed MP4 boxes have all been appended into SourceBuffer - data: { id : demuxer id, frag : fragment object, stats : { trequest, tfirst, tload, tparsed, tbuffered, length, bwEstimate } }\n  FRAG_BUFFERED: 'hlsFragBuffered',\n  // fired when fragment matching with current media position is changing - data : { id : demuxer id, frag : fragment object }\n  FRAG_CHANGED: 'hlsFragChanged',\n  // Identifier for a FPS drop event - data: { curentDropped, currentDecoded, totalDroppedFrames }\n  FPS_DROP: 'hlsFpsDrop',\n  //triggered when FPS drop triggers auto level capping - data: { level, droppedlevel }\n  FPS_DROP_LEVEL_CAPPING: 'hlsFpsDropLevelCapping',\n  // Identifier for an error event - data: { type : error type, details : error details, fatal : if true, hls.js cannot/will not try to recover, if false, hls.js will try to recover,other error specific data }\n  ERROR: 'hlsError',\n  // fired when hls.js instance starts destroying. Different from MEDIA_DETACHED as one could want to detach and reattach a media to the instance of hls.js to handle mid-rolls for example - data: { }\n  DESTROYING: 'hlsDestroying',\n  // fired when a decrypt key loading starts - data: { frag : fragment object }\n  KEY_LOADING: 'hlsKeyLoading',\n  // fired when a decrypt key loading is completed - data: { frag : fragment object, payload : key payload, stats : { trequest, tfirst, tload, length } }\n  KEY_LOADED: 'hlsKeyLoaded',\n  // fired upon stream controller state transitions - data: { previousState, nextState }\n  STREAM_STATE_TRANSITION: 'hlsStreamStateTransition'\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/events.js","export const ErrorTypes = {\n  // Identifier for a network error (loading error / timeout ...)\n  NETWORK_ERROR: 'networkError',\n  // Identifier for a media Error (video/parsing/mediasource error)\n  MEDIA_ERROR: 'mediaError',\n  // Identifier for a mux Error (demuxing/remuxing)\n  MUX_ERROR: 'muxError',\n  // Identifier for all other errors\n  OTHER_ERROR: 'otherError'\n};\n\nexport const ErrorDetails = {\n  // Identifier for a manifest load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n  MANIFEST_LOAD_ERROR: 'manifestLoadError',\n  // Identifier for a manifest load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n  MANIFEST_LOAD_TIMEOUT: 'manifestLoadTimeOut',\n  // Identifier for a manifest parsing error - data: { url : faulty URL, reason : error reason}\n  MANIFEST_PARSING_ERROR: 'manifestParsingError',\n  // Identifier for a manifest with only incompatible codecs error - data: { url : faulty URL, reason : error reason}\n  MANIFEST_INCOMPATIBLE_CODECS_ERROR: 'manifestIncompatibleCodecsError',\n  //\n  MANIFEST_EMPTY_ERROR: 'manifestEmptyError',\n  // Identifier for a level load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n  LEVEL_LOAD_ERROR: 'levelLoadError',\n  // Identifier for a level load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n  LEVEL_LOAD_TIMEOUT: 'levelLoadTimeOut',\n  // Identifier for a level switch error - data: { level : faulty level Id, event : error description}\n  LEVEL_SWITCH_ERROR: 'levelSwitchError',\n  // Identifier for an audio track load error - data: { url : faulty URL, response : { code: error code, text: error text }}\n  AUDIO_TRACK_LOAD_ERROR: 'audioTrackLoadError',\n  // Identifier for an audio track load timeout - data: { url : faulty URL, response : { code: error code, text: error text }}\n  AUDIO_TRACK_LOAD_TIMEOUT: 'audioTrackLoadTimeOut',\n  // Identifier for fragment load error - data: { frag : fragment object, response : { code: error code, text: error text }}\n  FRAG_LOAD_ERROR: 'fragLoadError',\n  // Identifier for fragment loop loading error - data: { frag : fragment object}\n  FRAG_LOOP_LOADING_ERROR: 'fragLoopLoadingError',\n  // Identifier for fragment load timeout error - data: { frag : fragment object}\n  FRAG_LOAD_TIMEOUT: 'fragLoadTimeOut',\n  // Identifier for a fragment decryption error event - data: {id : demuxer Id,frag: fragment object, reason : parsing error description }\n  FRAG_DECRYPT_ERROR: 'fragDecryptError',\n  // Identifier for a fragment parsing error event - data: { id : demuxer Id, reason : parsing error description }\n  // will be renamed DEMUX_PARSING_ERROR and switched to MUX_ERROR in the next major release\n  FRAG_PARSING_ERROR: 'fragParsingError',\n  // Identifier for a remux alloc error event - data: { id : demuxer Id, frag : fragment object, bytes : nb of bytes on which allocation failed , reason : error text }\n  REMUX_ALLOC_ERROR : 'remuxAllocError',\n  // Identifier for decrypt key load error - data: { frag : fragment object, response : { code: error code, text: error text }}\n  KEY_LOAD_ERROR: 'keyLoadError',\n  // Identifier for decrypt key load timeout error - data: { frag : fragment object}\n  KEY_LOAD_TIMEOUT: 'keyLoadTimeOut',\n  // Triggered when an exception occurs while adding a sourceBuffer to MediaSource - data : {  err : exception , mimeType : mimeType }\n  BUFFER_ADD_CODEC_ERROR: 'bufferAddCodecError',\n  // Identifier for a buffer append error - data: append error description\n  BUFFER_APPEND_ERROR: 'bufferAppendError',\n  // Identifier for a buffer appending error event - data: appending error description\n  BUFFER_APPENDING_ERROR: 'bufferAppendingError',\n  // Identifier for a buffer stalled error event\n  BUFFER_STALLED_ERROR: 'bufferStalledError',\n  // Identifier for a buffer full event\n  BUFFER_FULL_ERROR: 'bufferFullError',\n  // Identifier for a buffer seek over hole event\n  BUFFER_SEEK_OVER_HOLE: 'bufferSeekOverHole',\n  // Identifier for a buffer nudge on stall (playback is stuck although currentTime is in a buffered area)\n  BUFFER_NUDGE_ON_STALL : 'bufferNudgeOnStall',\n  // Identifier for an internal exception happening inside hls.js while handling an event\n  INTERNAL_EXCEPTION: 'internalException',\n  // Malformed WebVTT contents\n  WEBVTT_EXCEPTION: 'webVTTException'\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/errors.js","// A blank file used to build the \"light\" configurations\n// This file replaces modules which we do not want to build\n// This replacement is done in the \"resolve\" section of the webpack config\n\n\n\n// WEBPACK FOOTER //\n// ./src/empty.js","/**\n * ID3 parser\n */\n class ID3 {\n  /**\n   * Returns true if an ID3 header can be found at offset in data\n   * @param {Uint8Array} data - The data to search in\n   * @param {number} offset - The offset at which to start searching\n   * @return {boolean} - True if an ID3 header is found\n   */\n  static isHeader(data, offset) {\n    /*\n    * http://id3.org/id3v2.3.0\n    * [0]     = 'I'\n    * [1]     = 'D'\n    * [2]     = '3'\n    * [3,4]   = {Version}\n    * [5]     = {Flags}\n    * [6-9]   = {ID3 Size}\n    *\n    * An ID3v2 tag can be detected with the following pattern:\n    *  $49 44 33 yy yy xx zz zz zz zz\n    * Where yy is less than $FF, xx is the 'flags' byte and zz is less than $80\n    */\n    if (offset + 10 <= data.length) {\n      //look for 'ID3' identifier\n      if (data[offset] === 0x49 && data[offset+1] === 0x44 && data[offset+2] === 0x33) {\n        //check version is within range\n        if (data[offset+3] < 0xFF && data[offset+4] < 0xFF) {\n          //check size is within range\n          if (data[offset+6] < 0x80 && data[offset+7] < 0x80 && data[offset+8] < 0x80 && data[offset+9] < 0x80) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns true if an ID3 footer can be found at offset in data\n   * @param {Uint8Array} data - The data to search in\n   * @param {number} offset - The offset at which to start searching\n   * @return {boolean} - True if an ID3 footer is found\n   */\n  static isFooter(data, offset) {\n    /*\n    * The footer is a copy of the header, but with a different identifier\n    */\n    if (offset + 10 <= data.length) {\n      //look for '3DI' identifier\n      if (data[offset] === 0x33 && data[offset+1] === 0x44 && data[offset+2] === 0x49) {\n        //check version is within range\n        if (data[offset+3] < 0xFF && data[offset+4] < 0xFF) {\n          //check size is within range\n          if (data[offset+6] < 0x80 && data[offset+7] < 0x80 && data[offset+8] < 0x80 && data[offset+9] < 0x80) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns any adjacent ID3 tags found in data starting at offset, as one block of data\n   * @param {Uint8Array} data - The data to search in\n   * @param {number} offset - The offset at which to start searching\n   * @return {Uint8Array} - The block of data containing any ID3 tags found\n   */\n  static getID3Data(data, offset) {\n    const front = offset;\n    let length = 0;\n\n    while (ID3.isHeader(data, offset)) {\n      //ID3 header is 10 bytes\n      length += 10;\n\n      const size = ID3._readSize(data, offset + 6);\n      length += size;\n\n      if (ID3.isFooter(data, offset + 10)) {\n        //ID3 footer is 10 bytes\n        length += 10;\n      }\n\n      offset += length;\n    }\n\n    if (length > 0) {\n      return data.subarray(front, front + length);\n    }\n\n    return undefined;\n  }\n\n  static _readSize(data, offset) {\n    let size = 0;\n    size  = ((data[offset]   & 0x7f) << 21);\n    size |= ((data[offset+1] & 0x7f) << 14);\n    size |= ((data[offset+2] & 0x7f) << 7);\n    size |=  (data[offset+3] & 0x7f);\n    return size;\n  }\n\n  /**\n   * Searches for the Elementary Stream timestamp found in the ID3 data chunk\n   * @param {Uint8Array} data - Block of data containing one or more ID3 tags\n   * @return {number} - The timestamp\n   */\n  static getTimeStamp(data) {\n    const frames = ID3.getID3Frames(data);\n    for(let i = 0; i < frames.length; i++) {\n      const frame = frames[i];\n      if (ID3.isTimeStampFrame(frame)) {\n        return ID3._readTimeStamp(frame);\n      }\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Returns true if the ID3 frame is an Elementary Stream timestamp frame\n   * @param {ID3 frame} frame\n   */\n  static isTimeStampFrame(frame) {\n    return (frame && frame.key === 'PRIV' && frame.info === 'com.apple.streaming.transportStreamTimestamp');\n  }\n\n  static _getFrameData(data) {\n    /*\n    Frame ID       $xx xx xx xx (four characters)\n    Size           $xx xx xx xx\n    Flags          $xx xx\n    */\n    const type = String.fromCharCode(data[0], data[1], data[2], data[3]);\n    const size = ID3._readSize(data, 4);\n\n    //skip frame id, size, and flags\n    let offset = 10;\n\n    return { type, size, data: data.subarray(offset, offset + size) };\n  }\n\n  /**\n   * Returns an array of ID3 frames found in all the ID3 tags in the id3Data\n   * @param {Uint8Array} id3Data - The ID3 data containing one or more ID3 tags\n   * @return {ID3 frame[]} - Array of ID3 frame objects\n   */\n  static getID3Frames(id3Data) {\n    let offset = 0;\n    const frames = [];\n\n    while (ID3.isHeader(id3Data, offset)) {\n      const size = ID3._readSize(id3Data, offset + 6);\n      //skip past ID3 header\n      offset += 10;\n      const end = offset + size;\n      //loop through frames in the ID3 tag\n      while (offset + 8 < end) {\n        const frameData = ID3._getFrameData(id3Data.subarray(offset));\n        const frame = ID3._decodeFrame(frameData);\n        if (frame) {\n          frames.push(frame);\n        }\n        //skip frame header and frame data\n        offset += frameData.size + 10;\n      }\n\n      if (ID3.isFooter(id3Data, offset)) {\n        offset += 10;\n      }\n    }\n\n    return frames;\n  }\n\n  static _decodeFrame(frame) {\n    if (frame.type === 'PRIV') {\n      return ID3._decodePrivFrame(frame);\n    } else if (frame.type[0] === 'T') {\n      return ID3._decodeTextFrame(frame);\n    } else if (frame.type[0] === 'W') {\n      return ID3._decodeURLFrame(frame);\n    }\n\n    return undefined;\n  }\n\n  static _readTimeStamp(timeStampFrame) {\n    if (timeStampFrame.data.byteLength === 8) {\n      const data = new Uint8Array(timeStampFrame.data);\n      // timestamp is 33 bit expressed as a big-endian eight-octet number,\n      // with the upper 31 bits set to zero.\n      const pts33Bit = data[3] & 0x1;\n      let timestamp = (data[4] << 23) +\n                      (data[5] << 15) +\n                      (data[6] <<  7) +\n                       data[7];\n      timestamp /= 45;\n\n      if (pts33Bit) {\n        timestamp += 47721858.84; // 2^32 / 90\n      }\n\n      return Math.round(timestamp);\n    }\n\n    return undefined;\n  }\n\n  static _decodePrivFrame(frame) {\n    /*\n    Format: <text string>\\0<binary data>\n    */\n    if (frame.size < 2) {\n      return undefined;\n    }\n\n    const owner = ID3._utf8ArrayToStr(frame.data);\n    const privateData = new Uint8Array(frame.data.subarray(owner.length + 1));\n\n    return { key: frame.type, info: owner, data: privateData.buffer };\n  }\n\n  static _decodeTextFrame(frame) {\n    if (frame.size < 2) {\n      return undefined;\n    }\n\n    if (frame.type === 'TXXX') {\n      /*\n      Format:\n      [0]   = {Text Encoding}\n      [1-?] = {Description}\\0{Value}\n      */\n      let index = 1;\n      const description = ID3._utf8ArrayToStr(frame.data.subarray(index));\n\n      index += description.length + 1;\n      const value = ID3._utf8ArrayToStr(frame.data.subarray(index));\n\n      return { key: frame.type, info: description, data: value };\n    } else {\n      /*\n      Format:\n      [0]   = {Text Encoding}\n      [1-?] = {Value}\n      */\n      const text = ID3._utf8ArrayToStr(frame.data.subarray(1));\n      return { key: frame.type, data: text };\n    }\n  }\n\n  static _decodeURLFrame(frame) {\n    if (frame.type === 'WXXX') {\n      /*\n      Format:\n      [0]   = {Text Encoding}\n      [1-?] = {Description}\\0{URL}\n      */\n      if (frame.size < 2) {\n        return undefined;\n      }\n\n      let index = 1;\n      const description = ID3._utf8ArrayToStr(frame.data.subarray(index));\n\n      index += description.length + 1;\n      const value = ID3._utf8ArrayToStr(frame.data.subarray(index));\n\n      return { key: frame.type, info: description, data: value };\n    } else {\n      /*\n      Format:\n      [0-?] = {URL}\n      */\n      const url = ID3._utf8ArrayToStr(frame.data);\n      return { key: frame.type, data: url };\n    }\n  }\n\n  // http://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript/22373197\n  // http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt\n  /* utf.js - UTF-8 <=> UTF-16 convertion\n   *\n   * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>\n   * Version: 1.0\n   * LastModified: Dec 25 1999\n   * This library is free.  You can redistribute it and/or modify it.\n   */\n  static _utf8ArrayToStr(array) {\n\n    let char2;\n    let char3;\n    let out = '';\n    let i = 0;\n    let length = array.length;\n\n    while (i < length) {\n      let c = array[i++];\n      switch (c >> 4) {\n        case 0:\n          return out;\n        case 1: case 2: case 3: case 4: case 5: case 6: case 7:\n          // 0xxxxxxx\n          out += String.fromCharCode(c);\n          break;\n        case 12: case 13:\n          // 110x xxxx   10xx xxxx\n          char2 = array[i++];\n          out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));\n          break;\n        case 14:\n          // 1110 xxxx  10xx xxxx  10xx xxxx\n          char2 = array[i++];\n          char3 = array[i++];\n          out += String.fromCharCode(((c & 0x0F) << 12) |\n            ((char2 & 0x3F) << 6) |\n            ((char3 & 0x3F) << 0));\n          break;\n      }\n    }\n\n    return out;\n  }\n}\n\nexport default ID3;\n\n\n\n// WEBPACK FOOTER //\n// ./src/demux/id3.js","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/events/events.js\n// module id = 5\n// module chunks = 0","// see https://tools.ietf.org/html/rfc1808\r\n\r\n/* jshint ignore:start */\r\n(function(root) { \r\n/* jshint ignore:end */\r\n\r\n  var URL_REGEX = /^((?:[^\\/;?#]+:)?)(\\/\\/[^\\/\\;?#]*)?(.*?)??(;.*?)?(\\?.*?)?(#.*?)?$/;\r\n  var FIRST_SEGMENT_REGEX = /^([^\\/;?#]*)(.*)$/;\r\n  var SLASH_DOT_REGEX = /(?:\\/|^)\\.(?=\\/)/g;\r\n  var SLASH_DOT_DOT_REGEX = /(?:\\/|^)\\.\\.\\/(?!\\.\\.\\/).*?(?=\\/)/g;\r\n\r\n  var URLToolkit = { // jshint ignore:line\r\n    // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //\r\n    // E.g\r\n    // With opts.alwaysNormalize = false (default, spec compliant)\r\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g\r\n    // With opts.alwaysNormalize = true (default, not spec compliant)\r\n    // http://a.com/b/cd + /e/f/../g => http://a.com/e/g\r\n    buildAbsoluteURL: function(baseURL, relativeURL, opts) {\r\n      opts = opts || {};\r\n      // remove any remaining space and CRLF\r\n      baseURL = baseURL.trim();\r\n      relativeURL = relativeURL.trim();\r\n      if (!relativeURL) {\r\n        // 2a) If the embedded URL is entirely empty, it inherits the\r\n        // entire base URL (i.e., is set equal to the base URL)\r\n        // and we are done.\r\n        if (!opts.alwaysNormalize) {\r\n          return baseURL;\r\n        }\r\n        var basePartsForNormalise = this.parseURL(baseURL);\r\n        if (!baseParts) {\r\n          throw new Error('Error trying to parse base URL.');\r\n        }\r\n        basePartsForNormalise.path = URLToolkit.normalizePath(basePartsForNormalise.path);\r\n        return URLToolkit.buildURLFromParts(basePartsForNormalise);\r\n      }\r\n      var relativeParts = this.parseURL(relativeURL);\r\n      if (!relativeParts) {\r\n        throw new Error('Error trying to parse relative URL.');\r\n      }\r\n      if (relativeParts.scheme) {\r\n        // 2b) If the embedded URL starts with a scheme name, it is\r\n        // interpreted as an absolute URL and we are done.\r\n        if (!opts.alwaysNormalize) {\r\n          return relativeURL;\r\n        }\r\n        relativeParts.path = URLToolkit.normalizePath(relativeParts.path);\r\n        return URLToolkit.buildURLFromParts(relativeParts);\r\n      }\r\n      var baseParts = this.parseURL(baseURL);\r\n      if (!baseParts) {\r\n        throw new Error('Error trying to parse base URL.');\r\n      }\r\n      if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {\r\n        // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc\r\n        // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'\r\n        var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);\r\n        baseParts.netLoc = pathParts[1];\r\n        baseParts.path = pathParts[2];\r\n      }\r\n      if (baseParts.netLoc && !baseParts.path) {\r\n        baseParts.path = '/';\r\n      }\r\n      var builtParts = {\r\n        // 2c) Otherwise, the embedded URL inherits the scheme of\r\n        // the base URL.\r\n        scheme: baseParts.scheme,\r\n        netLoc: relativeParts.netLoc,\r\n        path: null,\r\n        params: relativeParts.params,\r\n        query: relativeParts.query,\r\n        fragment: relativeParts.fragment\r\n      };\r\n      if (!relativeParts.netLoc) {\r\n        // 3) If the embedded URL's <net_loc> is non-empty, we skip to\r\n        // Step 7.  Otherwise, the embedded URL inherits the <net_loc>\r\n        // (if any) of the base URL.\r\n        builtParts.netLoc = baseParts.netLoc;\r\n        // 4) If the embedded URL path is preceded by a slash \"/\", the\r\n        // path is not relative and we skip to Step 7.\r\n        if (relativeParts.path[0] !== '/') {\r\n          if (!relativeParts.path) {\r\n            // 5) If the embedded URL path is empty (and not preceded by a\r\n            // slash), then the embedded URL inherits the base URL path\r\n            builtParts.path = baseParts.path;\r\n            // 5a) if the embedded URL's <params> is non-empty, we skip to\r\n            // step 7; otherwise, it inherits the <params> of the base\r\n            // URL (if any) and\r\n            if (!relativeParts.params) {\r\n              builtParts.params = baseParts.params;\r\n              // 5b) if the embedded URL's <query> is non-empty, we skip to\r\n              // step 7; otherwise, it inherits the <query> of the base\r\n              // URL (if any) and we skip to step 7.\r\n              if (!relativeParts.query) {\r\n                builtParts.query = baseParts.query;\r\n              }\r\n            }\r\n          } else {\r\n            // 6) The last segment of the base URL's path (anything\r\n            // following the rightmost slash \"/\", or the entire path if no\r\n            // slash is present) is removed and the embedded URL's path is\r\n            // appended in its place.\r\n            var baseURLPath = baseParts.path;\r\n            var newPath = baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) + relativeParts.path;\r\n            builtParts.path = URLToolkit.normalizePath(newPath);\r\n          }\r\n        }\r\n      }\r\n      if (builtParts.path === null) {\r\n        builtParts.path = opts.alwaysNormalize ? URLToolkit.normalizePath(relativeParts.path) : relativeParts.path;\r\n      }\r\n      return URLToolkit.buildURLFromParts(builtParts);\r\n    },\r\n    parseURL: function(url) {\r\n      var parts = URL_REGEX.exec(url);\r\n      if (!parts) {\r\n        return null;\r\n      }\r\n      return {\r\n        scheme: parts[1] || '',\r\n        netLoc: parts[2] || '',\r\n        path: parts[3] || '',\r\n        params: parts[4] || '',\r\n        query: parts[5] || '',\r\n        fragment: parts[6] || ''\r\n      };\r\n    },\r\n    normalizePath: function(path) {\r\n      // The following operations are\r\n      // then applied, in order, to the new path:\r\n      // 6a) All occurrences of \"./\", where \".\" is a complete path\r\n      // segment, are removed.\r\n      // 6b) If the path ends with \".\" as a complete path segment,\r\n      // that \".\" is removed.\r\n      path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');\r\n      // 6c) All occurrences of \"<segment>/../\", where <segment> is a\r\n      // complete path segment not equal to \"..\", are removed.\r\n      // Removal of these path segments is performed iteratively,\r\n      // removing the leftmost matching pattern on each iteration,\r\n      // until no matching pattern remains.\r\n      // 6d) If the path ends with \"<segment>/..\", where <segment> is a\r\n      // complete path segment not equal to \"..\", that\r\n      // \"<segment>/..\" is removed.\r\n      while (path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length) {} // jshint ignore:line\r\n      return path.split('').reverse().join('');\r\n    },\r\n    buildURLFromParts: function(parts) {\r\n      return parts.scheme + parts.netLoc + parts.path + parts.params + parts.query + parts.fragment;\r\n    }\r\n  };\r\n\r\n/* jshint ignore:start */\r\n  if(typeof exports === 'object' && typeof module === 'object')\r\n    module.exports = URLToolkit;\r\n  else if(typeof define === 'function' && define.amd)\r\n    define([], function() { return URLToolkit; });\r\n  else if(typeof exports === 'object')\r\n    exports[\"URLToolkit\"] = URLToolkit;\r\n  else\r\n    root[\"URLToolkit\"] = URLToolkit;\r\n})(this);\r\n/* jshint ignore:end */\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/url-toolkit/src/url-toolkit.js\n// module id = 6\n// module chunks = 0","export default class AESCrypto {\n  constructor(subtle,iv) {\n    this.subtle = subtle;\n    this.aesIV = iv;\n  }\n\n  decrypt(data, key) {\n    return this.subtle.decrypt({name: 'AES-CBC', iv: this.aesIV}, key, data);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/crypt/aes-crypto.js","class FastAESKey {\n  constructor(subtle,key) {\n    this.subtle = subtle;\n    this.key = key;\n  }\n\n  expandKey() {\n    return this.subtle.importKey('raw', this.key, {name: 'AES-CBC'}, false, ['encrypt', 'decrypt']);\n  }\n}\n\nexport default FastAESKey;\n\n\n\n// WEBPACK FOOTER //\n// ./src/crypt/fast-aes-key.js","class AESDecryptor {\n  constructor() {\n    // Static after running initTable\n    this.rcon = [0x0, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n    this.subMix = [new Uint32Array(256),new Uint32Array(256),new Uint32Array(256),new Uint32Array(256)];\n    this.invSubMix = [new Uint32Array(256),new Uint32Array(256),new Uint32Array(256),new Uint32Array(256)];\n    this.sBox = new Uint32Array(256);\n    this.invSBox = new Uint32Array(256);\n\n    // Changes during runtime\n    this.key = new Uint32Array(0);\n\n    this.initTable();\n  }\n\n  // Using view.getUint32() also swaps the byte order.\n  uint8ArrayToUint32Array_(arrayBuffer) {\n    let view = new DataView(arrayBuffer);\n    let newArray = new Uint32Array(4);\n    for (let i = 0; i < 4; i++) {\n      newArray[i] = view.getUint32(i * 4);\n    }\n    return newArray;\n  }\n\n  initTable() {\n    let sBox = this.sBox;\n    let invSBox = this.invSBox;\n    let subMix = this.subMix;\n    let subMix0 = subMix[0];\n    let subMix1 = subMix[1];\n    let subMix2 = subMix[2];\n    let subMix3 = subMix[3];\n    let invSubMix  = this.invSubMix;\n    let invSubMix0 = invSubMix[0];\n    let invSubMix1 = invSubMix[1];\n    let invSubMix2 = invSubMix[2];\n    let invSubMix3 = invSubMix[3];\n\n    let d = new Uint32Array(256);\n    let x = 0;\n    let xi = 0;\n    let i = 0;\n    for (i = 0; i < 256; i++) {\n      if (i < 128) {\n        d[i] = i << 1;\n      } else {\n        d[i] = (i << 1) ^ 0x11b;\n      }\n    }\n\n    for (i = 0; i < 256; i++) {\n      let sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n      sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n      sBox[x] = sx;\n      invSBox[sx] = x;\n\n      // Compute multiplication\n      let x2 = d[x];\n      let x4 = d[x2];\n      let x8 = d[x4];\n\n      // Compute sub/invSub bytes, mix columns tables\n      let t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n      subMix0[x] = (t << 24) | (t >>> 8);\n      subMix1[x] = (t << 16) | (t >>> 16);\n      subMix2[x] = (t << 8) | (t >>> 24);\n      subMix3[x] = t;\n\n      // Compute inv sub bytes, inv mix columns tables\n      t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n      invSubMix0[sx] = (t << 24) | (t >>> 8);\n      invSubMix1[sx] = (t << 16) | (t >>> 16);\n      invSubMix2[sx] = (t << 8) | (t >>> 24);\n      invSubMix3[sx] = t;\n\n      // Compute next counter\n      if (!x) {\n        x = xi = 1;\n      } else {\n        x = x2 ^ d[d[d[x8 ^ x2]]];\n        xi ^= d[d[xi]];\n      }\n    }\n  }\n\n  expandKey(keyBuffer) {\n    // convert keyBuffer to Uint32Array\n    let key = this.uint8ArrayToUint32Array_(keyBuffer);\n    let sameKey = true;\n    let offset = 0;\n\n    while (offset < key.length && sameKey) {\n      sameKey = (key[offset] === this.key[offset]);\n      offset++;\n    }\n\n    if (sameKey) {\n      return;\n    }\n\n    this.key = key;\n    let keySize = this.keySize = key.length;\n\n    if (keySize !== 4 && keySize !== 6 && keySize !== 8) {\n      throw new Error('Invalid aes key size=' + keySize);\n    }\n\n    let ksRows = this.ksRows = (keySize + 6 + 1) * 4;\n    let ksRow;\n    let invKsRow;\n\n    let keySchedule = this.keySchedule = new Uint32Array(ksRows);\n    let invKeySchedule = this.invKeySchedule = new Uint32Array(ksRows);\n    let sbox = this.sBox;\n    let rcon = this.rcon;\n\n    let invSubMix  = this.invSubMix;\n    let invSubMix0 = invSubMix[0];\n    let invSubMix1 = invSubMix[1];\n    let invSubMix2 = invSubMix[2];\n    let invSubMix3 = invSubMix[3];\n\n    let prev;\n    let t;\n\n    for (ksRow = 0; ksRow < ksRows; ksRow++) {\n      if (ksRow < keySize) {\n        prev = keySchedule[ksRow] = key[ksRow];\n        continue;\n      }\n      t = prev;\n\n      if (ksRow % keySize === 0) {\n        // Rot word\n        t = (t << 8) | (t >>> 24);\n\n        // Sub word\n        t = (sbox[t >>> 24] << 24) | (sbox[(t >>> 16) & 0xff] << 16) | (sbox[(t >>> 8) & 0xff] << 8) | sbox[t & 0xff];\n\n        // Mix Rcon\n        t ^= rcon[(ksRow / keySize) | 0] << 24;\n      } else if (keySize > 6 && ksRow % keySize === 4)  {\n        // Sub word\n        t = (sbox[t >>> 24] << 24) | (sbox[(t >>> 16) & 0xff] << 16) | (sbox[(t >>> 8) & 0xff] << 8) | sbox[t & 0xff];\n      }\n\n      keySchedule[ksRow] = prev = (keySchedule[ksRow - keySize] ^ t) >>> 0;\n    }\n\n    for (invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n      ksRow = ksRows - invKsRow;\n      if (invKsRow & 3) {\n        t = keySchedule[ksRow];\n      } else {\n        t = keySchedule[ksRow - 4];\n      }\n\n      if (invKsRow < 4 || ksRow <= 4) {\n        invKeySchedule[invKsRow] = t;\n      } else {\n        invKeySchedule[invKsRow] = invSubMix0[sbox[t >>> 24]] ^ invSubMix1[sbox[(t >>> 16) & 0xff]] ^ invSubMix2[sbox[(t >>> 8) & 0xff]] ^ invSubMix3[sbox[t & 0xff]];\n      }\n\n      invKeySchedule[invKsRow] = invKeySchedule[invKsRow] >>> 0;\n    }\n  }\n\n  // Adding this as a method greatly improves performance.\n  networkToHostOrderSwap(word) {\n    return (word << 24) | ((word & 0xff00) << 8) | ((word & 0xff0000) >> 8) | (word >>> 24);\n  }\n\n  decrypt(inputArrayBuffer, offset, aesIV) {\n    let nRounds = this.keySize + 6;\n    let invKeySchedule = this.invKeySchedule;\n    let invSBOX = this.invSBox;\n\n    let invSubMix  = this.invSubMix;\n    let invSubMix0 = invSubMix[0];\n    let invSubMix1 = invSubMix[1];\n    let invSubMix2 = invSubMix[2];\n    let invSubMix3 = invSubMix[3];\n\n    let initVector = this.uint8ArrayToUint32Array_(aesIV);\n    let initVector0 = initVector[0];\n    let initVector1 = initVector[1];\n    let initVector2 = initVector[2];\n    let initVector3 = initVector[3];\n\n    let inputInt32 = new Int32Array(inputArrayBuffer);\n    let outputInt32 = new Int32Array(inputInt32.length);\n\n    let t0, t1, t2, t3;\n    let s0, s1, s2, s3;\n    let inputWords0, inputWords1, inputWords2, inputWords3;\n\n    var ksRow, i;\n    let swapWord = this.networkToHostOrderSwap;\n\n    while (offset < inputInt32.length) {\n      inputWords0 = swapWord(inputInt32[offset]);\n      inputWords1 = swapWord(inputInt32[offset + 1]);\n      inputWords2 = swapWord(inputInt32[offset + 2]);\n      inputWords3 = swapWord(inputInt32[offset + 3]);\n\n      s0 = inputWords0 ^ invKeySchedule[0];\n      s1 = inputWords3 ^ invKeySchedule[1];\n      s2 = inputWords2 ^ invKeySchedule[2];\n      s3 = inputWords1 ^ invKeySchedule[3];\n\n      ksRow = 4;\n\n      // Iterate through the rounds of decryption\n      for (i = 1; i < nRounds; i++) {\n        t0 = invSubMix0[s0 >>> 24] ^ invSubMix1[(s1 >> 16) & 0xff] ^ invSubMix2[(s2 >> 8) & 0xff] ^ invSubMix3[s3 & 0xff] ^ invKeySchedule[ksRow];\n        t1 = invSubMix0[s1 >>> 24] ^ invSubMix1[(s2 >> 16) & 0xff] ^ invSubMix2[(s3 >> 8) & 0xff] ^ invSubMix3[s0 & 0xff] ^ invKeySchedule[ksRow + 1];\n        t2 = invSubMix0[s2 >>> 24] ^ invSubMix1[(s3 >> 16) & 0xff] ^ invSubMix2[(s0 >> 8) & 0xff] ^ invSubMix3[s1 & 0xff] ^ invKeySchedule[ksRow + 2];\n        t3 = invSubMix0[s3 >>> 24] ^ invSubMix1[(s0 >> 16) & 0xff] ^ invSubMix2[(s1 >> 8) & 0xff] ^ invSubMix3[s2 & 0xff] ^ invKeySchedule[ksRow + 3];\n        // Update state\n        s0 = t0;\n        s1 = t1;\n        s2 = t2;\n        s3 = t3;\n\n        ksRow = ksRow + 4;\n      }\n\n      // Shift rows, sub bytes, add round key\n      t0 = ((invSBOX[s0 >>> 24] << 24) ^ (invSBOX[(s1 >> 16) & 0xff] << 16) ^ (invSBOX[(s2 >> 8) & 0xff] << 8) ^ invSBOX[s3 & 0xff]) ^ invKeySchedule[ksRow];\n      t1 = ((invSBOX[s1 >>> 24] << 24) ^ (invSBOX[(s2 >> 16) & 0xff] << 16) ^ (invSBOX[(s3 >> 8) & 0xff] << 8) ^ invSBOX[s0 & 0xff]) ^ invKeySchedule[ksRow + 1];\n      t2 = ((invSBOX[s2 >>> 24] << 24) ^ (invSBOX[(s3 >> 16) & 0xff] << 16) ^ (invSBOX[(s0 >> 8) & 0xff] << 8) ^ invSBOX[s1 & 0xff]) ^ invKeySchedule[ksRow + 2];\n      t3 = ((invSBOX[s3 >>> 24] << 24) ^ (invSBOX[(s0 >> 16) & 0xff] << 16) ^ (invSBOX[(s1 >> 8) & 0xff] << 8) ^ invSBOX[s2 & 0xff]) ^ invKeySchedule[ksRow + 3];\n      ksRow = ksRow + 3;\n\n      // Write\n      outputInt32[offset] = swapWord(t0 ^ initVector0);\n      outputInt32[offset + 1] = swapWord(t3 ^ initVector1);\n      outputInt32[offset + 2] = swapWord(t2 ^ initVector2);\n      outputInt32[offset + 3] = swapWord(t1 ^ initVector3);\n\n      // reset initVector to last 4 unsigned int\n      initVector0 = inputWords0;\n      initVector1 = inputWords1;\n      initVector2 = inputWords2;\n      initVector3 = inputWords3;\n\n      offset = offset + 4;\n    }\n\n    return outputInt32.buffer;\n  }\n\n  destroy() {\n    this.key = undefined;\n    this.keySize = undefined;\n    this.ksRows = undefined;\n\n    this.sBox = undefined;\n    this.invSBox = undefined;\n    this.subMix = undefined;\n    this.invSubMix = undefined;\n    this.keySchedule = undefined;\n    this.invKeySchedule = undefined;\n\n    this.rcon = undefined;\n  }\n}\n\nexport default AESDecryptor;\n\n\n\n// WEBPACK FOOTER //\n// ./src/crypt/aes-decryptor.js","import AESCrypto from './aes-crypto';\nimport FastAESKey from './fast-aes-key';\nimport AESDecryptor from './aes-decryptor';\n\nimport {ErrorTypes, ErrorDetails} from '../errors';\nimport {logger} from '../utils/logger';\n\n/*globals self: false */\n\nclass Decrypter {\n  constructor(observer,config) {\n    this.observer = observer;\n    this.config = config;\n    this.logEnabled = true;\n    try {\n      const browserCrypto = crypto ? crypto : self.crypto;\n      this.subtle = browserCrypto.subtle || browserCrypto.webkitSubtle;\n    } catch (e) {}\n    this.disableWebCrypto = !this.subtle;\n  }\n\n  isSync() {\n    return (this.disableWebCrypto && this.config.enableSoftwareAES);\n  }\n\n  decrypt(data, key, iv, callback) {\n    if (this.disableWebCrypto && this.config.enableSoftwareAES) {\n      if (this.logEnabled) {\n        logger.log('JS AES decrypt');\n        this.logEnabled = false;\n      }\n      let decryptor = this.decryptor;\n      if (!decryptor) {\n        this.decryptor = decryptor = new AESDecryptor();\n      }\n      decryptor.expandKey(key);\n      callback(decryptor.decrypt(data, 0, iv));\n    }\n    else {\n      if (this.logEnabled) {\n        logger.log('WebCrypto AES decrypt');\n        this.logEnabled = false;\n      }\n      const subtle = this.subtle;\n      if (this.key !== key) {\n        this.key = key;\n        this.fastAesKey = new FastAESKey(subtle,key);\n      }\n\n      this.fastAesKey.expandKey().\n        then((aesKey) => {\n          // decrypt using web crypto\n          let crypto = new AESCrypto(subtle,iv);\n          crypto.decrypt(data, aesKey).\n          catch ((err) => {\n            this.onWebCryptoError(err, data, key, iv, callback);\n          }).\n          then((result) => {\n            callback(result);\n          });\n        }).\n        catch ((err) => {\n          this.onWebCryptoError(err, data, key, iv, callback);\n        });\n    }\n  }\n\n  onWebCryptoError(err, data, key, iv, callback) {\n    if (this.config.enableSoftwareAES) {\n      logger.log('WebCrypto Error, disable WebCrypto API');\n      this.disableWebCrypto = true;\n      this.logEnabled = true;\n      this.decrypt(data, key, iv, callback);\n    }\n    else {\n      logger.error(`decrypting error : ${err.message}`);\n      this.observer.trigger(Event.ERROR, {type : ErrorTypes.MEDIA_ERROR, details : ErrorDetails.FRAG_DECRYPT_ERROR, fatal : true, reason : err.message});\n    }\n  }\n\n  destroy() {\n    let decryptor = this.decryptor;\n    if (decryptor) {\n      decryptor.destroy();\n      this.decryptor = undefined;\n    }\n  }\n}\n\nexport default Decrypter;\n\n\n\n// WEBPACK FOOTER //\n// ./src/crypt/decrypter.js","/**\n *  ADTS parser helper\n */\nimport { logger } from '../utils/logger';\nimport { ErrorTypes, ErrorDetails } from '../errors';\n\nexport function getAudioConfig(observer, data, offset, audioCodec) {\n    var adtsObjectType, // :int\n      adtsSampleingIndex, // :int\n      adtsExtensionSampleingIndex, // :int\n      adtsChanelConfig, // :int\n      config,\n      userAgent = navigator.userAgent.toLowerCase(),\n      manifestCodec = audioCodec,\n      adtsSampleingRates = [\n        96000, 88200,\n        64000, 48000,\n        44100, 32000,\n        24000, 22050,\n        16000, 12000,\n        11025, 8000,\n        7350];\n    // byte 2\n    adtsObjectType = ((data[offset + 2] & 0xC0) >>> 6) + 1;\n    adtsSampleingIndex = ((data[offset + 2] & 0x3C) >>> 2);\n    if (adtsSampleingIndex > adtsSampleingRates.length - 1) {\n      observer.trigger(Event.ERROR, { type: ErrorTypes.MEDIA_ERROR, details: ErrorDetails.FRAG_PARSING_ERROR, fatal: true, reason: `invalid ADTS sampling index:${adtsSampleingIndex}` });\n      return;\n    }\n    adtsChanelConfig = ((data[offset + 2] & 0x01) << 2);\n    // byte 3\n    adtsChanelConfig |= ((data[offset + 3] & 0xC0) >>> 6);\n    logger.log(`manifest codec:${audioCodec},ADTS data:type:${adtsObjectType},sampleingIndex:${adtsSampleingIndex}[${adtsSampleingRates[adtsSampleingIndex]}Hz],channelConfig:${adtsChanelConfig}`);\n    // firefox: freq less than 24kHz = AAC SBR (HE-AAC)\n    if (/firefox/i.test(userAgent)) {\n      if (adtsSampleingIndex >= 6) {\n        adtsObjectType = 5;\n        config = new Array(4);\n        // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies\n        // there is a factor 2 between frame sample rate and output sample rate\n        // multiply frequency by 2 (see table below, equivalent to substract 3)\n        adtsExtensionSampleingIndex = adtsSampleingIndex - 3;\n      } else {\n        adtsObjectType = 2;\n        config = new Array(2);\n        adtsExtensionSampleingIndex = adtsSampleingIndex;\n      }\n      // Android : always use AAC\n    } else if (userAgent.indexOf('android') !== -1) {\n      adtsObjectType = 2;\n      config = new Array(2);\n      adtsExtensionSampleingIndex = adtsSampleingIndex;\n    } else {\n      /*  for other browsers (Chrome/Vivaldi/Opera ...)\n          always force audio type to be HE-AAC SBR, as some browsers do not support audio codec switch properly (like Chrome ...)\n      */\n      adtsObjectType = 5;\n      config = new Array(4);\n      // if (manifest codec is HE-AAC or HE-AACv2) OR (manifest codec not specified AND frequency less than 24kHz)\n      if ((audioCodec && ((audioCodec.indexOf('mp4a.40.29') !== -1) ||\n        (audioCodec.indexOf('mp4a.40.5') !== -1))) ||\n        (!audioCodec && adtsSampleingIndex >= 6)) {\n        // HE-AAC uses SBR (Spectral Band Replication) , high frequencies are constructed from low frequencies\n        // there is a factor 2 between frame sample rate and output sample rate\n        // multiply frequency by 2 (see table below, equivalent to substract 3)\n        adtsExtensionSampleingIndex = adtsSampleingIndex - 3;\n      } else {\n        // if (manifest codec is AAC) AND (frequency less than 24kHz AND nb channel is 1) OR (manifest codec not specified and mono audio)\n        // Chrome fails to play back with low frequency AAC LC mono when initialized with HE-AAC.  This is not a problem with stereo.\n        if (audioCodec && audioCodec.indexOf('mp4a.40.2') !== -1 && ((adtsSampleingIndex >= 6 && adtsChanelConfig === 1) ||\n          /vivaldi/i.test(userAgent)) ||(!audioCodec && adtsChanelConfig === 1)) {\n          adtsObjectType = 2;\n          config = new Array(2);\n        }\n        adtsExtensionSampleingIndex = adtsSampleingIndex;\n      }\n    }\n    /* refer to http://wiki.multimedia.cx/index.php?title=MPEG-4_Audio#Audio_Specific_Config\n        ISO 14496-3 (AAC).pdf - Table 1.13 — Syntax of AudioSpecificConfig()\n      Audio Profile / Audio Object Type\n      0: Null\n      1: AAC Main\n      2: AAC LC (Low Complexity)\n      3: AAC SSR (Scalable Sample Rate)\n      4: AAC LTP (Long Term Prediction)\n      5: SBR (Spectral Band Replication)\n      6: AAC Scalable\n     sampling freq\n      0: 96000 Hz\n      1: 88200 Hz\n      2: 64000 Hz\n      3: 48000 Hz\n      4: 44100 Hz\n      5: 32000 Hz\n      6: 24000 Hz\n      7: 22050 Hz\n      8: 16000 Hz\n      9: 12000 Hz\n      10: 11025 Hz\n      11: 8000 Hz\n      12: 7350 Hz\n      13: Reserved\n      14: Reserved\n      15: frequency is written explictly\n      Channel Configurations\n      These are the channel configurations:\n      0: Defined in AOT Specifc Config\n      1: 1 channel: front-center\n      2: 2 channels: front-left, front-right\n    */\n    // audioObjectType = profile => profile, the MPEG-4 Audio Object Type minus 1\n    config[0] = adtsObjectType << 3;\n    // samplingFrequencyIndex\n    config[0] |= (adtsSampleingIndex & 0x0E) >> 1;\n    config[1] |= (adtsSampleingIndex & 0x01) << 7;\n    // channelConfiguration\n    config[1] |= adtsChanelConfig << 3;\n    if (adtsObjectType === 5) {\n      // adtsExtensionSampleingIndex\n      config[1] |= (adtsExtensionSampleingIndex & 0x0E) >> 1;\n      config[2] = (adtsExtensionSampleingIndex & 0x01) << 7;\n      // adtsObjectType (force to 2, chrome is checking that object type is less than 5 ???\n      //    https://chromium.googlesource.com/chromium/src.git/+/master/media/formats/mp4/aac.cc\n      config[2] |= 2 << 2;\n      config[3] = 0;\n    }\n    return { config: config, samplerate: adtsSampleingRates[adtsSampleingIndex], channelCount: adtsChanelConfig, codec: ('mp4a.40.' + adtsObjectType), manifestCodec: manifestCodec };\n  }\n\nexport function isHeaderPattern(data, offset) {\n  return data[offset] === 0xff && (data[offset + 1] & 0xf6) === 0xf0;\n}\n\nexport function getHeaderLength(data, offset) {\n  return (!!(data[offset + 1] & 0x01) ? 7 : 9);\n}\n\nexport function getFullFrameLength(data, offset) {\n  return ((data[offset + 3] & 0x03) << 11) |\n    (data[offset + 4] << 3) |\n    ((data[offset + 5] & 0xE0) >>> 5);\n}\n\nexport function isHeader(data, offset) {\n  // Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1\n  // Layer bits (position 14 and 15) in header should be always 0 for ADTS\n  // More info https://wiki.multimedia.cx/index.php?title=ADTS\n  if (offset + 1 < data.length && isHeaderPattern(data, offset)) {\n    return true;\n  }\n  return false;\n}\n\nexport function probe(data, offset) {\n  // same as isHeader but we also check that ADTS frame follows last ADTS frame\n  // or end of data is reached\n  if (offset + 1 < data.length && isHeaderPattern(data, offset)) {\n    // ADTS header Length\n    let headerLength = getHeaderLength(data, offset);\n    // ADTS frame Length\n    let frameLength = headerLength;\n    if (offset + 5 < data.length) {\n      frameLength = getFullFrameLength(data, offset);\n    }\n    let newOffset = offset + frameLength;\n    if (newOffset === data.length || (newOffset + 1 < data.length && isHeaderPattern(data, newOffset))) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function initTrackConfig(track, observer, data, offset, audioCodec) {\n  if (!track.samplerate) {\n    var config = getAudioConfig(observer, data, offset, audioCodec);\n    track.config = config.config;\n    track.samplerate = config.samplerate;\n    track.channelCount = config.channelCount;\n    track.codec = config.codec;\n    track.manifestCodec = config.manifestCodec;\n    logger.log(`parsed codec:${track.codec},rate:${config.samplerate},nb channel:${config.channelCount}`);\n  }\n}\n\nexport function getFrameDuration(samplerate) {\n  return 1024 * 90000 / samplerate;\n}\n\nexport function parseFrameHeader(data, offset, pts, frameIndex, frameDuration) {\n  var headerLength, frameLength, stamp;\n  var length = data.length;\n\n  // The protection skip bit tells us if we have 2 bytes of CRC data at the end of the ADTS header\n  headerLength = getHeaderLength(data, offset);\n  // retrieve frame size\n  frameLength = getFullFrameLength(data, offset);\n  frameLength -= headerLength;\n\n  if ((frameLength > 0) && ((offset + headerLength + frameLength) <= length)) {\n    stamp = pts + frameIndex * frameDuration;\n    //logger.log(`AAC frame, offset/length/total/pts:${offset+headerLength}/${frameLength}/${data.byteLength}/${(stamp/90).toFixed(0)}`);\n    return { headerLength, frameLength, stamp };\n  }\n\n  return undefined;\n}\n\nexport function appendFrame(track, data, offset, pts, frameIndex) {\n  var frameDuration = getFrameDuration(track.samplerate);\n  var header = parseFrameHeader(data, offset, pts, frameIndex, frameDuration);\n  if (header) {\n    var stamp = header.stamp;\n    var headerLength = header.headerLength;\n    var frameLength = header.frameLength;\n\n    //logger.log(`AAC frame, offset/length/total/pts:${offset+headerLength}/${frameLength}/${data.byteLength}/${(stamp/90).toFixed(0)}`);\n    var aacSample = {\n      unit: data.subarray(offset + headerLength, offset + headerLength + frameLength),\n      pts: stamp,\n      dts: stamp\n    };\n\n    track.samples.push(aacSample);\n    track.len += frameLength;\n\n    return {sample: aacSample, length: frameLength + headerLength};\n  }\n\n  return undefined;\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/demux/adts.js","/**\n * AAC demuxer\n */\nimport * as ADTS from './adts';\nimport { logger } from '../utils/logger';\nimport ID3 from '../demux/id3';\n\nclass AACDemuxer {\n\n  constructor(observer, remuxer, config) {\n    this.observer = observer;\n    this.config = config;\n    this.remuxer = remuxer;\n  }\n\n  resetInitSegment(initSegment, audioCodec, videoCodec, duration) {\n    this._audioTrack = { container: 'audio/adts', type: 'audio', id: -1, sequenceNumber: 0, isAAC: true, samples: [], len: 0, manifestCodec: audioCodec, duration: duration, inputTimeScale: 90000 };\n  }\n\n  resetTimeStamp() {\n  }\n\n  // Source for probe info - https://wiki.multimedia.cx/index.php?title=ADTS\n  static probe(data) {\n    if (!data) {\n      return false;\n    }\n    // Check for the ADTS sync word\n    // Look for ADTS header | 1111 1111 | 1111 X00X | where X can be either 0 or 1\n    // Layer bits (position 14 and 15) in header should be always 0 for ADTS\n    // More info https://wiki.multimedia.cx/index.php?title=ADTS\n    const id3Data = ID3.getID3Data(data, 0) || [];\n    let offset = id3Data.length;\n\n    for (let length = data.length; offset < length; offset++) {\n      if (ADTS.probe(data, offset)) {\n        logger.log('ADTS sync word found !');\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // feed incoming data to the front of the parsing pipeline\n  append(data, timeOffset, contiguous, accurateTimeOffset) {\n    let track = this._audioTrack;\n    let id3Data = ID3.getID3Data(data, 0) || [];\n    let timestamp = ID3.getTimeStamp(id3Data);\n    let pts = timestamp ? 90 * timestamp : timeOffset * 90000;\n    let frameIndex = 0;\n    let stamp = pts;\n    let length = data.length;\n    let offset = id3Data.length;\n\n    let id3Samples = [{ pts: stamp, dts: stamp, data: id3Data }];\n\n    while (offset < length - 1) {\n      if (ADTS.isHeader(data, offset) && (offset + 5) < length) {\n        ADTS.initTrackConfig(track, this.observer, data, offset, track.manifestCodec);\n        var frame = ADTS.appendFrame(track, data, offset, pts, frameIndex);\n        if (frame) {\n          offset += frame.length;\n          stamp = frame.sample.pts;\n          frameIndex++;\n        } else {\n          logger.log('Unable to parse AAC frame');\n          break;\n        }\n      } else if (ID3.isHeader(data, offset)) {\n        id3Data = ID3.getID3Data(data, offset);\n        id3Samples.push({ pts: stamp, dts: stamp, data: id3Data });\n        offset += id3Data.length;\n      } else {\n        //nothing found, keep looking\n        offset++;\n      }\n    }\n\n    this.remuxer.remux(track,\n      { samples: [] },\n      { samples: id3Samples, inputTimeScale: 90000 },\n      { samples: [] },\n      timeOffset,\n      contiguous,\n      accurateTimeOffset);\n  }\n\n  destroy() {\n  }\n\n}\n\nexport default AACDemuxer;\n\n\n\n// WEBPACK FOOTER //\n// ./src/demux/aacdemuxer.js","/**\n * MP4 demuxer\n */\n//import {logger} from '../utils/logger';\nimport Event from '../events';\n\nconst UINT32_MAX = Math.pow(2, 32) - 1;\n\n class MP4Demuxer {\n\n  constructor(observer, remuxer) {\n    this.observer = observer;\n    this.remuxer = remuxer;\n  }\n\n  resetTimeStamp(initPTS) {\n    this.initPTS = initPTS;\n  }\n\n  resetInitSegment(initSegment,audioCodec,videoCodec, duration) {\n    //jshint unused:false\n    if (initSegment && initSegment.byteLength) {\n      const initData = this.initData = MP4Demuxer.parseInitSegment(initSegment);\n      var tracks = {};\n      if (initData.audio) {\n        tracks.audio = { container : 'audio/mp4', codec : audioCodec, initSegment : duration ? initSegment : null };\n      }\n      if (initData.video) {\n        tracks.video = { container : 'video/mp4', codec : videoCodec, initSegment : duration ? initSegment : null };\n      }\n      this.observer.trigger(Event.FRAG_PARSING_INIT_SEGMENT,{ tracks : tracks });\n    } else {\n      if (audioCodec) {\n        this.audioCodec = audioCodec;\n      }\n      if (videoCodec) {\n        this.videoCodec = videoCodec;\n      }\n    }\n  }\n\n  static probe(data) {\n    if (data.length >= 8) {\n      const dataType = MP4Demuxer.bin2str(data.subarray(4,8));\n      return (['moof','ftyp','styp'].indexOf(dataType) >= 0);\n    }\n    return false;\n  }\n\n\n  static bin2str(buffer) {\n    return String.fromCharCode.apply(null, buffer);\n  }\n\n  static readUint32(buffer, offset) {\n    if (buffer.data) {\n      offset += buffer.start;\n      buffer = buffer.data;\n    }\n\n    const val = buffer[offset] << 24 |\n                buffer[offset + 1] << 16 |\n                buffer[offset + 2] << 8 |\n                buffer[offset + 3];\n    return val < 0 ? 4294967296 + val : val;\n  }\n\n  static writeUint32(buffer, offset, value) {\n    if (buffer.data) {\n      offset += buffer.start;\n      buffer = buffer.data;\n    }\n    buffer[offset] = value >> 24;\n    buffer[offset+1] = (value >> 16) & 0xff;\n    buffer[offset+2] = (value >> 8) & 0xff;\n    buffer[offset+3] = value & 0xff;\n  }\n\n\n  // Find the data for a box specified by its path\n  static findBox(data,path) {\n    var results = [],\n        i, size, type, end, subresults, start, endbox;\n\n    if (data.data) {\n      start = data.start;\n      end = data.end;\n      data = data.data;\n    } else {\n      start = 0;\n      end = data.byteLength;\n    }\n\n    if (!path.length) {\n      // short-circuit the search for empty paths\n      return null;\n    }\n\n    for (i = start; i < end;) {\n      size = MP4Demuxer.readUint32(data, i);\n      type = MP4Demuxer.bin2str(data.subarray(i + 4, i + 8));\n      endbox = size > 1 ? i + size : end;\n\n      if (type === path[0]) {\n\n        if (path.length === 1) {\n          // this is the end of the path and we've found the box we were\n          // looking for\n          results.push({ data : data, start : i + 8, end : endbox});\n        } else {\n          // recursively search for the next box along the path\n          subresults = MP4Demuxer.findBox({ data : data, start : i +8, end : endbox }, path.slice(1));\n          if (subresults.length) {\n            results = results.concat(subresults);\n          }\n        }\n      }\n      i = endbox;\n    }\n\n    // we've finished searching all of data\n    return results;\n  }\n\n\n\n/**\n * Parses an MP4 initialization segment and extracts stream type and\n * timescale values for any declared tracks. Timescale values indicate the\n * number of clock ticks per second to assume for time-based values\n * elsewhere in the MP4.\n *\n * To determine the start time of an MP4, you need two pieces of\n * information: the timescale unit and the earliest base media decode\n * time. Multiple timescales can be specified within an MP4 but the\n * base media decode time is always expressed in the timescale from\n * the media header box for the track:\n * ```\n * moov > trak > mdia > mdhd.timescale\n * moov > trak > mdia > hdlr\n * ```\n * @param init {Uint8Array} the bytes of the init segment\n * @return {object} a hash of track type to timescale values or null if\n * the init segment is malformed.\n */\n  static parseInitSegment(initSegment) {\n    var result = [];\n    var traks = MP4Demuxer.findBox(initSegment, ['moov', 'trak']);\n\n    traks.forEach(trak => {\n      const tkhd = MP4Demuxer.findBox(trak, ['tkhd'])[0];\n      if (tkhd) {\n        let version = tkhd.data[tkhd.start];\n        let index = version === 0 ? 12 : 20;\n        let trackId = MP4Demuxer.readUint32(tkhd, index);\n\n        const mdhd = MP4Demuxer.findBox(trak, ['mdia', 'mdhd'])[0];\n        if (mdhd) {\n          version = mdhd.data[mdhd.start];\n          index = version === 0 ? 12 : 20;\n          const timescale = MP4Demuxer.readUint32(mdhd, index);\n\n          const hdlr = MP4Demuxer.findBox(trak, ['mdia', 'hdlr'])[0];\n          if (hdlr) {\n            const hdlrType = MP4Demuxer.bin2str(hdlr.data.subarray(hdlr.start+8, hdlr.start+12));\n            let type = { 'soun' : 'audio', 'vide' : 'video'}[hdlrType];\n            if (type) {\n              result[trackId] = { timescale : timescale , type : type};\n              result[type] = { timescale : timescale , id : trackId};\n            }\n          }\n        }\n      }\n    });\n    return result;\n  }\n\n\n/**\n * Determine the base media decode start time, in seconds, for an MP4\n * fragment. If multiple fragments are specified, the earliest time is\n * returned.\n *\n * The base media decode time can be parsed from track fragment\n * metadata:\n * ```\n * moof > traf > tfdt.baseMediaDecodeTime\n * ```\n * It requires the timescale value from the mdhd to interpret.\n *\n * @param timescale {object} a hash of track ids to timescale values.\n * @return {number} the earliest base media decode start time for the\n * fragment, in seconds\n */\nstatic getStartDTS(initData, fragment) {\n  var trafs, baseTimes, result;\n\n  // we need info from two childrend of each track fragment box\n  trafs = MP4Demuxer.findBox(fragment, ['moof', 'traf']);\n\n  // determine the start times for each track\n  baseTimes = [].concat.apply([], trafs.map(function(traf) {\n    return MP4Demuxer.findBox(traf, ['tfhd']).map(function(tfhd) {\n      var id, scale, baseTime;\n\n      // get the track id from the tfhd\n      id = MP4Demuxer.readUint32(tfhd, 4);\n      // assume a 90kHz clock if no timescale was specified\n      scale = initData[id].timescale || 90e3;\n\n      // get the base media decode time from the tfdt\n      baseTime = MP4Demuxer.findBox(traf, ['tfdt']).map(function(tfdt) {\n        var version, result;\n\n        version = tfdt.data[tfdt.start];\n        result = MP4Demuxer.readUint32(tfdt, 4);\n        if (version ===  1) {\n          result *= Math.pow(2, 32);\n\n          result += MP4Demuxer.readUint32(tfdt, 8);\n        }\n        return result;\n      })[0];\n      baseTime = baseTime || Infinity;\n\n      // convert base time to seconds\n      return baseTime / scale;\n    });\n  }));\n\n  // return the minimum\n  result = Math.min.apply(null, baseTimes);\n  return isFinite(result) ? result : 0;\n}\n\n\n\n\nstatic offsetStartDTS(initData,fragment,timeOffset) {\n  MP4Demuxer.findBox(fragment, ['moof', 'traf']).map(function(traf) {\n    return MP4Demuxer.findBox(traf, ['tfhd']).map(function(tfhd) {\n      // get the track id from the tfhd\n      var id = MP4Demuxer.readUint32(tfhd, 4);\n      // assume a 90kHz clock if no timescale was specified\n      var timescale = initData[id].timescale || 90e3;\n\n      // get the base media decode time from the tfdt\n      MP4Demuxer.findBox(traf, ['tfdt']).map(function(tfdt) {\n        var version = tfdt.data[tfdt.start];\n        var baseMediaDecodeTime = MP4Demuxer.readUint32(tfdt, 4);\n        if (version === 0) {\n          MP4Demuxer.writeUint32(tfdt, 4, baseMediaDecodeTime - timeOffset*timescale);\n        } else {\n          baseMediaDecodeTime *= Math.pow(2, 32);\n          baseMediaDecodeTime += MP4Demuxer.readUint32(tfdt, 8);\n          baseMediaDecodeTime -= timeOffset*timescale;\n          const upper = Math.floor(baseMediaDecodeTime / (UINT32_MAX + 1));\n          const lower = Math.floor(baseMediaDecodeTime % (UINT32_MAX + 1));\n          MP4Demuxer.writeUint32(tfdt, 4, upper);\n          MP4Demuxer.writeUint32(tfdt, 8, lower);\n        }\n      });\n    });\n  });\n}\n\n  // feed incoming data to the front of the parsing pipeline\n  append(data, timeOffset,contiguous,accurateTimeOffset) {\n    let initData = this.initData;\n    if(!initData) {\n      this.resetInitSegment(data,this.audioCodec,this.videoCodec);\n      initData = this.initData;\n    }\n    let startDTS, initPTS = this.initPTS;\n    if (initPTS === undefined) {\n      let startDTS = MP4Demuxer.getStartDTS(initData,data);\n      this.initPTS = initPTS = startDTS - timeOffset;\n      this.observer.trigger(Event.INIT_PTS_FOUND, { initPTS: initPTS});\n    }\n    MP4Demuxer.offsetStartDTS(initData,data,initPTS);\n    startDTS = MP4Demuxer.getStartDTS(initData,data);\n    this.remuxer.remux(initData.audio, initData.video, null, null, startDTS, contiguous,accurateTimeOffset,data);\n  }\n\n  destroy() {\n  }\n\n}\n\nexport default MP4Demuxer;\n\n\n\n// WEBPACK FOOTER //\n// ./src/demux/mp4demuxer.js","/**\n *  MPEG parser helper\n */\n\nconst MpegAudio = {\n\n    BitratesMap: [\n        32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448,\n        32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384,\n        32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320,\n        32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256,\n        8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160],\n\n    SamplingRateMap: [44100, 48000, 32000, 22050, 24000, 16000, 11025, 12000, 8000],\n\n    appendFrame: function (track, data, offset, pts, frameIndex) {\n        // Using http://www.datavoyage.com/mpgscript/mpeghdr.htm as a reference\n        if (offset + 24 > data.length) {\n            return undefined;\n        }\n\n        var header = this.parseHeader(data, offset);\n        if (header && offset + header.frameLength <= data.length) {\n            var frameDuration = 1152 * 90000 / header.sampleRate;\n            var stamp = pts + frameIndex * frameDuration;\n            var sample = { unit: data.subarray(offset, offset + header.frameLength), pts: stamp, dts: stamp };\n\n            track.config = [];\n            track.channelCount = header.channelCount;\n            track.samplerate = header.sampleRate;\n            track.samples.push(sample);\n            track.len += header.frameLength;\n\n            return { sample, length: header.frameLength };\n        }\n\n        return undefined;\n    },\n\n    parseHeader: function (data, offset) {\n        var headerB = (data[offset + 1] >> 3) & 3;\n        var headerC = (data[offset + 1] >> 1) & 3;\n        var headerE = (data[offset + 2] >> 4) & 15;\n        var headerF = (data[offset + 2] >> 2) & 3;\n        var headerG = !!(data[offset + 2] & 2);\n        if (headerB !== 1 && headerE !== 0 && headerE !== 15 && headerF !== 3) {\n            var columnInBitrates = headerB === 3 ? (3 - headerC) : (headerC === 3 ? 3 : 4);\n            var bitRate = MpegAudio.BitratesMap[columnInBitrates * 14 + headerE - 1] * 1000;\n            var columnInSampleRates = headerB === 3 ? 0 : headerB === 2 ? 1 : 2;\n            var sampleRate = MpegAudio.SamplingRateMap[columnInSampleRates * 3 + headerF];\n            var padding = headerG ? 1 : 0;\n            var channelCount = data[offset + 3] >> 6 === 3 ? 1 : 2; // If bits of channel mode are `11` then it is a single channel (Mono)\n            var frameLength = headerC === 3 ?\n                ((headerB === 3 ? 12 : 6) * bitRate / sampleRate + padding) << 2 :\n                ((headerB === 3 ? 144 : 72) * bitRate / sampleRate + padding) | 0;\n\n            return { sampleRate, channelCount, frameLength };\n        }\n\n        return undefined;\n    },\n\n    isHeaderPattern: function (data, offset) {\n        return data[offset] === 0xff && (data[offset + 1] & 0xe0) === 0xe0 && (data[offset + 1] & 0x06) !== 0x00;\n    },\n\n    isHeader: function (data, offset) {\n        // Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1\n        // Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)\n        // More info http://www.mp3-tech.org/programmer/frame_header.html\n        if (offset + 1 < data.length && this.isHeaderPattern(data, offset)) {\n            return true;\n        }\n        return false;\n    },\n\n    probe: function (data, offset) {\n        // same as isHeader but we also check that MPEG frame follows last MPEG frame\n        // or end of data is reached\n        if (offset + 1 < data.length && this.isHeaderPattern(data, offset)) {\n            // MPEG header Length\n            let headerLength = 4;\n            // MPEG frame Length\n            let header = this.parseHeader(data, offset);\n            let frameLength = headerLength;\n            if (header && header.frameLength) {\n                frameLength = header.frameLength;\n            }\n            let newOffset = offset + frameLength;\n            if (newOffset === data.length || (newOffset + 1 < data.length && this.isHeaderPattern(data, newOffset))) {\n                return true;\n            }\n        }\n        return false;\n    }\n};\n\nexport default MpegAudio;\n\n\n\n// WEBPACK FOOTER //\n// ./src/demux/mpegaudio.js","/**\n * Parser for exponential Golomb codes, a variable-bitwidth number encoding scheme used by h264.\n*/\n\nimport {logger} from '../utils/logger';\n\nclass ExpGolomb {\n\n  constructor(data) {\n    this.data = data;\n    // the number of bytes left to examine in this.data\n    this.bytesAvailable = data.byteLength;\n    // the current word being examined\n    this.word = 0; // :uint\n    // the number of bits left to examine in the current word\n    this.bitsAvailable = 0; // :uint\n  }\n\n  // ():void\n  loadWord() {\n    var\n      data = this.data,\n      bytesAvailable = this.bytesAvailable,\n      position = data.byteLength - bytesAvailable,\n      workingBytes = new Uint8Array(4),\n      availableBytes = Math.min(4, bytesAvailable);\n    if (availableBytes === 0) {\n      throw new Error('no bytes available');\n    }\n    workingBytes.set(data.subarray(position, position + availableBytes));\n    this.word = new DataView(workingBytes.buffer).getUint32(0);\n    // track the amount of this.data that has been processed\n    this.bitsAvailable = availableBytes * 8;\n    this.bytesAvailable -= availableBytes;\n  }\n\n  // (count:int):void\n  skipBits(count) {\n    var skipBytes; // :int\n    if (this.bitsAvailable > count) {\n      this.word <<= count;\n      this.bitsAvailable -= count;\n    } else {\n      count -= this.bitsAvailable;\n      skipBytes = count >> 3;\n      count -= (skipBytes >> 3);\n      this.bytesAvailable -= skipBytes;\n      this.loadWord();\n      this.word <<= count;\n      this.bitsAvailable -= count;\n    }\n  }\n\n  // (size:int):uint\n  readBits(size) {\n    var\n      bits = Math.min(this.bitsAvailable, size), // :uint\n      valu = this.word >>> (32 - bits); // :uint\n    if (size > 32) {\n      logger.error('Cannot read more than 32 bits at a time');\n    }\n    this.bitsAvailable -= bits;\n    if (this.bitsAvailable > 0) {\n      this.word <<= bits;\n    } else if (this.bytesAvailable > 0) {\n      this.loadWord();\n    }\n    bits = size - bits;\n    if (bits > 0 && this.bitsAvailable) {\n      return valu << bits | this.readBits(bits);\n    } else {\n      return valu;\n    }\n  }\n\n  // ():uint\n  skipLZ() {\n    var leadingZeroCount; // :uint\n    for (leadingZeroCount = 0; leadingZeroCount < this.bitsAvailable; ++leadingZeroCount) {\n      if (0 !== (this.word & (0x80000000 >>> leadingZeroCount))) {\n        // the first bit of working word is 1\n        this.word <<= leadingZeroCount;\n        this.bitsAvailable -= leadingZeroCount;\n        return leadingZeroCount;\n      }\n    }\n    // we exhausted word and still have not found a 1\n    this.loadWord();\n    return leadingZeroCount + this.skipLZ();\n  }\n\n  // ():void\n  skipUEG() {\n    this.skipBits(1 + this.skipLZ());\n  }\n\n  // ():void\n  skipEG() {\n    this.skipBits(1 + this.skipLZ());\n  }\n\n  // ():uint\n  readUEG() {\n    var clz = this.skipLZ(); // :uint\n    return this.readBits(clz + 1) - 1;\n  }\n\n  // ():int\n  readEG() {\n    var valu = this.readUEG(); // :int\n    if (0x01 & valu) {\n      // the number is odd if the low order bit is set\n      return (1 + valu) >>> 1; // add 1 to make it even, and divide by 2\n    } else {\n      return -1 * (valu >>> 1); // divide by two then make it negative\n    }\n  }\n\n  // Some convenience functions\n  // :Boolean\n  readBoolean() {\n    return 1 === this.readBits(1);\n  }\n\n  // ():int\n  readUByte() {\n    return this.readBits(8);\n  }\n\n  // ():int\n  readUShort() {\n    return this.readBits(16);\n  }\n    // ():int\n  readUInt() {\n    return this.readBits(32);\n  }\n\n  /**\n   * Advance the ExpGolomb decoder past a scaling list. The scaling\n   * list is optionally transmitted as part of a sequence parameter\n   * set and is not relevant to transmuxing.\n   * @param count {number} the number of entries in this scaling list\n   * @see Recommendation ITU-T H.264, Section 7.3.2.1.1.1\n   */\n  skipScalingList(count) {\n    var\n      lastScale = 8,\n      nextScale = 8,\n      j,\n      deltaScale;\n    for (j = 0; j < count; j++) {\n      if (nextScale !== 0) {\n        deltaScale = this.readEG();\n        nextScale = (lastScale + deltaScale + 256) % 256;\n      }\n      lastScale = (nextScale === 0) ? lastScale : nextScale;\n    }\n  }\n\n  /**\n   * Read a sequence parameter set and return some interesting video\n   * properties. A sequence parameter set is the H264 metadata that\n   * describes the properties of upcoming video frames.\n   * @param data {Uint8Array} the bytes of a sequence parameter set\n   * @return {object} an object with configuration parsed from the\n   * sequence parameter set, including the dimensions of the\n   * associated video frames.\n   */\n  readSPS() {\n    var\n      frameCropLeftOffset = 0,\n      frameCropRightOffset = 0,\n      frameCropTopOffset = 0,\n      frameCropBottomOffset = 0,\n      profileIdc,profileCompat,levelIdc,\n      numRefFramesInPicOrderCntCycle, picWidthInMbsMinus1,\n      picHeightInMapUnitsMinus1,\n      frameMbsOnlyFlag,\n      scalingListCount,\n      i,\n      readUByte = this.readUByte.bind(this),\n      readBits = this.readBits.bind(this),\n      readUEG = this.readUEG.bind(this),\n      readBoolean = this.readBoolean.bind(this),\n      skipBits = this.skipBits.bind(this),\n      skipEG = this.skipEG.bind(this),\n      skipUEG = this.skipUEG.bind(this),\n      skipScalingList = this.skipScalingList.bind(this);\n\n    readUByte();\n    profileIdc = readUByte(); // profile_idc\n    profileCompat = readBits(5); // constraint_set[0-4]_flag, u(5)\n    skipBits(3); // reserved_zero_3bits u(3),\n    levelIdc = readUByte(); //level_idc u(8)\n    skipUEG(); // seq_parameter_set_id\n    // some profiles have more optional data we don't need\n    if (profileIdc === 100 ||\n        profileIdc === 110 ||\n        profileIdc === 122 ||\n        profileIdc === 244 ||\n        profileIdc === 44  ||\n        profileIdc === 83  ||\n        profileIdc === 86  ||\n        profileIdc === 118 ||\n        profileIdc === 128) {\n      var chromaFormatIdc = readUEG();\n      if (chromaFormatIdc === 3) {\n        skipBits(1); // separate_colour_plane_flag\n      }\n      skipUEG(); // bit_depth_luma_minus8\n      skipUEG(); // bit_depth_chroma_minus8\n      skipBits(1); // qpprime_y_zero_transform_bypass_flag\n      if (readBoolean()) { // seq_scaling_matrix_present_flag\n        scalingListCount = (chromaFormatIdc !== 3) ? 8 : 12;\n        for (i = 0; i < scalingListCount; i++) {\n          if (readBoolean()) { // seq_scaling_list_present_flag[ i ]\n            if (i < 6) {\n              skipScalingList(16);\n            } else {\n              skipScalingList(64);\n            }\n          }\n        }\n      }\n    }\n    skipUEG(); // log2_max_frame_num_minus4\n    var picOrderCntType = readUEG();\n    if (picOrderCntType === 0) {\n      readUEG(); //log2_max_pic_order_cnt_lsb_minus4\n    } else if (picOrderCntType === 1) {\n      skipBits(1); // delta_pic_order_always_zero_flag\n      skipEG(); // offset_for_non_ref_pic\n      skipEG(); // offset_for_top_to_bottom_field\n      numRefFramesInPicOrderCntCycle = readUEG();\n      for(i = 0; i < numRefFramesInPicOrderCntCycle; i++) {\n        skipEG(); // offset_for_ref_frame[ i ]\n      }\n    }\n    skipUEG(); // max_num_ref_frames\n    skipBits(1); // gaps_in_frame_num_value_allowed_flag\n    picWidthInMbsMinus1 = readUEG();\n    picHeightInMapUnitsMinus1 = readUEG();\n    frameMbsOnlyFlag = readBits(1);\n    if (frameMbsOnlyFlag === 0) {\n      skipBits(1); // mb_adaptive_frame_field_flag\n    }\n    skipBits(1); // direct_8x8_inference_flag\n    if (readBoolean()) { // frame_cropping_flag\n      frameCropLeftOffset = readUEG();\n      frameCropRightOffset = readUEG();\n      frameCropTopOffset = readUEG();\n      frameCropBottomOffset = readUEG();\n    }\n    let pixelRatio = [1,1];\n    if (readBoolean()) {\n      // vui_parameters_present_flag\n      if (readBoolean()) {\n        // aspect_ratio_info_present_flag\n        const aspectRatioIdc = readUByte();\n        switch (aspectRatioIdc) {\n          case 1: pixelRatio = [1,1]; break;\n          case 2: pixelRatio = [12,11]; break;\n          case 3: pixelRatio = [10,11]; break;\n          case 4: pixelRatio = [16,11]; break;\n          case 5: pixelRatio = [40,33]; break;\n          case 6: pixelRatio = [24,11]; break;\n          case 7: pixelRatio = [20,11]; break;\n          case 8: pixelRatio = [32,11]; break;\n          case 9: pixelRatio = [80,33]; break;\n          case 10: pixelRatio = [18,11]; break;\n          case 11: pixelRatio = [15,11]; break;\n          case 12: pixelRatio = [64,33]; break;\n          case 13: pixelRatio = [160,99]; break;\n          case 14: pixelRatio = [4,3]; break;\n          case 15: pixelRatio = [3,2]; break;\n          case 16: pixelRatio = [2,1]; break;\n          case 255: {\n            pixelRatio = [readUByte() << 8 | readUByte(), readUByte() << 8 | readUByte()];\n            break;\n          }\n        }\n      }\n    }\n    return {\n      width: Math.ceil((((picWidthInMbsMinus1 + 1) * 16) - frameCropLeftOffset * 2 - frameCropRightOffset * 2)),\n      height: ((2 - frameMbsOnlyFlag) * (picHeightInMapUnitsMinus1 + 1) * 16) - ((frameMbsOnlyFlag? 2 : 4) * (frameCropTopOffset + frameCropBottomOffset)),\n      pixelRatio : pixelRatio\n    };\n  }\n\n  readSliceType() {\n    // skip NALu type\n    this.readUByte();\n    // discard first_mb_in_slice\n    this.readUEG();\n    // return slice_type\n    return this.readUEG();\n  }\n}\n\nexport default ExpGolomb;\n\n\n\n// WEBPACK FOOTER //\n// ./src/demux/exp-golomb.js","/**\n * SAMPLE-AES decrypter\n*/\n\n import Decrypter from '../crypt/decrypter';\n\n class SampleAesDecrypter {\n\n  constructor(observer, config, decryptdata, discardEPB) {\n    this.decryptdata = decryptdata;\n    this.discardEPB = discardEPB;\n    this.decrypter = new Decrypter(observer, config);\n  }\n\n  decryptBuffer(encryptedData, callback) {\n    this.decrypter.decrypt(encryptedData, this.decryptdata.key.buffer, this.decryptdata.iv.buffer, callback);\n  }\n\n  // AAC - encrypt all full 16 bytes blocks starting from offset 16\n  decryptAacSample(samples, sampleIndex, callback, sync) {\n    let curUnit = samples[sampleIndex].unit;\n    let encryptedData = curUnit.subarray(16, curUnit.length - curUnit.length % 16);\n    let encryptedBuffer = encryptedData.buffer.slice(\n       encryptedData.byteOffset,\n       encryptedData.byteOffset + encryptedData.length);\n\n    let localthis = this;\n    this.decryptBuffer(encryptedBuffer, function (decryptedData) {\n      decryptedData = new Uint8Array(decryptedData);\n      curUnit.set(decryptedData, 16);\n\n      if (!sync) {\n        localthis.decryptAacSamples(samples, sampleIndex + 1, callback);\n      }\n    });\n  }\n\n  decryptAacSamples(samples, sampleIndex, callback) {\n    for (;; sampleIndex++) {\n      if (sampleIndex >= samples.length) {\n        callback();\n        return;\n      }\n\n      if (samples[sampleIndex].unit.length < 32) {\n        continue;\n      }\n\n      let sync = this.decrypter.isSync();\n\n      this.decryptAacSample(samples, sampleIndex, callback, sync);\n\n      if (!sync) {\n        return;\n      }\n    }\n  }\n\n  // AVC - encrypt one 16 bytes block out of ten, starting from offset 32\n  getAvcEncryptedData(decodedData) {\n    let encryptedDataLen = Math.floor((decodedData.length - 48) / 160) * 16 + 16;\n    let encryptedData = new Int8Array(encryptedDataLen);\n    let outputPos = 0;\n    for (let inputPos = 32; inputPos <= decodedData.length - 16; inputPos += 160, outputPos += 16) {\n      encryptedData.set(decodedData.subarray(inputPos, inputPos + 16), outputPos);\n    }\n    return encryptedData;\n  }\n\n  getAvcDecryptedUnit(decodedData, decryptedData) {\n    decryptedData = new Uint8Array(decryptedData);\n    let inputPos = 0;\n    for (let outputPos = 32; outputPos <= decodedData.length - 16; outputPos += 160, inputPos += 16) {\n      decodedData.set(decryptedData.subarray(inputPos, inputPos + 16), outputPos);\n    }\n    return decodedData;\n  }\n\n  decryptAvcSample(samples, sampleIndex, unitIndex, callback, curUnit, sync) {\n    let decodedData = this.discardEPB(curUnit.data);\n    let encryptedData = this.getAvcEncryptedData(decodedData);\n    let localthis = this;\n\n    this.decryptBuffer(encryptedData.buffer, function (decryptedData) {\n      curUnit.data = localthis.getAvcDecryptedUnit(decodedData, decryptedData);\n\n      if (!sync) {\n        localthis.decryptAvcSamples(samples, sampleIndex, unitIndex + 1, callback);\n      }\n    });\n  }\n\n  decryptAvcSamples(samples, sampleIndex, unitIndex, callback) {\n    for (;; sampleIndex++, unitIndex = 0) {\n      if (sampleIndex >= samples.length) {\n        callback();\n        return;\n      }\n\n      let curUnits = samples[sampleIndex].units;\n      for (;; unitIndex++) {\n        if (unitIndex >= curUnits.length) {\n          break;\n        }\n\n        let curUnit = curUnits[unitIndex];\n        if (curUnit.length <= 48 || (curUnit.type !== 1 && curUnit.type !== 5)) {\n          continue;\n        }\n\n        let sync = this.decrypter.isSync();\n\n        this.decryptAvcSample(samples, sampleIndex, unitIndex, callback, curUnit, sync);\n\n        if (!sync) {\n          return;\n        }\n      }\n    }\n  }\n }\n\n export default SampleAesDecrypter;\n\n\n\n// WEBPACK FOOTER //\n// ./src/demux/sample-aes.js","/**\n * highly optimized TS demuxer:\n * parse PAT, PMT\n * extract PES packet from audio and video PIDs\n * extract AVC/H264 NAL units and AAC/ADTS samples from PES packet\n * trigger the remuxer upon parsing completion\n * it also tries to workaround as best as it can audio codec switch (HE-AAC to AAC and vice versa), without having to restart the MediaSource.\n * it also controls the remuxing process :\n * upon discontinuity or level switch detection, it will also notifies the remuxer so that it can reset its state.\n*/\n\n import * as ADTS from './adts';\n import MpegAudio from './mpegaudio';\n import Event from '../events';\n import ExpGolomb from './exp-golomb';\n import SampleAesDecrypter from './sample-aes';\n// import Hex from '../utils/hex';\n import {logger} from '../utils/logger';\n import {ErrorTypes, ErrorDetails} from '../errors';\n\n class TSDemuxer {\n\n  constructor(observer, remuxer, config, typeSupported) {\n    this.observer = observer;\n    this.config = config;\n    this.typeSupported = typeSupported;\n    this.remuxer = remuxer;\n    this.sampleAes = null;\n  }\n\n  setDecryptData(decryptdata) {\n    if ((decryptdata != null) && (decryptdata.key != null) && (decryptdata.method === 'SAMPLE-AES')) {\n      this.sampleAes = new SampleAesDecrypter(this.observer, this.config, decryptdata, this.discardEPB);\n    } else {\n      this.sampleAes = null;\n    }\n  }\n\n  static probe(data) {\n    // a TS fragment should contain at least 3 TS packets, a PAT, a PMT, and one PID, each starting with 0x47\n    if (data.length >= 3*188 && data[0] === 0x47 && data[188] === 0x47 && data[2*188] === 0x47) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  resetInitSegment(initSegment,audioCodec,videoCodec, duration) {\n    this.pmtParsed = false;\n    this._pmtId = -1;\n    this._avcTrack = {container : 'video/mp2t', type: 'video', id :-1, inputTimeScale : 90000, sequenceNumber: 0, samples : [], len : 0, dropped : 0};\n    this._audioTrack = {container : 'video/mp2t', type: 'audio', id :-1, inputTimeScale : 90000, duration: duration, sequenceNumber: 0, samples : [], len : 0, isAAC: true};\n    this._id3Track = {type: 'id3', id :-1, inputTimeScale : 90000, sequenceNumber: 0, samples : [], len : 0};\n    this._txtTrack = {type: 'text', id: -1, inputTimeScale : 90000, sequenceNumber: 0, samples : [], len : 0};\n    // flush any partial content\n    this.aacOverFlow = null;\n    this.aacLastPTS = null;\n    this.avcSample = null;\n    this.audioCodec = audioCodec;\n    this.videoCodec = videoCodec;\n    this._duration = duration;\n  }\n\n  resetTimeStamp() {\n  }\n\n  // feed incoming data to the front of the parsing pipeline\n  append(data, timeOffset, contiguous,accurateTimeOffset) {\n    var start, len = data.length, stt, pid, atf, offset,pes,\n        unknownPIDs = false;\n    this.contiguous = contiguous;\n    var pmtParsed = this.pmtParsed,\n        avcTrack = this._avcTrack,\n        audioTrack = this._audioTrack,\n        id3Track = this._id3Track,\n        avcId = avcTrack.id,\n        audioId = audioTrack.id,\n        id3Id = id3Track.id,\n        pmtId = this._pmtId,\n        avcData = avcTrack.pesData,\n        audioData = audioTrack.pesData,\n        id3Data = id3Track.pesData,\n        parsePAT = this._parsePAT,\n        parsePMT = this._parsePMT,\n        parsePES = this._parsePES,\n        parseAVCPES = this._parseAVCPES.bind(this),\n        parseAACPES = this._parseAACPES.bind(this),\n        parseMPEGPES = this._parseMPEGPES.bind(this),\n        parseID3PES  = this._parseID3PES.bind(this);\n\n    // don't parse last TS packet if incomplete\n    len -= len % 188;\n    // loop through TS packets\n    for (start = 0; start < len; start += 188) {\n      if (data[start] === 0x47) {\n        stt = !!(data[start + 1] & 0x40);\n        // pid is a 13-bit field starting at the last bit of TS[1]\n        pid = ((data[start + 1] & 0x1f) << 8) + data[start + 2];\n        atf = (data[start + 3] & 0x30) >> 4;\n        // if an adaption field is present, its length is specified by the fifth byte of the TS packet header.\n        if (atf > 1) {\n          offset = start + 5 + data[start + 4];\n          // continue if there is only adaptation field\n          if (offset === (start + 188)) {\n            continue;\n          }\n        } else {\n          offset = start + 4;\n        }\n        switch(pid) {\n          case avcId:\n            if (stt) {\n              if (avcData && (pes = parsePES(avcData))) {\n                parseAVCPES(pes,false);\n              }\n              avcData = {data: [], size: 0};\n            }\n            if (avcData) {\n              avcData.data.push(data.subarray(offset, start + 188));\n              avcData.size += start + 188 - offset;\n            }\n            break;\n          case audioId:\n            if (stt) {\n              if (audioData && (pes = parsePES(audioData))) {\n                if (audioTrack.isAAC) {\n                  parseAACPES(pes);\n                } else {\n                  parseMPEGPES(pes);\n                }\n              }\n              audioData = {data: [], size: 0};\n            }\n            if (audioData) {\n              audioData.data.push(data.subarray(offset, start + 188));\n              audioData.size += start + 188 - offset;\n            }\n            break;\n          case id3Id:\n            if (stt) {\n              if (id3Data && (pes = parsePES(id3Data))) {\n                parseID3PES(pes);\n              }\n              id3Data = {data: [], size: 0};\n            }\n            if (id3Data) {\n              id3Data.data.push(data.subarray(offset, start + 188));\n              id3Data.size += start + 188 - offset;\n            }\n            break;\n          case 0:\n            if (stt) {\n              offset += data[offset] + 1;\n            }\n            pmtId = this._pmtId = parsePAT(data, offset);\n            break;\n          case pmtId:\n            if (stt) {\n              offset += data[offset] + 1;\n            }\n            let parsedPIDs = parsePMT(data, offset, this.typeSupported.mpeg === true || this.typeSupported.mp3 === true, this.sampleAes != null);\n\n            // only update track id if track PID found while parsing PMT\n            // this is to avoid resetting the PID to -1 in case\n            // track PID transiently disappears from the stream\n            // this could happen in case of transient missing audio samples for example\n            avcId = parsedPIDs.avc;\n            if (avcId > 0) {\n              avcTrack.id = avcId;\n            }\n            audioId = parsedPIDs.audio;\n            if (audioId > 0) {\n              audioTrack.id = audioId;\n              audioTrack.isAAC = parsedPIDs.isAAC;\n            }\n            id3Id = parsedPIDs.id3;\n            if (id3Id > 0) {\n              id3Track.id = id3Id;\n            }\n            if (unknownPIDs && !pmtParsed) {\n              logger.log('reparse from beginning');\n              unknownPIDs = false;\n              // we set it to -188, the += 188 in the for loop will reset start to 0\n              start = -188;\n            }\n            pmtParsed = this.pmtParsed = true;\n            break;\n          case 17:\n          case 0x1fff:\n            break;\n          default:\n            unknownPIDs = true;\n            break;\n        }\n      } else {\n        this.observer.trigger(Event.ERROR, {type : ErrorTypes.MEDIA_ERROR, details: ErrorDetails.FRAG_PARSING_ERROR, fatal: false, reason: 'TS packet did not start with 0x47'});\n      }\n    }\n    // try to parse last PES packets\n    if (avcData && (pes = parsePES(avcData))) {\n      parseAVCPES(pes,true);\n      avcTrack.pesData = null;\n    } else {\n      // either avcData null or PES truncated, keep it for next frag parsing\n      avcTrack.pesData = avcData;\n    }\n\n    if (audioData && (pes = parsePES(audioData))) {\n      if (audioTrack.isAAC) {\n        parseAACPES(pes);\n      } else {\n        parseMPEGPES(pes);\n      }\n      audioTrack.pesData = null;\n    } else {\n      if (audioData && audioData.size) {\n        logger.log('last AAC PES packet truncated,might overlap between fragments');\n      }\n     // either audioData null or PES truncated, keep it for next frag parsing\n      audioTrack.pesData = audioData;\n    }\n\n    if (id3Data && (pes = parsePES(id3Data))) {\n      parseID3PES(pes);\n      id3Track.pesData = null;\n    } else {\n      // either id3Data null or PES truncated, keep it for next frag parsing\n      id3Track.pesData = id3Data;\n    }\n\n    if (this.sampleAes == null) {\n      this.remuxer.remux(audioTrack, avcTrack, id3Track, this._txtTrack, timeOffset, contiguous, accurateTimeOffset);\n    } else {\n      this.decryptAndRemux(audioTrack, avcTrack, id3Track, this._txtTrack, timeOffset, contiguous, accurateTimeOffset);\n    }\n  }\n\n  decryptAndRemux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset) {\n    if (audioTrack.samples && audioTrack.isAAC) {\n      let localthis = this;\n      this.sampleAes.decryptAacSamples(audioTrack.samples, 0, function() {\n        localthis.decryptAndRemuxAvc(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset);\n      });\n    } else {\n      this.decryptAndRemuxAvc(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset);\n    }\n  }\n\n  decryptAndRemuxAvc(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset) {\n    if (videoTrack.samples) {\n      let localthis = this;\n      this.sampleAes.decryptAvcSamples(videoTrack.samples, 0, 0, function () {\n        localthis.remuxer.remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset);\n      });\n    } else {\n      this.remuxer.remux(audioTrack, videoTrack, id3Track, textTrack, timeOffset, contiguous, accurateTimeOffset);\n    }\n  }\n\n  destroy() {\n    this._initPTS = this._initDTS = undefined;\n    this._duration = 0;\n  }\n\n  _parsePAT(data, offset) {\n    // skip the PSI header and parse the first PMT entry\n    return (data[offset + 10] & 0x1F) << 8 | data[offset + 11];\n    //logger.log('PMT PID:'  + this._pmtId);\n  }\n\n  _parsePMT(data, offset, mpegSupported, isSampleAes) {\n    var sectionLength, tableEnd, programInfoLength, pid, result = { audio : -1, avc : -1, id3 : -1, isAAC : true};\n    sectionLength = (data[offset + 1] & 0x0f) << 8 | data[offset + 2];\n    tableEnd = offset + 3 + sectionLength - 4;\n    // to determine where the table is, we have to figure out how\n    // long the program info descriptors are\n    programInfoLength = (data[offset + 10] & 0x0f) << 8 | data[offset + 11];\n    // advance the offset to the first entry in the mapping table\n    offset += 12 + programInfoLength;\n    while (offset < tableEnd) {\n      pid = (data[offset + 1] & 0x1F) << 8 | data[offset + 2];\n      switch(data[offset]) {\n        case 0xcf:     // SAMPLE-AES AAC\n          if (!isSampleAes) {\n            logger.log('unkown stream type:'  + data[offset]);\n            break;\n          }\n          /* falls through */\n\n        // ISO/IEC 13818-7 ADTS AAC (MPEG-2 lower bit-rate audio)\n        case 0x0f:\n          //logger.log('AAC PID:'  + pid);\n          if (result.audio === -1) {\n            result.audio = pid;\n          }\n          break;\n\n        // Packetized metadata (ID3)\n        case 0x15:\n          //logger.log('ID3 PID:'  + pid);\n          if (result.id3 === -1) {\n            result.id3 = pid;\n          }\n          break;\n\n        case 0xdb:     // SAMPLE-AES AVC\n          if (!isSampleAes) {\n            logger.log('unkown stream type:'  + data[offset]);\n            break;\n          }\n          /* falls through */\n\n        // ITU-T Rec. H.264 and ISO/IEC 14496-10 (lower bit-rate video)\n        case 0x1b:\n          //logger.log('AVC PID:'  + pid);\n          if (result.avc === -1) {\n            result.avc = pid;\n          }\n          break;\n\n        // ISO/IEC 11172-3 (MPEG-1 audio)\n        // or ISO/IEC 13818-3 (MPEG-2 halved sample rate audio)\n        case 0x03:\n        case 0x04:\n          //logger.log('MPEG PID:'  + pid);\n          if (!mpegSupported) {\n            logger.log('MPEG audio found, not supported in this browser for now');\n          } else if (result.audio === -1) {\n            result.audio = pid;\n            result.isAAC = false;\n          }\n          break;\n\n        case 0x24:\n          logger.warn('HEVC stream type found, not supported for now');\n          break;\n\n        default:\n          logger.log('unkown stream type:'  + data[offset]);\n          break;\n      }\n      // move to the next table entry\n      // skip past the elementary stream descriptors, if present\n      offset += ((data[offset + 3] & 0x0F) << 8 | data[offset + 4]) + 5;\n    }\n    return result;\n  }\n\n  _parsePES(stream) {\n    var i = 0, frag, pesFlags, pesPrefix, pesLen, pesHdrLen, pesData, pesPts, pesDts, payloadStartOffset, data = stream.data;\n    // safety check\n    if (!stream || stream.size === 0) {\n      return null;\n    }\n\n    // we might need up to 19 bytes to read PES header\n    // if first chunk of data is less than 19 bytes, let's merge it with following ones until we get 19 bytes\n    // usually only one merge is needed (and this is rare ...)\n    while(data[0].length < 19 && data.length > 1) {\n      let newData = new Uint8Array(data[0].length + data[1].length);\n      newData.set(data[0]);\n      newData.set(data[1], data[0].length);\n      data[0] = newData;\n      data.splice(1,1);\n    }\n    //retrieve PTS/DTS from first fragment\n    frag = data[0];\n    pesPrefix = (frag[0] << 16) + (frag[1] << 8) + frag[2];\n    if (pesPrefix === 1) {\n      pesLen = (frag[4] << 8) + frag[5];\n      // if PES parsed length is not zero and greater than total received length, stop parsing. PES might be truncated\n      // minus 6 : PES header size\n      if (pesLen && pesLen > stream.size - 6) {\n        return null;\n      }\n      pesFlags = frag[7];\n      if (pesFlags & 0xC0) {\n        /* PES header described here : http://dvd.sourceforge.net/dvdinfo/pes-hdr.html\n            as PTS / DTS is 33 bit we cannot use bitwise operator in JS,\n            as Bitwise operators treat their operands as a sequence of 32 bits */\n        pesPts = (frag[9] & 0x0E) * 536870912 +// 1 << 29\n          (frag[10] & 0xFF) * 4194304 +// 1 << 22\n          (frag[11] & 0xFE) * 16384 +// 1 << 14\n          (frag[12] & 0xFF) * 128 +// 1 << 7\n          (frag[13] & 0xFE) / 2;\n          // check if greater than 2^32 -1\n          if (pesPts > 4294967295) {\n            // decrement 2^33\n            pesPts -= 8589934592;\n          }\n        if (pesFlags & 0x40) {\n          pesDts = (frag[14] & 0x0E ) * 536870912 +// 1 << 29\n            (frag[15] & 0xFF ) * 4194304 +// 1 << 22\n            (frag[16] & 0xFE ) * 16384 +// 1 << 14\n            (frag[17] & 0xFF ) * 128 +// 1 << 7\n            (frag[18] & 0xFE ) / 2;\n          // check if greater than 2^32 -1\n          if (pesDts > 4294967295) {\n            // decrement 2^33\n            pesDts -= 8589934592;\n          }\n          if (pesPts - pesDts > 60*90000) {\n            logger.warn(`${Math.round((pesPts - pesDts)/90000)}s delta between PTS and DTS, align them`);\n            pesPts = pesDts;\n          }\n        } else {\n          pesDts = pesPts;\n        }\n      }\n      pesHdrLen = frag[8];\n      // 9 bytes : 6 bytes for PES header + 3 bytes for PES extension\n      payloadStartOffset = pesHdrLen + 9;\n\n      stream.size -= payloadStartOffset;\n      //reassemble PES packet\n      pesData = new Uint8Array(stream.size);\n      for( let j = 0, dataLen = data.length; j < dataLen ; j++) {\n        frag = data[j];\n        let len = frag.byteLength;\n        if (payloadStartOffset) {\n          if (payloadStartOffset > len) {\n            // trim full frag if PES header bigger than frag\n            payloadStartOffset-=len;\n            continue;\n          } else {\n            // trim partial frag if PES header smaller than frag\n            frag = frag.subarray(payloadStartOffset);\n            len-=payloadStartOffset;\n            payloadStartOffset = 0;\n          }\n        }\n        pesData.set(frag, i);\n        i+=len;\n      }\n      if (pesLen) {\n        // payload size : remove PES header + PES extension\n        pesLen -= pesHdrLen+3;\n      }\n      return {data: pesData, pts: pesPts, dts: pesDts, len: pesLen};\n    } else {\n      return null;\n    }\n  }\n\n  pushAccesUnit(avcSample,avcTrack) {\n    if (avcSample.units.length && avcSample.frame) {\n      const samples = avcTrack.samples;\n      const nbSamples = samples.length;\n      // only push AVC sample if starting with a keyframe is not mandatory OR\n      //    if keyframe already found in this fragment OR\n      //       keyframe found in last fragment (track.sps) AND\n      //          samples already appended (we already found a keyframe in this fragment) OR fragment is contiguous\n      if (!this.config.forceKeyFrameOnDiscontinuity ||\n          avcSample.key === true ||\n          (avcTrack.sps && (nbSamples || this.contiguous))) {\n        avcSample.id = nbSamples;\n        samples.push(avcSample);\n      } else {\n        // dropped samples, track it\n        avcTrack.dropped++;\n      }\n    }\n    if(avcSample.debug.length) {\n      logger.log(avcSample.pts + '/' + avcSample.dts + ':' + avcSample.debug);\n    }\n  }\n\n  _parseAVCPES(pes,last) {\n    //logger.log('parse new PES');\n    var track = this._avcTrack,\n        units = this._parseAVCNALu(pes.data),\n        debug = false,\n        expGolombDecoder,\n        avcSample = this.avcSample,\n        push,\n        spsfound = false,\n        i,\n        pushAccesUnit = this.pushAccesUnit.bind(this),\n        createAVCSample = function(key,pts,dts,debug) {\n          return { key : key, pts : pts, dts : dts, units : [], debug : debug};\n        };\n    //free pes.data to save up some memory\n    pes.data = null;\n\n    // if new NAL units found and last sample still there, let's push ...\n    // this helps parsing streams with missing AUD\n    if (avcSample && units.length) {\n      pushAccesUnit(avcSample,track);\n      avcSample = this.avcSample = createAVCSample(false,pes.pts,pes.dts,'');\n    }\n\n    units.forEach(unit => {\n      switch(unit.type) {\n        //NDR\n         case 1:\n           push = true;\n           if(debug && avcSample) {\n            avcSample.debug += 'NDR ';\n           }\n           avcSample.frame = true;\n           let data = unit.data;\n           // only check slice type to detect KF in case SPS found in same packet (any keyframe is preceded by SPS ...)\n           if (spsfound && data.length > 4) {\n             // retrieve slice type by parsing beginning of NAL unit (follow H264 spec, slice_header definition) to detect keyframe embedded in NDR\n             let sliceType = new ExpGolomb(data).readSliceType();\n             // 2 : I slice, 4 : SI slice, 7 : I slice, 9: SI slice\n             // SI slice : A slice that is coded using intra prediction only and using quantisation of the prediction samples.\n             // An SI slice can be coded such that its decoded samples can be constructed identically to an SP slice.\n             // I slice: A slice that is not an SI slice that is decoded using intra prediction only.\n             //if (sliceType === 2 || sliceType === 7) {\n             if (sliceType === 2 || sliceType === 4 || sliceType === 7 || sliceType === 9) {\n                avcSample.key = true;\n             }\n           }\n           break;\n        //IDR\n        case 5:\n          push = true;\n          // handle PES not starting with AUD\n          if (!avcSample) {\n            avcSample = this.avcSample = createAVCSample(true,pes.pts,pes.dts,'');\n          }\n          if(debug) {\n            avcSample.debug += 'IDR ';\n          }\n          avcSample.key = true;\n          avcSample.frame = true;\n          break;\n        //SEI\n        case 6:\n          push = true;\n          if(debug && avcSample) {\n            avcSample.debug += 'SEI ';\n          }\n          expGolombDecoder = new ExpGolomb(this.discardEPB(unit.data));\n\n          // skip frameType\n          expGolombDecoder.readUByte();\n\n          var payloadType = 0;\n          var payloadSize = 0;\n          var endOfCaptions = false;\n          var b = 0;\n\n          while (!endOfCaptions && expGolombDecoder.bytesAvailable > 1) {\n            payloadType = 0;\n            do {\n                b = expGolombDecoder.readUByte();\n                payloadType += b;\n            } while (b === 0xFF);\n\n            // Parse payload size.\n            payloadSize = 0;\n            do {\n                b = expGolombDecoder.readUByte();\n                payloadSize += b;\n            } while (b === 0xFF);\n\n            // TODO: there can be more than one payload in an SEI packet...\n            // TODO: need to read type and size in a while loop to get them all\n            if (payloadType === 4 && expGolombDecoder.bytesAvailable !== 0) {\n\n              endOfCaptions = true;\n\n              var countryCode = expGolombDecoder.readUByte();\n\n              if (countryCode === 181) {\n                var providerCode = expGolombDecoder.readUShort();\n\n                if (providerCode === 49) {\n                  var userStructure = expGolombDecoder.readUInt();\n\n                  if (userStructure === 0x47413934) {\n                    var userDataType = expGolombDecoder.readUByte();\n\n                    // Raw CEA-608 bytes wrapped in CEA-708 packet\n                    if (userDataType === 3) {\n                      var firstByte = expGolombDecoder.readUByte();\n                      var secondByte = expGolombDecoder.readUByte();\n\n                      var totalCCs = 31 & firstByte;\n                      var byteArray = [firstByte, secondByte];\n\n                      for (i = 0; i < totalCCs; i++) {\n                        // 3 bytes per CC\n                        byteArray.push(expGolombDecoder.readUByte());\n                        byteArray.push(expGolombDecoder.readUByte());\n                        byteArray.push(expGolombDecoder.readUByte());\n                      }\n\n                      this._insertSampleInOrder(this._txtTrack.samples, { type: 3, pts: pes.pts, bytes: byteArray });\n                    }\n                  }\n                }\n              }\n            }\n            else if (payloadSize < expGolombDecoder.bytesAvailable)\n            {\n              for (i = 0; i<payloadSize; i++)\n              {\n                expGolombDecoder.readUByte();\n              }\n            }\n          }\n          break;\n        //SPS\n        case 7:\n          push = true;\n          spsfound = true;\n          if(debug && avcSample) {\n            avcSample.debug += 'SPS ';\n          }\n          if(!track.sps) {\n            expGolombDecoder = new ExpGolomb(unit.data);\n            var config = expGolombDecoder.readSPS();\n            track.width = config.width;\n            track.height = config.height;\n            track.pixelRatio = config.pixelRatio;\n            track.sps = [unit.data];\n            track.duration = this._duration;\n            var codecarray = unit.data.subarray(1, 4);\n            var codecstring = 'avc1.';\n            for (i = 0; i < 3; i++) {\n              var h = codecarray[i].toString(16);\n              if (h.length < 2) {\n                h = '0' + h;\n              }\n              codecstring += h;\n            }\n            track.codec = codecstring;\n          }\n          break;\n        //PPS\n        case 8:\n          push = true;\n          if(debug && avcSample) {\n            avcSample.debug += 'PPS ';\n          }\n          if (!track.pps) {\n            track.pps = [unit.data];\n          }\n          break;\n        // AUD\n        case 9:\n          push = false;\n          if (avcSample) {\n            pushAccesUnit(avcSample,track);\n          }\n          avcSample = this.avcSample = createAVCSample(false,pes.pts,pes.dts,debug ? 'AUD ': '');\n          break;\n        // Filler Data\n        case 12:\n          push = false;\n          break;\n        default:\n          push = false;\n          if (avcSample) {\n            avcSample.debug += 'unknown NAL ' + unit.type + ' ';\n          }\n          break;\n      }\n      if(avcSample && push) {\n        let units = avcSample.units;\n        units.push(unit);\n      }\n    });\n    // if last PES packet, push samples\n    if (last && avcSample) {\n      pushAccesUnit(avcSample,track);\n      this.avcSample = null;\n    }\n  }\n\n  _insertSampleInOrder(arr, data) {\n    var len = arr.length;\n    if (len > 0) {\n      if (data.pts >= arr[len-1].pts)\n      {\n        arr.push(data);\n      }\n      else {\n        for (var pos = len - 1; pos >= 0; pos--) {\n          if (data.pts < arr[pos].pts) {\n            arr.splice(pos, 0, data);\n            break;\n          }\n        }\n      }\n    }\n    else {\n      arr.push(data);\n    }\n  }\n\n  _getLastNalUnit() {\n    let avcSample = this.avcSample, lastUnit;\n    // try to fallback to previous sample if current one is empty\n    if (!avcSample || avcSample.units.length === 0) {\n      let track = this._avcTrack, samples = track.samples;\n      avcSample = samples[samples.length-1];\n    }\n    if (avcSample) {\n      let units = avcSample.units;\n      lastUnit = units[units.length - 1];\n    }\n    return lastUnit;\n  }\n\n  _parseAVCNALu(array) {\n    var i = 0, len = array.byteLength, value, overflow, track = this._avcTrack, state = track.naluState || 0, lastState = state;\n    var units = [], unit, unitType, lastUnitStart = -1, lastUnitType;\n    //logger.log('PES:' + Hex.hexDump(array));\n\n    if (state === -1) {\n    // special use case where we found 3 or 4-byte start codes exactly at the end of previous PES packet\n      lastUnitStart = 0;\n      // NALu type is value read from offset 0\n      lastUnitType = array[0] & 0x1f;\n      state = 0;\n      i = 1;\n    }\n\n    while (i < len) {\n      value = array[i++];\n      // optimization. state 0 and 1 are the predominant case. let's handle them outside of the switch/case\n      if (!state) {\n        state = value ? 0 : 1;\n        continue;\n      }\n      if (state === 1) {\n        state = value ? 0 : 2;\n        continue;\n      }\n      // here we have state either equal to 2 or 3\n      if(!value) {\n        state = 3;\n      } else if (value === 1) {\n        if (lastUnitStart >=0) {\n          unit = {data: array.subarray(lastUnitStart, i - state - 1), type: lastUnitType};\n          //logger.log('pushing NALU, type/size:' + unit.type + '/' + unit.data.byteLength);\n          units.push(unit);\n        } else {\n          // lastUnitStart is undefined => this is the first start code found in this PES packet\n          // first check if start code delimiter is overlapping between 2 PES packets,\n          // ie it started in last packet (lastState not zero)\n          // and ended at the beginning of this PES packet (i <= 4 - lastState)\n          let lastUnit = this._getLastNalUnit();\n          if (lastUnit) {\n            if(lastState &&  (i <= 4 - lastState)) {\n              // start delimiter overlapping between PES packets\n              // strip start delimiter bytes from the end of last NAL unit\n                // check if lastUnit had a state different from zero\n              if (lastUnit.state) {\n                // strip last bytes\n                lastUnit.data = lastUnit.data.subarray(0,lastUnit.data.byteLength - lastState);\n              }\n            }\n            // If NAL units are not starting right at the beginning of the PES packet, push preceding data into previous NAL unit.\n            overflow  = i - state - 1;\n            if (overflow > 0) {\n              //logger.log('first NALU found with overflow:' + overflow);\n              let tmp = new Uint8Array(lastUnit.data.byteLength + overflow);\n              tmp.set(lastUnit.data, 0);\n              tmp.set(array.subarray(0, overflow), lastUnit.data.byteLength);\n              lastUnit.data = tmp;\n            }\n          }\n        }\n        // check if we can read unit type\n        if (i < len) {\n          unitType = array[i] & 0x1f;\n          //logger.log('find NALU @ offset:' + i + ',type:' + unitType);\n          lastUnitStart = i;\n          lastUnitType = unitType;\n          state = 0;\n        } else {\n          // not enough byte to read unit type. let's read it on next PES parsing\n          state = -1;\n        }\n      } else {\n        state = 0;\n      }\n    }\n    if (lastUnitStart >=0 && state >=0) {\n      unit = {data: array.subarray(lastUnitStart, len), type: lastUnitType, state : state};\n      units.push(unit);\n      //logger.log('pushing NALU, type/size/state:' + unit.type + '/' + unit.data.byteLength + '/' + state);\n    }\n    // no NALu found\n    if (units.length === 0) {\n      // append pes.data to previous NAL unit\n      let  lastUnit = this._getLastNalUnit();\n      if (lastUnit) {\n        let tmp = new Uint8Array(lastUnit.data.byteLength + array.byteLength);\n        tmp.set(lastUnit.data, 0);\n        tmp.set(array, lastUnit.data.byteLength);\n        lastUnit.data = tmp;\n      }\n    }\n    track.naluState = state;\n    return units;\n  }\n\n  /**\n   * remove Emulation Prevention bytes from a RBSP\n   */\n  discardEPB(data) {\n    var length = data.byteLength,\n        EPBPositions = [],\n        i = 1,\n        newLength, newData;\n\n    // Find all `Emulation Prevention Bytes`\n    while (i < length - 2) {\n      if (data[i] === 0 &&\n          data[i + 1] === 0 &&\n          data[i + 2] === 0x03) {\n        EPBPositions.push(i + 2);\n        i += 2;\n      } else {\n        i++;\n      }\n    }\n\n    // If no Emulation Prevention Bytes were found just return the original\n    // array\n    if (EPBPositions.length === 0) {\n      return data;\n    }\n\n    // Create a new array to hold the NAL unit data\n    newLength = length - EPBPositions.length;\n    newData = new Uint8Array(newLength);\n    var sourceIndex = 0;\n\n    for (i = 0; i < newLength; sourceIndex++, i++) {\n      if (sourceIndex === EPBPositions[0]) {\n        // Skip this byte\n        sourceIndex++;\n        // Remove this position index\n        EPBPositions.shift();\n      }\n      newData[i] = data[sourceIndex];\n    }\n    return newData;\n  }\n\n  _parseAACPES(pes) {\n    var track = this._audioTrack,\n        data = pes.data,\n        pts = pes.pts,\n        startOffset = 0,\n        aacOverFlow = this.aacOverFlow,\n        aacLastPTS = this.aacLastPTS,\n        frameDuration, frameIndex, offset, stamp, len;\n    if (aacOverFlow) {\n      var tmp = new Uint8Array(aacOverFlow.byteLength + data.byteLength);\n      tmp.set(aacOverFlow, 0);\n      tmp.set(data, aacOverFlow.byteLength);\n      //logger.log(`AAC: append overflowing ${aacOverFlow.byteLength} bytes to beginning of new PES`);\n      data = tmp;\n    }\n    // look for ADTS header (0xFFFx)\n    for (offset = startOffset, len = data.length; offset < len - 1; offset++) {\n      if (ADTS.isHeader(data, offset)) {\n        break;\n      }\n    }\n    // if ADTS header does not start straight from the beginning of the PES payload, raise an error\n    if (offset) {\n      var reason, fatal;\n      if (offset < len - 1) {\n        reason = `AAC PES did not start with ADTS header,offset:${offset}`;\n        fatal = false;\n      } else {\n        reason = 'no ADTS header found in AAC PES';\n        fatal = true;\n      }\n      logger.warn(`parsing error:${reason}`);\n      this.observer.trigger(Event.ERROR, {type: ErrorTypes.MEDIA_ERROR, details: ErrorDetails.FRAG_PARSING_ERROR, fatal: fatal, reason: reason});\n      if (fatal) {\n        return;\n      }\n    }\n\n    ADTS.initTrackConfig(track, this.observer, data, offset, this.audioCodec);\n    frameIndex = 0;\n    frameDuration = ADTS.getFrameDuration(track.samplerate);\n\n    // if last AAC frame is overflowing, we should ensure timestamps are contiguous:\n    // first sample PTS should be equal to last sample PTS + frameDuration\n    if(aacOverFlow && aacLastPTS) {\n      var newPTS = aacLastPTS+frameDuration;\n      if(Math.abs(newPTS-pts) > 1) {\n        logger.log(`AAC: align PTS for overlapping frames by ${Math.round((newPTS-pts)/90)}`);\n        pts=newPTS;\n      }\n    }\n\n    //scan for aac samples\n    while (offset < len) {\n      if (ADTS.isHeader(data, offset) && (offset + 5) < len) {\n        var frame = ADTS.appendFrame(track, data, offset, pts, frameIndex);\n        if (frame) {\n          //logger.log(`${Math.round(frame.sample.pts)} : AAC`);\n          offset += frame.length;\n          stamp = frame.sample.pts;\n          frameIndex++;\n        } else {\n          //logger.log('Unable to parse AAC frame');\n          break;\n        }\n      } else {\n        //nothing found, keep looking\n        offset++;\n      }\n    }\n\n    if (offset < len) {\n      aacOverFlow = data.subarray(offset, len);\n      //logger.log(`AAC: overflow detected:${len-offset}`);\n    } else {\n      aacOverFlow = null;\n    }\n    this.aacOverFlow = aacOverFlow;\n    this.aacLastPTS = stamp;\n  }\n\n  _parseMPEGPES(pes) {\n    var data = pes.data;\n    var length = data.length;\n    var frameIndex = 0;\n    var offset = 0;\n    var pts = pes.pts;\n\n    while (offset < length) {\n      if (MpegAudio.isHeader(data, offset)) {\n        var frame = MpegAudio.appendFrame(this._audioTrack, data, offset, pts, frameIndex);\n        if (frame) {\n          offset += frame.length;\n          frameIndex++;\n        } else {\n          //logger.log('Unable to parse Mpeg audio frame');\n          break;\n        }\n      } else {\n        //nothing found, keep looking\n        offset++;\n      }\n    }\n  }\n\n  _parseID3PES(pes) {\n    this._id3Track.samples.push(pes);\n  }\n}\n\nexport default TSDemuxer;\n\n\n\n// WEBPACK FOOTER //\n// ./src/demux/tsdemuxer.js","/**\n * MP3 demuxer\n */\nimport ID3 from '../demux/id3';\nimport { logger } from '../utils/logger';\nimport MpegAudio from './mpegaudio';\n\nclass MP3Demuxer {\n\n  constructor(observer, remuxer, config) {\n    this.observer = observer;\n    this.config = config;\n    this.remuxer = remuxer;\n  }\n\n  resetInitSegment(initSegment, audioCodec, videoCodec, duration) {\n    this._audioTrack = { container: 'audio/mpeg', type: 'audio', id: -1, sequenceNumber: 0, isAAC: false, samples: [], len: 0, manifestCodec: audioCodec, duration: duration, inputTimeScale: 90000 };\n  }\n\n  resetTimeStamp() {\n  }\n\n  static probe(data) {\n    // check if data contains ID3 timestamp and MPEG sync word\n    var offset, length;\n    let id3Data = ID3.getID3Data(data, 0);\n    if (id3Data && ID3.getTimeStamp(id3Data) !== undefined) {\n      // Look for MPEG header | 1111 1111 | 111X XYZX | where X can be either 0 or 1 and Y or Z should be 1\n      // Layer bits (position 14 and 15) in header should be always different from 0 (Layer I or Layer II or Layer III)\n      // More info http://www.mp3-tech.org/programmer/frame_header.html\n      for (offset = id3Data.length, length = Math.min(data.length - 1, offset + 100); offset < length; offset++) {\n        if (MpegAudio.probe(data, offset)) {\n          logger.log('MPEG Audio sync word found !');\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  // feed incoming data to the front of the parsing pipeline\n  append(data, timeOffset, contiguous, accurateTimeOffset) {\n    let id3Data = ID3.getID3Data(data, 0);\n    let pts = 90 * ID3.getTimeStamp(id3Data);\n    var offset = id3Data.length;\n    var length = data.length;\n    var frameIndex = 0, stamp = 0;\n    var track = this._audioTrack;\n\n    let id3Samples = [{ pts: pts, dts: pts, data: id3Data }];\n\n    while (offset < length) {\n      if (MpegAudio.isHeader(data, offset)) {\n        var frame = MpegAudio.appendFrame(track, data, offset, pts, frameIndex);\n        if (frame) {\n          offset += frame.length;\n          stamp = frame.sample.pts;\n          frameIndex++;\n        } else {\n          //logger.log('Unable to parse Mpeg audio frame');\n          break;\n        }\n      } else if (ID3.isHeader(data, offset)) {\n        id3Data = ID3.getID3Data(data, offset);\n        id3Samples.push({ pts: stamp, dts: stamp, data: id3Data });\n        offset += id3Data.length;\n      } else {\n        //nothing found, keep looking\n        offset++;\n      }\n    }\n\n    this.remuxer.remux(track,\n      { samples: [] },\n      { samples: id3Samples, inputTimeScale: 90000 },\n      { samples: [] },\n      timeOffset,\n      contiguous,\n      accurateTimeOffset);\n  }\n\n  destroy() {\n  }\n}\n\nexport default MP3Demuxer;\n\n\n\n// WEBPACK FOOTER //\n// ./src/demux/mp3demuxer.js","/**\n *  AAC helper\n */\n\nclass AAC {\n  static getSilentFrame(codec,channelCount) {\n    switch(codec) {\n      case 'mp4a.40.2':\n        if (channelCount === 1) {\n          return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x23, 0x80]);\n        } else if (channelCount === 2) {\n          return new Uint8Array([0x21, 0x00, 0x49, 0x90, 0x02, 0x19, 0x00, 0x23, 0x80]);\n        } else if (channelCount === 3) {\n          return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x8e]);\n        } else if (channelCount === 4) {\n          return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x80, 0x2c, 0x80, 0x08, 0x02, 0x38]);\n        } else if (channelCount === 5) {\n          return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x38]);\n        } else if (channelCount === 6) {\n          return new Uint8Array([0x00, 0xc8, 0x00, 0x80, 0x20, 0x84, 0x01, 0x26, 0x40, 0x08, 0x64, 0x00, 0x82, 0x30, 0x04, 0x99, 0x00, 0x21, 0x90, 0x02, 0x00, 0xb2, 0x00, 0x20, 0x08, 0xe0]);\n        }\n        break;\n    // handle HE-AAC below (mp4a.40.5 / mp4a.40.29)\n      default:\n        if (channelCount === 1) {\n          // ffmpeg -y -f lavfi -i \"aevalsrc=0:d=0.05\" -c:a libfdk_aac -profile:a aac_he -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n          return new Uint8Array([0x1,0x40,0x22,0x80,0xa3,0x4e,0xe6,0x80,0xba,0x8,0x0,0x0,0x0,0x1c,0x6,0xf1,0xc1,0xa,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5e]);\n        } else if (channelCount === 2) {\n          // ffmpeg -y -f lavfi -i \"aevalsrc=0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n          return new Uint8Array([0x1,0x40,0x22,0x80,0xa3,0x5e,0xe6,0x80,0xba,0x8,0x0,0x0,0x0,0x0,0x95,0x0,0x6,0xf1,0xa1,0xa,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5e]);\n        } else if (channelCount === 3) {\n          // ffmpeg -y -f lavfi -i \"aevalsrc=0|0|0:d=0.05\" -c:a libfdk_aac -profile:a aac_he_v2 -b:a 4k output.aac && hexdump -v -e '16/1 \"0x%x,\" \"\\n\"' -v output.aac\n          return new Uint8Array([0x1,0x40,0x22,0x80,0xa3,0x5e,0xe6,0x80,0xba,0x8,0x0,0x0,0x0,0x0,0x95,0x0,0x6,0xf1,0xa1,0xa,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5a,0x5e]);\n        }\n        break;\n    }\n    return null;\n  }\n}\n\nexport default AAC;\n\n\n\n// WEBPACK FOOTER //\n// ./src/helper/aac.js","/**\n * Generate MP4 Box\n*/\n\n//import Hex from '../utils/hex';\n\nconst UINT32_MAX = Math.pow(2, 32) - 1;\n\nclass MP4 {\n  static init() {\n    MP4.types = {\n      avc1: [], // codingname\n      avcC: [],\n      btrt: [],\n      dinf: [],\n      dref: [],\n      esds: [],\n      ftyp: [],\n      hdlr: [],\n      mdat: [],\n      mdhd: [],\n      mdia: [],\n      mfhd: [],\n      minf: [],\n      moof: [],\n      moov: [],\n      mp4a: [],\n      '.mp3': [],\n      mvex: [],\n      mvhd: [],\n      pasp: [],\n      sdtp: [],\n      stbl: [],\n      stco: [],\n      stsc: [],\n      stsd: [],\n      stsz: [],\n      stts: [],\n      tfdt: [],\n      tfhd: [],\n      traf: [],\n      trak: [],\n      trun: [],\n      trex: [],\n      tkhd: [],\n      vmhd: [],\n      smhd: []\n    };\n\n    var i;\n    for (i in MP4.types) {\n      if (MP4.types.hasOwnProperty(i)) {\n        MP4.types[i] = [\n          i.charCodeAt(0),\n          i.charCodeAt(1),\n          i.charCodeAt(2),\n          i.charCodeAt(3)\n        ];\n      }\n    }\n\n    var videoHdlr = new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      0x76, 0x69, 0x64, 0x65, // handler_type: 'vide'\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x56, 0x69, 0x64, 0x65,\n      0x6f, 0x48, 0x61, 0x6e,\n      0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'VideoHandler'\n    ]);\n\n    var audioHdlr = new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00, // pre_defined\n      0x73, 0x6f, 0x75, 0x6e, // handler_type: 'soun'\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x53, 0x6f, 0x75, 0x6e,\n      0x64, 0x48, 0x61, 0x6e,\n      0x64, 0x6c, 0x65, 0x72, 0x00 // name: 'SoundHandler'\n    ]);\n\n    MP4.HDLR_TYPES = {\n      'video': videoHdlr,\n      'audio': audioHdlr\n    };\n\n    var dref = new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01, // entry_count\n      0x00, 0x00, 0x00, 0x0c, // entry_size\n      0x75, 0x72, 0x6c, 0x20, // 'url' type\n      0x00, // version 0\n      0x00, 0x00, 0x01 // entry_flags\n    ]);\n\n    var stco = new Uint8Array([\n      0x00, // version\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00 // entry_count\n    ]);\n\n    MP4.STTS = MP4.STSC = MP4.STCO = stco;\n\n    MP4.STSZ = new Uint8Array([\n      0x00, // version\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00, // sample_size\n      0x00, 0x00, 0x00, 0x00, // sample_count\n    ]);\n    MP4.VMHD = new Uint8Array([\n      0x00, // version\n      0x00, 0x00, 0x01, // flags\n      0x00, 0x00, // graphicsmode\n      0x00, 0x00,\n      0x00, 0x00,\n      0x00, 0x00 // opcolor\n    ]);\n    MP4.SMHD = new Uint8Array([\n      0x00, // version\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, // balance\n      0x00, 0x00 // reserved\n    ]);\n\n    MP4.STSD = new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x01]);// entry_count\n\n    var majorBrand = new Uint8Array([105,115,111,109]); // isom\n    var avc1Brand = new Uint8Array([97,118,99,49]); // avc1\n    var minorVersion = new Uint8Array([0, 0, 0, 1]);\n\n    MP4.FTYP = MP4.box(MP4.types.ftyp, majorBrand, minorVersion, majorBrand, avc1Brand);\n    MP4.DINF = MP4.box(MP4.types.dinf, MP4.box(MP4.types.dref, dref));\n  }\n\n  static box(type) {\n  var\n    payload = Array.prototype.slice.call(arguments, 1),\n    size = 8,\n    i = payload.length,\n    len = i,\n    result;\n    // calculate the total size we need to allocate\n    while (i--) {\n      size += payload[i].byteLength;\n    }\n    result = new Uint8Array(size);\n    result[0] = (size >> 24) & 0xff;\n    result[1] = (size >> 16) & 0xff;\n    result[2] = (size >> 8) & 0xff;\n    result[3] = size  & 0xff;\n    result.set(type, 4);\n    // copy the payload into the result\n    for (i = 0, size = 8; i < len; i++) {\n      // copy payload[i] array @ offset size\n      result.set(payload[i], size);\n      size += payload[i].byteLength;\n    }\n    return result;\n  }\n\n  static hdlr(type) {\n    return MP4.box(MP4.types.hdlr, MP4.HDLR_TYPES[type]);\n  }\n\n  static mdat(data) {\n    return MP4.box(MP4.types.mdat, data);\n  }\n\n  static mdhd(timescale, duration) {\n    duration *= timescale;\n    const upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n    const lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n    return MP4.box(MP4.types.mdhd, new Uint8Array([\n      0x01, // version 1\n      0x00, 0x00, 0x00, // flags\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // creation_time\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // modification_time\n      (timescale >> 24) & 0xFF,\n      (timescale >> 16) & 0xFF,\n      (timescale >>  8) & 0xFF,\n      timescale & 0xFF, // timescale\n      (upperWordDuration >> 24),\n      (upperWordDuration >> 16) & 0xFF,\n      (upperWordDuration >>  8) & 0xFF,\n      upperWordDuration & 0xFF,\n      (lowerWordDuration >> 24),\n      (lowerWordDuration >> 16) & 0xFF,\n      (lowerWordDuration >>  8) & 0xFF,\n      lowerWordDuration & 0xFF,\n      0x55, 0xc4, // 'und' language (undetermined)\n      0x00, 0x00\n    ]));\n  }\n\n  static mdia(track) {\n    return MP4.box(MP4.types.mdia, MP4.mdhd(track.timescale, track.duration), MP4.hdlr(track.type), MP4.minf(track));\n  }\n\n  static mfhd(sequenceNumber) {\n    return MP4.box(MP4.types.mfhd, new Uint8Array([\n      0x00,\n      0x00, 0x00, 0x00, // flags\n      (sequenceNumber >> 24),\n      (sequenceNumber >> 16) & 0xFF,\n      (sequenceNumber >>  8) & 0xFF,\n      sequenceNumber & 0xFF, // sequence_number\n    ]));\n  }\n\n  static minf(track) {\n    if (track.type === 'audio') {\n      return MP4.box(MP4.types.minf, MP4.box(MP4.types.smhd, MP4.SMHD), MP4.DINF, MP4.stbl(track));\n    } else {\n      return MP4.box(MP4.types.minf, MP4.box(MP4.types.vmhd, MP4.VMHD), MP4.DINF, MP4.stbl(track));\n    }\n  }\n\n  static moof(sn, baseMediaDecodeTime, track) {\n    return MP4.box(MP4.types.moof, MP4.mfhd(sn), MP4.traf(track,baseMediaDecodeTime));\n  }\n/**\n * @param tracks... (optional) {array} the tracks associated with this movie\n */\n  static moov(tracks) {\n    var\n      i = tracks.length,\n      boxes = [];\n\n    while (i--) {\n      boxes[i] = MP4.trak(tracks[i]);\n    }\n\n    return MP4.box.apply(null, [MP4.types.moov, MP4.mvhd(tracks[0].timescale, tracks[0].duration)].concat(boxes).concat(MP4.mvex(tracks)));\n  }\n\n  static mvex(tracks) {\n    var\n      i = tracks.length,\n      boxes = [];\n\n    while (i--) {\n      boxes[i] = MP4.trex(tracks[i]);\n    }\n    return MP4.box.apply(null, [MP4.types.mvex].concat(boxes));\n  }\n\n  static mvhd(timescale,duration) {\n    duration*=timescale;\n    const upperWordDuration = Math.floor(duration / (UINT32_MAX + 1));\n    const lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n    var\n      bytes = new Uint8Array([\n        0x01, // version 1\n        0x00, 0x00, 0x00, // flags\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // creation_time\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // modification_time\n        (timescale >> 24) & 0xFF,\n        (timescale >> 16) & 0xFF,\n        (timescale >>  8) & 0xFF,\n        timescale & 0xFF, // timescale\n        (upperWordDuration >> 24),\n        (upperWordDuration >> 16) & 0xFF,\n        (upperWordDuration >>  8) & 0xFF,\n        upperWordDuration & 0xFF,\n        (lowerWordDuration >> 24),\n        (lowerWordDuration >> 16) & 0xFF,\n        (lowerWordDuration >>  8) & 0xFF,\n        lowerWordDuration & 0xFF,\n        0x00, 0x01, 0x00, 0x00, // 1.0 rate\n        0x01, 0x00, // 1.0 volume\n        0x00, 0x00, // reserved\n        0x00, 0x00, 0x00, 0x00, // reserved\n        0x00, 0x00, 0x00, 0x00, // reserved\n        0x00, 0x01, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x01, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, // pre_defined\n        0xff, 0xff, 0xff, 0xff // next_track_ID\n      ]);\n    return MP4.box(MP4.types.mvhd, bytes);\n  }\n\n  static sdtp(track) {\n    var\n      samples = track.samples || [],\n      bytes = new Uint8Array(4 + samples.length),\n      flags,\n      i;\n    // leave the full box header (4 bytes) all zero\n    // write the sample table\n    for (i = 0; i < samples.length; i++) {\n      flags = samples[i].flags;\n      bytes[i + 4] = (flags.dependsOn << 4) |\n        (flags.isDependedOn << 2) |\n        (flags.hasRedundancy);\n    }\n\n    return MP4.box(MP4.types.sdtp, bytes);\n  }\n\n  static stbl(track) {\n    return MP4.box(MP4.types.stbl, MP4.stsd(track), MP4.box(MP4.types.stts, MP4.STTS), MP4.box(MP4.types.stsc, MP4.STSC), MP4.box(MP4.types.stsz, MP4.STSZ), MP4.box(MP4.types.stco, MP4.STCO));\n  }\n\n  static avc1(track) {\n    var sps = [], pps = [], i, data, len;\n    // assemble the SPSs\n\n    for (i = 0; i < track.sps.length; i++) {\n      data = track.sps[i];\n      len = data.byteLength;\n      sps.push((len >>> 8) & 0xFF);\n      sps.push((len & 0xFF));\n      sps = sps.concat(Array.prototype.slice.call(data)); // SPS\n    }\n\n    // assemble the PPSs\n    for (i = 0; i < track.pps.length; i++) {\n      data = track.pps[i];\n      len = data.byteLength;\n      pps.push((len >>> 8) & 0xFF);\n      pps.push((len & 0xFF));\n      pps = pps.concat(Array.prototype.slice.call(data));\n    }\n\n    var avcc = MP4.box(MP4.types.avcC, new Uint8Array([\n            0x01,   // version\n            sps[3], // profile\n            sps[4], // profile compat\n            sps[5], // level\n            0xfc | 3, // lengthSizeMinusOne, hard-coded to 4 bytes\n            0xE0 | track.sps.length // 3bit reserved (111) + numOfSequenceParameterSets\n          ].concat(sps).concat([\n            track.pps.length // numOfPictureParameterSets\n          ]).concat(pps))), // \"PPS\"\n        width = track.width,\n        height = track.height,\n        hSpacing = track.pixelRatio[0],\n        vSpacing = track.pixelRatio[1];\n    //console.log('avcc:' + Hex.hexDump(avcc));\n    return MP4.box(MP4.types.avc1, new Uint8Array([\n        0x00, 0x00, 0x00, // reserved\n        0x00, 0x00, 0x00, // reserved\n        0x00, 0x01, // data_reference_index\n        0x00, 0x00, // pre_defined\n        0x00, 0x00, // reserved\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, // pre_defined\n        (width >> 8) & 0xFF,\n        width & 0xff, // width\n        (height >> 8) & 0xFF,\n        height & 0xff, // height\n        0x00, 0x48, 0x00, 0x00, // horizresolution\n        0x00, 0x48, 0x00, 0x00, // vertresolution\n        0x00, 0x00, 0x00, 0x00, // reserved\n        0x00, 0x01, // frame_count\n        0x12,\n        0x64, 0x61, 0x69, 0x6C, //dailymotion/hls.js\n        0x79, 0x6D, 0x6F, 0x74,\n        0x69, 0x6F, 0x6E, 0x2F,\n        0x68, 0x6C, 0x73, 0x2E,\n        0x6A, 0x73, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, // compressorname\n        0x00, 0x18,   // depth = 24\n        0x11, 0x11]), // pre_defined = -1\n          avcc,\n          MP4.box(MP4.types.btrt, new Uint8Array([\n            0x00, 0x1c, 0x9c, 0x80, // bufferSizeDB\n            0x00, 0x2d, 0xc6, 0xc0, // maxBitrate\n            0x00, 0x2d, 0xc6, 0xc0])), // avgBitrate\n          MP4.box(MP4.types.pasp, new Uint8Array([\n            (hSpacing >> 24),         // hSpacing\n            (hSpacing >> 16) & 0xFF,\n            (hSpacing >>  8) & 0xFF,\n            hSpacing & 0xFF,\n            (vSpacing >> 24),         // vSpacing\n            (vSpacing >> 16) & 0xFF,\n            (vSpacing >>  8) & 0xFF,\n            vSpacing & 0xFF]))\n          );\n  }\n\n  static esds(track) {\n    var configlen = track.config.length;\n    return new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n\n      0x03, // descriptor_type\n      0x17+configlen, // length\n      0x00, 0x01, //es_id\n      0x00, // stream_priority\n\n      0x04, // descriptor_type\n      0x0f+configlen, // length\n      0x40, //codec : mpeg4_audio\n      0x15, // stream_type\n      0x00, 0x00, 0x00, // buffer_size\n      0x00, 0x00, 0x00, 0x00, // maxBitrate\n      0x00, 0x00, 0x00, 0x00, // avgBitrate\n\n      0x05 // descriptor_type\n      ].concat([configlen]).concat(track.config).concat([0x06, 0x01, 0x02])); // GASpecificConfig)); // length + audio config descriptor\n  }\n\n  static mp4a(track) {\n    var samplerate = track.samplerate;\n      return MP4.box(MP4.types.mp4a, new Uint8Array([\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, track.channelCount, // channelcount\n      0x00, 0x10, // sampleSize:16bits\n      0x00, 0x00, 0x00, 0x00, // reserved2\n      (samplerate >> 8) & 0xFF,\n      samplerate & 0xff, //\n      0x00, 0x00]),\n      MP4.box(MP4.types.esds, MP4.esds(track)));\n  }\n\n  static mp3(track) {\n    var samplerate = track.samplerate;\n      return MP4.box(MP4.types['.mp3'], new Uint8Array([\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, 0x00, // reserved\n      0x00, 0x01, // data_reference_index\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, track.channelCount, // channelcount\n      0x00, 0x10, // sampleSize:16bits\n      0x00, 0x00, 0x00, 0x00, // reserved2\n      (samplerate >> 8) & 0xFF,\n      samplerate & 0xff, //\n      0x00, 0x00]));\n  }\n\n  static stsd(track) {\n    if (track.type === 'audio') {\n      if (!track.isAAC && track.codec === 'mp3') {\n        return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp3(track));\n      }\n      return MP4.box(MP4.types.stsd, MP4.STSD, MP4.mp4a(track));\n    } else {\n      return MP4.box(MP4.types.stsd, MP4.STSD, MP4.avc1(track));\n    }\n  }\n\n  static tkhd(track) {\n    var id = track.id,\n        duration = track.duration*track.timescale,\n        width = track.width,\n        height = track.height,\n        upperWordDuration = Math.floor(duration / (UINT32_MAX + 1)),\n        lowerWordDuration = Math.floor(duration % (UINT32_MAX + 1));\n    return MP4.box(MP4.types.tkhd, new Uint8Array([\n      0x01, // version 1\n      0x00, 0x00, 0x07, // flags\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // creation_time\n      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // modification_time\n      (id >> 24) & 0xFF,\n      (id >> 16) & 0xFF,\n      (id >> 8) & 0xFF,\n      id & 0xFF, // track_ID\n      0x00, 0x00, 0x00, 0x00, // reserved\n      (upperWordDuration >> 24),\n      (upperWordDuration >> 16) & 0xFF,\n      (upperWordDuration >>  8) & 0xFF,\n      upperWordDuration & 0xFF,\n      (lowerWordDuration >> 24),\n      (lowerWordDuration >> 16) & 0xFF,\n      (lowerWordDuration >>  8) & 0xFF,\n      lowerWordDuration & 0xFF,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00, // reserved\n      0x00, 0x00, // layer\n      0x00, 0x00, // alternate_group\n      0x00, 0x00, // non-audio track volume\n      0x00, 0x00, // reserved\n      0x00, 0x01, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x01, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x00, 0x00, 0x00, 0x00,\n      0x40, 0x00, 0x00, 0x00, // transformation: unity matrix\n      (width >> 8) & 0xFF,\n      width & 0xFF,\n      0x00, 0x00, // width\n      (height >> 8) & 0xFF,\n      height & 0xFF,\n      0x00, 0x00 // height\n    ]));\n  }\n\n  static traf(track,baseMediaDecodeTime) {\n    var sampleDependencyTable = MP4.sdtp(track),\n        id = track.id,\n        upperWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime / (UINT32_MAX + 1)),\n        lowerWordBaseMediaDecodeTime = Math.floor(baseMediaDecodeTime % (UINT32_MAX + 1));\n    return MP4.box(MP4.types.traf,\n               MP4.box(MP4.types.tfhd, new Uint8Array([\n                 0x00, // version 0\n                 0x00, 0x00, 0x00, // flags\n                 (id >> 24),\n                 (id >> 16) & 0XFF,\n                 (id >> 8) & 0XFF,\n                 (id & 0xFF) // track_ID\n               ])),\n               MP4.box(MP4.types.tfdt, new Uint8Array([\n                 0x01, // version 1\n                 0x00, 0x00, 0x00, // flags\n                 (upperWordBaseMediaDecodeTime >>24),\n                 (upperWordBaseMediaDecodeTime >> 16) & 0XFF,\n                 (upperWordBaseMediaDecodeTime >> 8) & 0XFF,\n                 (upperWordBaseMediaDecodeTime & 0xFF),\n                 (lowerWordBaseMediaDecodeTime >>24),\n                 (lowerWordBaseMediaDecodeTime >> 16) & 0XFF,\n                 (lowerWordBaseMediaDecodeTime >> 8) & 0XFF,\n                 (lowerWordBaseMediaDecodeTime & 0xFF)\n               ])),\n               MP4.trun(track,\n                    sampleDependencyTable.length +\n                    16 + // tfhd\n                    20 + // tfdt\n                    8 +  // traf header\n                    16 + // mfhd\n                    8 +  // moof header\n                    8),  // mdat header\n               sampleDependencyTable);\n  }\n\n  /**\n   * Generate a track box.\n   * @param track {object} a track definition\n   * @return {Uint8Array} the track box\n   */\n  static trak(track) {\n    track.duration = track.duration || 0xffffffff;\n    return MP4.box(MP4.types.trak, MP4.tkhd(track), MP4.mdia(track));\n  }\n\n  static trex(track) {\n    var id = track.id;\n    return MP4.box(MP4.types.trex, new Uint8Array([\n      0x00, // version 0\n      0x00, 0x00, 0x00, // flags\n     (id >> 24),\n     (id >> 16) & 0XFF,\n     (id >> 8) & 0XFF,\n     (id & 0xFF), // track_ID\n      0x00, 0x00, 0x00, 0x01, // default_sample_description_index\n      0x00, 0x00, 0x00, 0x00, // default_sample_duration\n      0x00, 0x00, 0x00, 0x00, // default_sample_size\n      0x00, 0x01, 0x00, 0x01 // default_sample_flags\n    ]));\n  }\n\n  static trun(track, offset) {\n    var samples= track.samples || [],\n        len = samples.length,\n        arraylen = 12 + (16 * len),\n        array = new Uint8Array(arraylen),\n        i,sample,duration,size,flags,cts;\n    offset += 8 + arraylen;\n    array.set([\n      0x00, // version 0\n      0x00, 0x0f, 0x01, // flags\n      (len >>> 24) & 0xFF,\n      (len >>> 16) & 0xFF,\n      (len >>> 8) & 0xFF,\n      len & 0xFF, // sample_count\n      (offset >>> 24) & 0xFF,\n      (offset >>> 16) & 0xFF,\n      (offset >>> 8) & 0xFF,\n      offset & 0xFF // data_offset\n    ],0);\n    for (i = 0; i < len; i++) {\n      sample = samples[i];\n      duration = sample.duration;\n      size = sample.size;\n      flags = sample.flags;\n      cts = sample.cts;\n      array.set([\n        (duration >>> 24) & 0xFF,\n        (duration >>> 16) & 0xFF,\n        (duration >>> 8) & 0xFF,\n        duration & 0xFF, // sample_duration\n        (size >>> 24) & 0xFF,\n        (size >>> 16) & 0xFF,\n        (size >>> 8) & 0xFF,\n        size & 0xFF, // sample_size\n        (flags.isLeading << 2) | flags.dependsOn,\n        (flags.isDependedOn << 6) |\n          (flags.hasRedundancy << 4) |\n          (flags.paddingValue << 1) |\n          flags.isNonSync,\n        flags.degradPrio & 0xF0 << 8,\n        flags.degradPrio & 0x0F, // sample_flags\n        (cts >>> 24) & 0xFF,\n        (cts >>> 16) & 0xFF,\n        (cts >>> 8) & 0xFF,\n        cts & 0xFF // sample_composition_time_offset\n      ],12+16*i);\n    }\n    return MP4.box(MP4.types.trun, array);\n  }\n\n  static initSegment(tracks) {\n    if (!MP4.types) {\n      MP4.init();\n    }\n    var movie = MP4.moov(tracks), result;\n    result = new Uint8Array(MP4.FTYP.byteLength + movie.byteLength);\n    result.set(MP4.FTYP);\n    result.set(movie, MP4.FTYP.byteLength);\n    return result;\n  }\n}\n\nexport default MP4;\n\n\n\n// WEBPACK FOOTER //\n// ./src/remux/mp4-generator.js"," /**\n * fMP4 remuxer\n*/\n\n\nimport AAC from '../helper/aac';\nimport Event from '../events';\nimport {logger} from '../utils/logger';\nimport MP4 from '../remux/mp4-generator';\nimport {ErrorTypes, ErrorDetails} from '../errors';\n\n// 10 seconds\nconst MAX_SILENT_FRAME_DURATION = 10 * 1000;\n\nclass MP4Remuxer {\n  constructor(observer, config, typeSupported, vendor) {\n    this.observer = observer;\n    this.config = config;\n    this.typeSupported = typeSupported;\n    const userAgent = navigator.userAgent;\n    this.isSafari = vendor && vendor.indexOf('Apple') > -1 && userAgent && !userAgent.match('CriOS');\n    this.ISGenerated = false;\n  }\n\n  destroy() {\n  }\n\n  resetTimeStamp(defaultTimeStamp) {\n    this._initPTS = this._initDTS = defaultTimeStamp;\n  }\n\n  resetInitSegment() {\n    this.ISGenerated = false;\n  }\n\n  remux(audioTrack,videoTrack,id3Track,textTrack,timeOffset, contiguous,accurateTimeOffset) {\n    // generate Init Segment if needed\n    if (!this.ISGenerated) {\n      this.generateIS(audioTrack,videoTrack,timeOffset);\n    } else {\n      if (accurateTimeOffset) {\n        // check timestamp consistency. it there is more than 10s gap between expected PTS/DTS, recompute initPTS/DTS\n        const refPTS = this._initPTS;\n        const ptsNormalize = this._PTSNormalize;\n        const timeScale = audioTrack.inputTimeScale || videoTrack.inputTimeScale;\n        let initPTS = Infinity, initDTS = Infinity;\n        let samples = audioTrack.samples;\n        if (samples.length) {\n           initPTS = initDTS = ptsNormalize(samples[0].pts - timeScale * timeOffset, refPTS);\n        }\n        samples = videoTrack.samples;\n        if (samples.length) {\n          let sample = samples[0];\n           initPTS = Math.min(initPTS,ptsNormalize(sample.pts - timeScale * timeOffset, refPTS));\n           initDTS = Math.min(initDTS,ptsNormalize(sample.dts - timeScale * timeOffset, refPTS));\n        }\n        if (initPTS !== Infinity) {\n          const initPTSDelta = refPTS - initPTS;\n          if (Math.abs(initPTSDelta) > 10 * timeScale) {\n            logger.warn(`timestamp inconsistency, ${(initPTSDelta/timeScale).toFixed(3)}s delta against expected value: missing discontinuity ? reset initPTS/initDTS`);\n            this._initPTS = initPTS;\n            this._initDTS = initDTS;\n            this.observer.trigger(Event.INIT_PTS_FOUND, { initPTS: initPTS});\n          }\n        }\n      }\n    }\n\n    if (this.ISGenerated) {\n      // Purposefully remuxing audio before video, so that remuxVideo can use nextAudioPts, which is\n      // calculated in remuxAudio.\n      //logger.log('nb AAC samples:' + audioTrack.samples.length);\n      if (audioTrack.samples.length) {\n        // if initSegment was generated without video samples, regenerate it again\n        if (!audioTrack.timescale) {\n          logger.warn('regenerate InitSegment as audio detected');\n          this.generateIS(audioTrack,videoTrack,timeOffset);\n        }\n        let audioData = this.remuxAudio(audioTrack,timeOffset,contiguous,accurateTimeOffset);\n        //logger.log('nb AVC samples:' + videoTrack.samples.length);\n        if (videoTrack.samples.length) {\n          let audioTrackLength;\n          if (audioData) {\n            audioTrackLength = audioData.endPTS - audioData.startPTS;\n          }\n          // if initSegment was generated without video samples, regenerate it again\n          if (!videoTrack.timescale) {\n            logger.warn('regenerate InitSegment as video detected');\n            this.generateIS(audioTrack,videoTrack,timeOffset);\n          }\n          this.remuxVideo(videoTrack,timeOffset,contiguous,audioTrackLength, accurateTimeOffset);\n        }\n      } else {\n        let videoData;\n        //logger.log('nb AVC samples:' + videoTrack.samples.length);\n        if (videoTrack.samples.length) {\n          videoData = this.remuxVideo(videoTrack,timeOffset,contiguous, accurateTimeOffset);\n        }\n        if (videoData && audioTrack.codec) {\n          this.remuxEmptyAudio(audioTrack, timeOffset, contiguous, videoData);\n        }\n      }\n    }\n    //logger.log('nb ID3 samples:' + audioTrack.samples.length);\n    if (id3Track.samples.length) {\n      this.remuxID3(id3Track,timeOffset);\n    }\n    //logger.log('nb ID3 samples:' + audioTrack.samples.length);\n    if (textTrack.samples.length) {\n      this.remuxText(textTrack,timeOffset);\n    }\n    //notify end of parsing\n    this.observer.trigger(Event.FRAG_PARSED);\n  }\n\n  generateIS(audioTrack,videoTrack,timeOffset) {\n    var observer = this.observer,\n        audioSamples = audioTrack.samples,\n        videoSamples = videoTrack.samples,\n        typeSupported = this.typeSupported,\n        container = 'audio/mp4',\n        tracks = {},\n        data = { tracks : tracks },\n        computePTSDTS = (this._initPTS === undefined),\n        initPTS, initDTS;\n\n    if (computePTSDTS) {\n      initPTS = initDTS = Infinity;\n    }\n    if (audioTrack.config && audioSamples.length) {\n      // let's use audio sampling rate as MP4 time scale.\n      // rationale is that there is a integer nb of audio frames per audio sample (1024 for AAC)\n      // using audio sampling rate here helps having an integer MP4 frame duration\n      // this avoids potential rounding issue and AV sync issue\n      audioTrack.timescale = audioTrack.samplerate;\n      logger.log (`audio sampling rate : ${audioTrack.samplerate}`);\n      if (!audioTrack.isAAC) {\n        if (typeSupported.mpeg) { // Chrome and Safari\n          container = 'audio/mpeg';\n          audioTrack.codec = '';\n        } else if (typeSupported.mp3) { // Firefox\n          audioTrack.codec = 'mp3';\n        }\n      }\n      tracks.audio = {\n        container : container,\n        codec :  audioTrack.codec,\n        initSegment : !audioTrack.isAAC && typeSupported.mpeg ? new Uint8Array() : MP4.initSegment([audioTrack]),\n        metadata : {\n          channelCount : audioTrack.channelCount\n        }\n      };\n      if (computePTSDTS) {\n        // remember first PTS of this demuxing context. for audio, PTS = DTS\n        initPTS = initDTS = audioSamples[0].pts - audioTrack.inputTimeScale * timeOffset;\n      }\n    }\n\n    if (videoTrack.sps && videoTrack.pps && videoSamples.length) {\n      // let's use input time scale as MP4 video timescale\n      // we use input time scale straight away to avoid rounding issues on frame duration / cts computation\n      const inputTimeScale = videoTrack.inputTimeScale;\n      videoTrack.timescale = inputTimeScale;\n      tracks.video = {\n        container : 'video/mp4',\n        codec :  videoTrack.codec,\n        initSegment : MP4.initSegment([videoTrack]),\n        metadata : {\n          width : videoTrack.width,\n          height : videoTrack.height\n        }\n      };\n      if (computePTSDTS) {\n        initPTS = Math.min(initPTS,videoSamples[0].pts - inputTimeScale * timeOffset);\n        initDTS = Math.min(initDTS,videoSamples[0].dts - inputTimeScale * timeOffset);\n        this.observer.trigger(Event.INIT_PTS_FOUND, { initPTS: initPTS});\n      }\n    }\n\n    if(Object.keys(tracks).length) {\n      observer.trigger(Event.FRAG_PARSING_INIT_SEGMENT,data);\n      this.ISGenerated = true;\n      if (computePTSDTS) {\n        this._initPTS = initPTS;\n        this._initDTS = initDTS;\n      }\n    } else {\n      observer.trigger(Event.ERROR, {type : ErrorTypes.MEDIA_ERROR, details: ErrorDetails.FRAG_PARSING_ERROR, fatal: false, reason: 'no audio/video samples found'});\n    }\n  }\n\n  remuxVideo(track, timeOffset, contiguous, audioTrackLength, accurateTimeOffset) {\n    var offset = 8,\n        timeScale = track.timescale,\n        mp4SampleDuration,\n        mdat, moof,\n        firstPTS, firstDTS,\n        nextDTS,\n        lastPTS, lastDTS,\n        inputSamples = track.samples,\n        outputSamples = [],\n        nbSamples = inputSamples.length,\n        ptsNormalize = this._PTSNormalize,\n        initDTS = this._initDTS;\n\n  // for (let i = 0; i < track.samples.length; i++) {\n  //   let avcSample = track.samples[i];\n  //   let units = avcSample.units;\n  //   let unitsString = '';\n  //   for (let j = 0; j < units.length ; j++) {\n  //     unitsString += units[j].type + ',';\n  //     if (units[j].data.length < 500) {\n  //       unitsString += Hex.hexDump(units[j].data);\n  //     }\n  //   }\n  //   logger.log(avcSample.pts + '/' + avcSample.dts + ',' + unitsString + avcSample.units.length);\n  // }\n\n    // if parsed fragment is contiguous with last one, let's use last DTS value as reference\n    let nextAvcDts = this.nextAvcDts;\n\n    const isSafari = this.isSafari;\n\n    // Safari does not like overlapping DTS on consecutive fragments. let's use nextAvcDts to overcome this if fragments are consecutive\n    if (isSafari) {\n      // also consider consecutive fragments as being contiguous (even if a level switch occurs),\n      // for sake of clarity:\n      // consecutive fragments are frags with\n      //  - less than 100ms gaps between new time offset (if accurate) and next expected PTS OR\n      //  - less than 200 ms PTS gaps (timeScale/5)\n      contiguous |= (inputSamples.length && nextAvcDts &&\n                     ((accurateTimeOffset && Math.abs(timeOffset-nextAvcDts/timeScale) < 0.1) ||\n                      Math.abs((inputSamples[0].pts-nextAvcDts-initDTS)) < timeScale/5)\n                      );\n    }\n\n    if (!contiguous) {\n      // if not contiguous, let's use target timeOffset\n      nextAvcDts = timeOffset*timeScale;\n    }\n\n  // PTS is coded on 33bits, and can loop from -2^32 to 2^32\n  // ptsNormalize will make PTS/DTS value monotonic, we use last known DTS value as reference value\n    inputSamples.forEach(function(sample) {\n      sample.pts = ptsNormalize(sample.pts-initDTS, nextAvcDts);\n      sample.dts = ptsNormalize(sample.dts-initDTS, nextAvcDts);\n    });\n\n    // sort video samples by DTS then PTS then demux id order\n    inputSamples.sort(function(a, b) {\n      const deltadts = a.dts - b.dts;\n      const deltapts = a.pts - b.pts;\n      return deltadts ? deltadts : deltapts ? deltapts : (a.id - b.id);\n    });\n\n    // handle broken streams with PTS < DTS, tolerance up 200ms (18000 in 90kHz timescale)\n    let PTSDTSshift = inputSamples.reduce( (prev, curr) => Math.max(Math.min(prev,curr.pts-curr.dts),-18000),0);\n    if (PTSDTSshift < 0) {\n      logger.warn(`PTS < DTS detected in video samples, shifting DTS by ${Math.round(PTSDTSshift/90)} ms to overcome this issue`);\n      for (let i = 0; i < inputSamples.length; i++) {\n        inputSamples[i].dts += PTSDTSshift;\n      }\n    }\n\n    // compute first DTS and last DTS, normalize them against reference value\n    let sample = inputSamples[0];\n    firstDTS =  Math.max(sample.dts,0);\n    firstPTS =  Math.max(sample.pts,0);\n\n    // check timestamp continuity accross consecutive fragments (this is to remove inter-fragment gap/hole)\n    let delta = Math.round((firstDTS - nextAvcDts) / 90);\n    // if fragment are contiguous, detect hole/overlapping between fragments\n    if (contiguous) {\n      if (delta) {\n        if (delta > 1) {\n          logger.log(`AVC:${delta} ms hole between fragments detected,filling it`);\n        } else if (delta < -1) {\n          logger.log(`AVC:${(-delta)} ms overlapping between fragments detected`);\n        }\n        // remove hole/gap : set DTS to next expected DTS\n        firstDTS = nextAvcDts;\n        inputSamples[0].dts = firstDTS;\n        // offset PTS as well, ensure that PTS is smaller or equal than new DTS\n        firstPTS = Math.max(firstPTS - delta, nextAvcDts);\n        inputSamples[0].pts = firstPTS;\n        logger.log(`Video/PTS/DTS adjusted: ${Math.round(firstPTS/90)}/${Math.round(firstDTS/90)},delta:${delta} ms`);\n      }\n    }\n    nextDTS = firstDTS;\n\n    // compute lastPTS/lastDTS\n    sample = inputSamples[inputSamples.length-1];\n    lastDTS =  Math.max(sample.dts,0);\n    lastPTS =  Math.max(sample.pts,0,lastDTS);\n\n      // on Safari let's signal the same sample duration for all samples\n      // sample duration (as expected by trun MP4 boxes), should be the delta between sample DTS\n      // set this constant duration as being the avg delta between consecutive DTS.\n    if (isSafari) {\n      mp4SampleDuration = Math.round((lastDTS-firstDTS)/(inputSamples.length-1));\n    }\n\n    let nbNalu = 0, naluLen = 0;\n    for (let i = 0 ; i < nbSamples; i++) {\n      // compute total/avc sample length and nb of NAL units\n      let sample = inputSamples[i], units = sample.units, nbUnits = units.length, sampleLen = 0;\n      for (let j = 0; j < nbUnits; j++) {\n        sampleLen += units[j].data.length;\n      }\n      naluLen += sampleLen;\n      nbNalu += nbUnits;\n      sample.length = sampleLen;\n\n      // normalize PTS/DTS\n      if (isSafari) {\n        // sample DTS is computed using a constant decoding offset (mp4SampleDuration) between samples\n        sample.dts = firstDTS + i*mp4SampleDuration;\n      } else {\n        // ensure sample monotonic DTS\n        sample.dts = Math.max(sample.dts,firstDTS);\n      }\n      // ensure that computed value is greater or equal than sample DTS\n      sample.pts = Math.max(sample.pts , sample.dts);\n    }\n\n    /* concatenate the video data and construct the mdat in place\n      (need 8 more bytes to fill length and mpdat type) */\n    let mdatSize = naluLen + (4 * nbNalu) + 8;\n    try {\n      mdat = new Uint8Array(mdatSize);\n    } catch(err) {\n      this.observer.trigger(Event.ERROR, {type : ErrorTypes.MUX_ERROR, details: ErrorDetails.REMUX_ALLOC_ERROR, fatal: false, bytes : mdatSize, reason: `fail allocating video mdat ${mdatSize}`});\n      return;\n    }\n    let view = new DataView(mdat.buffer);\n    view.setUint32(0, mdatSize);\n    mdat.set(MP4.types.mdat, 4);\n\n    for (let i = 0 ; i < nbSamples; i++) {\n      let avcSample = inputSamples[i],\n          avcSampleUnits = avcSample.units,\n          mp4SampleLength = 0,\n          compositionTimeOffset;\n      // convert NALU bitstream to MP4 format (prepend NALU with size field)\n      for(let j = 0, nbUnits = avcSampleUnits.length; j < nbUnits ; j++) {\n        let unit = avcSampleUnits[j],\n            unitData = unit.data,\n            unitDataLen = unit.data.byteLength;\n        view.setUint32(offset, unitDataLen);\n        offset += 4;\n        mdat.set(unitData, offset);\n        offset += unitDataLen;\n        mp4SampleLength += 4 + unitDataLen;\n      }\n\n      if(!isSafari) {\n        // expected sample duration is the Decoding Timestamp diff of consecutive samples\n        if (i < nbSamples - 1) {\n          mp4SampleDuration = inputSamples[i+1].dts - avcSample.dts;\n        } else {\n          let config = this.config,\n              lastFrameDuration = avcSample.dts - inputSamples[i > 0 ? i-1 : i].dts;\n          if (config.stretchShortVideoTrack) {\n            // In some cases, a segment's audio track duration may exceed the video track duration.\n            // Since we've already remuxed audio, and we know how long the audio track is, we look to\n            // see if the delta to the next segment is longer than the minimum of maxBufferHole and\n            // maxSeekHole. If so, playback would potentially get stuck, so we artificially inflate\n            // the duration of the last frame to minimize any potential gap between segments.\n            let maxBufferHole = config.maxBufferHole,\n                maxSeekHole = config.maxSeekHole,\n                gapTolerance = Math.floor(Math.min(maxBufferHole, maxSeekHole) * timeScale),\n                deltaToFrameEnd = (audioTrackLength ? firstPTS + audioTrackLength * timeScale : this.nextAudioPts) - avcSample.pts;\n            if (deltaToFrameEnd > gapTolerance) {\n              // We subtract lastFrameDuration from deltaToFrameEnd to try to prevent any video\n              // frame overlap. maxBufferHole/maxSeekHole should be >> lastFrameDuration anyway.\n              mp4SampleDuration = deltaToFrameEnd - lastFrameDuration;\n              if (mp4SampleDuration < 0) {\n                mp4SampleDuration = lastFrameDuration;\n              }\n              logger.log(`It is approximately ${deltaToFrameEnd/90} ms to the next segment; using duration ${mp4SampleDuration/90} ms for the last video frame.`);\n            } else {\n              mp4SampleDuration = lastFrameDuration;\n            }\n          } else {\n            mp4SampleDuration = lastFrameDuration;\n          }\n        }\n        compositionTimeOffset = Math.round(avcSample.pts - avcSample.dts);\n      } else {\n        compositionTimeOffset = Math.max(0,mp4SampleDuration*Math.round((avcSample.pts - avcSample.dts)/mp4SampleDuration));\n      }\n\n\n      //console.log('PTS/DTS/initDTS/normPTS/normDTS/relative PTS : ${avcSample.pts}/${avcSample.dts}/${initDTS}/${ptsnorm}/${dtsnorm}/${(avcSample.pts/4294967296).toFixed(3)}');\n      outputSamples.push({\n        size: mp4SampleLength,\n         // constant duration\n        duration: mp4SampleDuration,\n        cts: compositionTimeOffset,\n        flags: {\n          isLeading: 0,\n          isDependedOn: 0,\n          hasRedundancy: 0,\n          degradPrio: 0,\n          dependsOn : avcSample.key ? 2 : 1,\n          isNonSync : avcSample.key ? 0 : 1\n        }\n      });\n    }\n    // next AVC sample DTS should be equal to last sample DTS + last sample duration (in PES timescale)\n    this.nextAvcDts = lastDTS + mp4SampleDuration;\n    let dropped = track.dropped;\n    track.len = 0;\n    track.nbNalu = 0;\n    track.dropped = 0;\n    if(outputSamples.length && navigator.userAgent.toLowerCase().indexOf('chrome') > -1) {\n      let flags = outputSamples[0].flags;\n    // chrome workaround, mark first sample as being a Random Access Point to avoid sourcebuffer append issue\n    // https://code.google.com/p/chromium/issues/detail?id=229412\n      flags.dependsOn = 2;\n      flags.isNonSync = 0;\n    }\n    track.samples = outputSamples;\n    moof = MP4.moof(track.sequenceNumber++, firstDTS , track);\n    track.samples = [];\n\n    let data = {\n      data1: moof,\n      data2: mdat,\n      startPTS: firstPTS / timeScale,\n      endPTS: (lastPTS +  mp4SampleDuration) / timeScale,\n      startDTS: firstDTS / timeScale,\n      endDTS: this.nextAvcDts / timeScale,\n      type: 'video',\n      nb: outputSamples.length,\n      dropped : dropped\n    };\n    this.observer.trigger(Event.FRAG_PARSING_DATA, data);\n    return data;\n  }\n\n  remuxAudio(track, timeOffset, contiguous,accurateTimeOffset) {\n    const inputTimeScale = track.inputTimeScale,\n          mp4timeScale = track.timescale,\n          scaleFactor = inputTimeScale/mp4timeScale,\n          mp4SampleDuration = track.isAAC ? 1024 : 1152,\n          inputSampleDuration = mp4SampleDuration * scaleFactor,\n          ptsNormalize = this._PTSNormalize,\n          initDTS = this._initDTS,\n          rawMPEG = !track.isAAC && this.typeSupported.mpeg;\n\n    var offset,\n        mp4Sample,\n        fillFrame,\n        mdat, moof,\n        firstPTS, lastPTS,\n        inputSamples = track.samples,\n        outputSamples = [],\n        nextAudioPts = this.nextAudioPts;\n\n    // for audio samples, also consider consecutive fragments as being contiguous (even if a level switch occurs),\n    // for sake of clarity:\n    // consecutive fragments are frags with\n    //  - less than 100ms gaps between new time offset (if accurate) and next expected PTS OR\n    //  - less than 20 audio frames distance\n    // contiguous fragments are consecutive fragments from same quality level (same level, new SN = old SN + 1)\n    // this helps ensuring audio continuity\n    // and this also avoids audio glitches/cut when switching quality, or reporting wrong duration on first audio frame\n    contiguous |= (inputSamples.length && nextAudioPts &&\n                   ((accurateTimeOffset && Math.abs(timeOffset-nextAudioPts/inputTimeScale) < 0.1) ||\n                    Math.abs((inputSamples[0].pts-nextAudioPts-initDTS)) < 20*inputSampleDuration)\n                    );\n\n    if (!contiguous) {\n      // if fragments are not contiguous, let's use timeOffset to compute next Audio PTS\n      nextAudioPts = timeOffset*inputTimeScale;\n    }\n\n    // compute normalized PTS\n    inputSamples.forEach(function(sample) {\n      sample.pts = sample.dts = ptsNormalize(sample.pts - initDTS, nextAudioPts);\n    });\n\n    // sort based on normalized PTS (this is to avoid sorting issues in case timestamp\n    // reloop in the middle of our samples array)\n    inputSamples.sort(function(a, b) {\n      return a.pts - b.pts;\n    });\n\n    // If the audio track is missing samples, the frames seem to get \"left-shifted\" within the\n    // resulting mp4 segment, causing sync issues and leaving gaps at the end of the audio segment.\n    // In an effort to prevent this from happening, we inject frames here where there are gaps.\n    // When possible, we inject a silent frame; when that's not possible, we duplicate the last\n    // frame.\n\n    // only inject/drop audio frames in case time offset is accurate\n    if (accurateTimeOffset && track.isAAC) {\n      for (let i = 0, nextPts = nextAudioPts; i < inputSamples.length; ) {\n        // First, let's see how far off this frame is from where we expect it to be\n        var sample = inputSamples[i], delta;\n        let pts = sample.pts;\n        delta = pts - nextPts;\n\n        const duration = Math.abs(1000*delta/inputTimeScale);\n\n        // If we're overlapping by more than a duration, drop this sample\n        if (delta <= -inputSampleDuration) {\n          logger.warn(`Dropping 1 audio frame @ ${(nextPts/inputTimeScale).toFixed(3)}s due to ${duration} ms overlap.`);\n          inputSamples.splice(i, 1);\n          track.len -= sample.unit.length;\n          // Don't touch nextPtsNorm or i\n        }\n\n        // Insert missing frames if:\n        // 1: We're more than one frame away\n        // 2: Not more than MAX_SILENT_FRAME_DURATION away\n        // 3: currentTime (aka nextPtsNorm) is not 0\n        else if (delta >= inputSampleDuration && duration < MAX_SILENT_FRAME_DURATION && nextPts) {\n          var missing = Math.round(delta / inputSampleDuration);\n          logger.warn(`Injecting ${missing} audio frame @ ${(nextPts/inputTimeScale).toFixed(3)}s due to ${Math.round(1000*delta/inputTimeScale)} ms gap.`);\n          for (var j = 0; j < missing; j++) {\n            let newStamp = Math.max(nextPts,0);\n            fillFrame = AAC.getSilentFrame(track.manifestCodec || track.codec,track.channelCount);\n            if (!fillFrame) {\n              logger.log('Unable to get silent frame for given audio codec; duplicating last frame instead.');\n              fillFrame = sample.unit.subarray();\n            }\n            inputSamples.splice(i, 0, {unit: fillFrame, pts: newStamp, dts: newStamp});\n            track.len += fillFrame.length;\n            nextPts += inputSampleDuration;\n            i++;\n          }\n\n          // Adjust sample to next expected pts\n          sample.pts = sample.dts = nextPts;\n          nextPts += inputSampleDuration;\n          i++;\n        } else {\n        // Otherwise, just adjust pts\n          if (Math.abs(delta) > (0.1 * inputSampleDuration)) {\n            // logger.log(`Invalid frame delta ${Math.round(delta + inputSampleDuration)} at PTS ${Math.round(pts / 90)} (should be ${Math.round(inputSampleDuration)}).`);\n          }\n          sample.pts = sample.dts = nextPts;\n          nextPts += inputSampleDuration;\n          i++;\n        }\n      }\n    }\n\n\n    for (let j =0 , nbSamples = inputSamples.length; j < nbSamples ; j++) {\n      let audioSample = inputSamples[j];\n      let unit = audioSample.unit;\n      let pts = audioSample.pts;\n      //logger.log(`Audio/PTS:${Math.round(pts/90)}`);\n      // if not first sample\n      if (lastPTS !== undefined) {\n        mp4Sample.duration = Math.round((pts - lastPTS) / scaleFactor);\n      } else {\n        let delta = Math.round(1000 * (pts - nextAudioPts) / inputTimeScale),\n            numMissingFrames = 0;\n        // if fragment are contiguous, detect hole/overlapping between fragments\n        // contiguous fragments are consecutive fragments from same quality level (same level, new SN = old SN + 1)\n        if (contiguous && track.isAAC) {\n          // log delta\n          if (delta) {\n            if (delta > 0 && delta < MAX_SILENT_FRAME_DURATION) {\n              numMissingFrames = Math.round((pts - nextAudioPts) / inputSampleDuration);\n              logger.log(`${delta} ms hole between AAC samples detected,filling it`);\n              if (numMissingFrames > 0) {\n                fillFrame = AAC.getSilentFrame(track.manifestCodec || track.codec,track.channelCount);\n                if (!fillFrame) {\n                  fillFrame = unit.subarray();\n                }\n                track.len += numMissingFrames * fillFrame.length;\n              }\n              // if we have frame overlap, overlapping for more than half a frame duraion\n            } else if (delta < -12) {\n              // drop overlapping audio frames... browser will deal with it\n              logger.log(`drop overlapping AAC sample, expected/parsed/delta:${(nextAudioPts/inputTimeScale).toFixed(3)}s/${(pts/inputTimeScale).toFixed(3)}s/${(-delta)}ms`);\n              track.len -= unit.byteLength;\n              continue;\n            }\n            // set PTS/DTS to expected PTS/DTS\n            pts = nextAudioPts;\n          }\n        }\n        // remember first PTS of our audioSamples, ensure value is positive\n        firstPTS = Math.max(0, pts);\n        if(track.len > 0) {\n          /* concatenate the audio data and construct the mdat in place\n            (need 8 more bytes to fill length and mdat type) */\n          let mdatSize = rawMPEG ? track.len : track.len + 8;\n          offset = rawMPEG ? 0 : 8;\n          try {\n            mdat = new Uint8Array(mdatSize);\n          } catch(err) {\n            this.observer.trigger(Event.ERROR, {type : ErrorTypes.MUX_ERROR, details: ErrorDetails.REMUX_ALLOC_ERROR, fatal: false, bytes : mdatSize, reason: `fail allocating audio mdat ${mdatSize}`});\n            return;\n          }\n          if (!rawMPEG) {\n            const view = new DataView(mdat.buffer);\n            view.setUint32(0, mdatSize);\n            mdat.set(MP4.types.mdat, 4);\n          }\n        } else {\n          // no audio samples\n          return;\n        }\n        for (let i = 0; i < numMissingFrames; i++) {\n          fillFrame = AAC.getSilentFrame(track.manifestCodec || track.codec,track.channelCount);\n          if (!fillFrame) {\n            logger.log('Unable to get silent frame for given audio codec; duplicating this frame instead.');\n            fillFrame = unit.subarray();\n          }\n          mdat.set(fillFrame, offset);\n          offset += fillFrame.byteLength;\n          mp4Sample = {\n            size: fillFrame.byteLength,\n            cts: 0,\n            duration: 1024,\n            flags: {\n              isLeading: 0,\n              isDependedOn: 0,\n              hasRedundancy: 0,\n              degradPrio: 0,\n              dependsOn: 1,\n            }\n          };\n          outputSamples.push(mp4Sample);\n        }\n      }\n      mdat.set(unit, offset);\n      let unitLen = unit.byteLength;\n      offset += unitLen;\n      //console.log('PTS/DTS/initDTS/normPTS/normDTS/relative PTS : ${audioSample.pts}/${audioSample.dts}/${initDTS}/${ptsnorm}/${dtsnorm}/${(audioSample.pts/4294967296).toFixed(3)}');\n      mp4Sample = {\n        size: unitLen,\n        cts: 0,\n        duration: 0,\n        flags: {\n          isLeading: 0,\n          isDependedOn: 0,\n          hasRedundancy: 0,\n          degradPrio: 0,\n          dependsOn: 1,\n        }\n      };\n      outputSamples.push(mp4Sample);\n      lastPTS = pts;\n    }\n    var lastSampleDuration = 0;\n    var nbSamples = outputSamples.length;\n    //set last sample duration as being identical to previous sample\n    if (nbSamples >= 2) {\n      lastSampleDuration = outputSamples[nbSamples - 2].duration;\n      mp4Sample.duration = lastSampleDuration;\n    }\n    if (nbSamples) {\n      // next audio sample PTS should be equal to last sample PTS + duration\n      this.nextAudioPts = nextAudioPts = lastPTS + scaleFactor * lastSampleDuration;\n      //logger.log('Audio/PTS/PTSend:' + audioSample.pts.toFixed(0) + '/' + this.nextAacDts.toFixed(0));\n      track.len = 0;\n      track.samples = outputSamples;\n      if (rawMPEG) {\n        moof = new Uint8Array();\n      } else {\n        moof = MP4.moof(track.sequenceNumber++, firstPTS / scaleFactor, track);\n      }\n      track.samples = [];\n      const start = firstPTS / inputTimeScale;\n      const end = nextAudioPts / inputTimeScale;\n      const audioData = {\n        data1: moof,\n        data2: mdat,\n        startPTS: start,\n        endPTS: end,\n        startDTS: start,\n        endDTS: end,\n        type: 'audio',\n        nb: nbSamples\n      };\n      this.observer.trigger(Event.FRAG_PARSING_DATA, audioData);\n      return audioData;\n    }\n    return null;\n  }\n\n  remuxEmptyAudio(track, timeOffset, contiguous, videoData) {\n    let inputTimeScale = track.inputTimeScale,\n        mp4timeScale = track.samplerate ? track.samplerate : inputTimeScale,\n        scaleFactor = inputTimeScale/mp4timeScale,\n        nextAudioPts = this.nextAudioPts,\n\n        // sync with video's timestamp\n        startDTS = (nextAudioPts !== undefined ? nextAudioPts : videoData.startDTS * inputTimeScale) + this._initDTS,\n        endDTS = videoData.endDTS * inputTimeScale + this._initDTS,\n        // one sample's duration value\n        sampleDuration = 1024,\n        frameDuration = scaleFactor * sampleDuration,\n\n        // samples count of this segment's duration\n        nbSamples = Math.ceil((endDTS - startDTS) / frameDuration),\n\n        // silent frame\n        silentFrame = AAC.getSilentFrame(track.manifestCodec || track.codec,track.channelCount);\n\n        logger.warn('remux empty Audio');\n    // Can't remux if we can't generate a silent frame...\n    if (!silentFrame) {\n      logger.trace('Unable to remuxEmptyAudio since we were unable to get a silent frame for given audio codec!');\n      return;\n    }\n\n    let samples = [];\n    for(var i = 0; i < nbSamples; i++) {\n      var stamp = startDTS + i * frameDuration;\n      samples.push({unit: silentFrame, pts: stamp, dts: stamp});\n      track.len += silentFrame.length;\n    }\n    track.samples = samples;\n\n    this.remuxAudio(track, timeOffset, contiguous);\n  }\n\n  remuxID3(track,timeOffset) {\n    var length = track.samples.length, sample;\n    const inputTimeScale = track.inputTimeScale;\n    const initPTS = this._initPTS;\n    const initDTS = this._initDTS;\n    // consume samples\n    if(length) {\n      for(var index = 0; index < length; index++) {\n        sample = track.samples[index];\n        // setting id3 pts, dts to relative time\n        // using this._initPTS and this._initDTS to calculate relative time\n        sample.pts = ((sample.pts - initPTS) / inputTimeScale);\n        sample.dts = ((sample.dts - initDTS) / inputTimeScale);\n      }\n      this.observer.trigger(Event.FRAG_PARSING_METADATA, {\n        samples:track.samples\n      });\n    }\n\n    track.samples = [];\n    timeOffset = timeOffset;\n  }\n\n  remuxText(track,timeOffset) {\n    track.samples.sort(function(a, b) {\n      return (a.pts-b.pts);\n    });\n\n    var length = track.samples.length, sample;\n    const inputTimeScale = track.inputTimeScale;\n    const initPTS = this._initPTS;\n    // consume samples\n    if(length) {\n      for(var index = 0; index < length; index++) {\n        sample = track.samples[index];\n        // setting text pts, dts to relative time\n        // using this._initPTS and this._initDTS to calculate relative time\n        sample.pts = ((sample.pts - initPTS) / inputTimeScale);\n      }\n      this.observer.trigger(Event.FRAG_PARSING_USERDATA, {\n        samples:track.samples\n      });\n    }\n\n    track.samples = [];\n    timeOffset = timeOffset;\n  }\n\n  _PTSNormalize(value, reference) {\n    var offset;\n    if (reference === undefined) {\n      return value;\n    }\n    if (reference < value) {\n      // - 2^33\n      offset = -8589934592;\n    } else {\n      // + 2^33\n      offset = 8589934592;\n    }\n    /* PTS is 33bit (from 0 to 2^33 -1)\n      if diff between value and reference is bigger than half of the amplitude (2^32) then it means that\n      PTS looping occured. fill the gap */\n    while (Math.abs(value - reference) > 4294967296) {\n        value += offset;\n    }\n    return value;\n  }\n\n}\n\nexport default MP4Remuxer;\n\n\n\n// WEBPACK FOOTER //\n// ./src/remux/mp4-remuxer.js","/**\n * passthrough remuxer\n*/\nimport Event from '../events';\n\nclass PassThroughRemuxer {\n  constructor(observer) {\n    this.observer = observer;\n  }\n\n  destroy() {\n  }\n\n  resetTimeStamp() {\n  }\n\n  resetInitSegment() {\n  }\n\n  remux(audioTrack,videoTrack,id3Track,textTrack,timeOffset, contiguous,accurateTimeOffset,rawData) {\n    var observer = this.observer;\n    var streamType = '';\n    if (audioTrack) {\n      streamType += 'audio';\n    }\n    if (videoTrack) {\n      streamType += 'video';\n    }\n    observer.trigger(Event.FRAG_PARSING_DATA, {\n      data1: rawData,\n      startPTS: timeOffset,\n      startDTS: timeOffset,\n      type: streamType,\n      nb: 1,\n      dropped : 0\n    });\n    //notify end of parsing\n    observer.trigger(Event.FRAG_PARSED);\n  }\n}\n\nexport default PassThroughRemuxer;\n\n\n\n// WEBPACK FOOTER //\n// ./src/remux/passthrough-remuxer.js","/*  inline demuxer.\n *   probe fragments and instantiate appropriate demuxer depending on content type (TSDemuxer, AACDemuxer, ...)\n */\n\nimport Event from '../events';\nimport { ErrorTypes, ErrorDetails } from '../errors';\nimport Decrypter from '../crypt/decrypter';\nimport AACDemuxer from '../demux/aacdemuxer';\nimport MP4Demuxer from '../demux/mp4demuxer';\nimport TSDemuxer from '../demux/tsdemuxer';\nimport MP3Demuxer from '../demux/mp3demuxer';\nimport MP4Remuxer from '../remux/mp4-remuxer';\nimport PassThroughRemuxer from '../remux/passthrough-remuxer';\n\nclass DemuxerInline {\n\n  constructor(observer, typeSupported, config, vendor) {\n    this.observer = observer;\n    this.typeSupported = typeSupported;\n    this.config = config;\n    this.vendor = vendor;\n  }\n\n  destroy() {\n    var demuxer = this.demuxer;\n    if (demuxer) {\n      demuxer.destroy();\n    }\n  }\n\n  push(data, decryptdata, initSegment, audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS) {\n    if ((data.byteLength > 0) && (decryptdata != null) && (decryptdata.key != null) && (decryptdata.method === 'AES-128')) {\n      let decrypter = this.decrypter;\n      if (decrypter == null) {\n        decrypter = this.decrypter = new Decrypter(this.observer, this.config);\n      }\n      var localthis = this;\n      // performance.now() not available on WebWorker, at least on Safari Desktop\n      var startTime;\n      try {\n        startTime = performance.now();\n      } catch (error) {\n        startTime = Date.now();\n      }\n      decrypter.decrypt(data, decryptdata.key.buffer, decryptdata.iv.buffer, function (decryptedData) {\n        var endTime;\n        try {\n          endTime = performance.now();\n        } catch (error) {\n          endTime = Date.now();\n        }\n        localthis.observer.trigger(Event.FRAG_DECRYPTED, { stats: { tstart: startTime, tdecrypt: endTime } });\n        localthis.pushDecrypted(new Uint8Array(decryptedData), decryptdata, new Uint8Array(initSegment), audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS);\n      });\n    } else {\n      this.pushDecrypted(new Uint8Array(data), decryptdata, new Uint8Array(initSegment), audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS);\n    }\n  }\n\n  pushDecrypted(data, decryptdata, initSegment, audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset, defaultInitPTS) {\n    var demuxer = this.demuxer;\n    if (!demuxer ||\n      // in case of continuity change, we might switch from content type (AAC container to TS container for example)\n      // so let's check that current demuxer is still valid\n      (discontinuity && !this.probe(data))) {\n      const observer = this.observer;\n      const typeSupported = this.typeSupported;\n      const config = this.config;\n      // probing order is TS/AAC/MP3/MP4\n      const muxConfig = [\n        { demux: TSDemuxer, remux: MP4Remuxer },\n        { demux: AACDemuxer, remux: MP4Remuxer },\n        { demux: MP3Demuxer, remux: MP4Remuxer },\n        { demux: MP4Demuxer, remux: PassThroughRemuxer }\n      ];\n\n      // probe for content type\n      for (let i = 0, len = muxConfig.length; i < len; i++) {\n        const mux = muxConfig[i];\n        const probe = mux.demux.probe;\n        if (probe(data)) {\n          const remuxer = this.remuxer = new mux.remux(observer, config, typeSupported, this.vendor);\n          demuxer = new mux.demux(observer, remuxer, config, typeSupported);\n          this.probe = probe;\n          break;\n        }\n      }\n      if (!demuxer) {\n        observer.trigger(Event.ERROR, { type: ErrorTypes.MEDIA_ERROR, details: ErrorDetails.FRAG_PARSING_ERROR, fatal: true, reason: 'no demux matching with content found' });\n        return;\n      }\n      this.demuxer = demuxer;\n    }\n    const remuxer = this.remuxer;\n\n    if (discontinuity || trackSwitch) {\n      demuxer.resetInitSegment(initSegment, audioCodec, videoCodec, duration);\n      remuxer.resetInitSegment();\n    }\n    if (discontinuity) {\n      demuxer.resetTimeStamp(defaultInitPTS);\n      remuxer.resetTimeStamp(defaultInitPTS);\n    }\n    if (typeof demuxer.setDecryptData === 'function') {\n      demuxer.setDecryptData(decryptdata);\n    }\n    demuxer.append(data, timeOffset, contiguous, accurateTimeOffset);\n  }\n}\n\nexport default DemuxerInline;\n\n\n\n// WEBPACK FOOTER //\n// ./src/demux/demuxer-inline.js","/*\n*\n* All objects in the event handling chain should inherit from this class\n*\n*/\n\nimport {logger} from './utils/logger';\nimport {ErrorTypes, ErrorDetails} from './errors';\nimport Event from './events';\n\nclass EventHandler {\n\n  constructor(hls, ...events) {\n    this.hls = hls;\n    this.onEvent = this.onEvent.bind(this);\n    this.handledEvents = events;\n    this.useGenericHandler = true;\n\n    this.registerListeners();\n  }\n\n  destroy() {\n    this.unregisterListeners();\n  }\n\n  isEventHandler() {\n    return typeof this.handledEvents === 'object' && this.handledEvents.length && typeof this.onEvent === 'function';\n  }\n\n  registerListeners() {\n    if (this.isEventHandler()) {\n      this.handledEvents.forEach(function(event) {\n        if (event === 'hlsEventGeneric') {\n          throw new Error('Forbidden event name: ' + event);\n        }\n        this.hls.on(event, this.onEvent);\n      }, this);\n    }\n  }\n\n  unregisterListeners() {\n    if (this.isEventHandler()) {\n      this.handledEvents.forEach(function(event) {\n        this.hls.off(event, this.onEvent);\n      }, this);\n    }\n  }\n\n  /**\n   * arguments: event (string), data (any)\n   */\n  onEvent(event, data) {\n    this.onEventGeneric(event, data);\n  }\n\n  onEventGeneric(event, data) {\n    var eventToFunction = function(event, data) {\n      var funcName = 'on' + event.replace('hls', '');\n      if (typeof this[funcName] !== 'function') {\n        throw new Error(`Event ${event} has no generic handler in this ${this.constructor.name} class (tried ${funcName})`);\n      }\n      return this[funcName].bind(this, data);\n    };\n    try {\n      eventToFunction.call(this, event, data).call();\n    } catch (err) {\n      logger.error(`internal error happened while processing ${event}:${err.message}`);\n      this.hls.trigger(Event.ERROR, {type: ErrorTypes.OTHER_ERROR, details: ErrorDetails.INTERNAL_EXCEPTION, fatal: false, event : event, err : err});\n    }\n  }\n}\n\nexport default EventHandler;\n\n\n\n// WEBPACK FOOTER //\n// ./src/event-handler.js","const DECIMAL_RESOLUTION_REGEX = /^(\\d+)x(\\d+)$/;\nconst ATTR_LIST_REGEX = /\\s*(.+?)\\s*=((?:\\\".*?\\\")|.*?)(?:,|$)/g;\n\n// adapted from https://github.com/kanongil/node-m3u8parse/blob/master/attrlist.js\nclass AttrList {\n\n  constructor(attrs) {\n    if (typeof attrs === 'string') {\n      attrs = AttrList.parseAttrList(attrs);\n    }\n    for(var attr in attrs){\n      if(attrs.hasOwnProperty(attr)) {\n        this[attr] = attrs[attr];\n      }\n    }\n  }\n\n  decimalInteger(attrName) {\n    const intValue = parseInt(this[attrName], 10);\n    if (intValue > Number.MAX_SAFE_INTEGER) {\n      return Infinity;\n    }\n    return intValue;\n  }\n\n  hexadecimalInteger(attrName) {\n    if(this[attrName]) {\n      let stringValue = (this[attrName] || '0x').slice(2);\n      stringValue = ((stringValue.length & 1) ? '0' : '') + stringValue;\n\n      const value = new Uint8Array(stringValue.length / 2);\n      for (let i = 0; i < stringValue.length / 2; i++) {\n        value[i] = parseInt(stringValue.slice(i * 2, i * 2 + 2), 16);\n      }\n      return value;\n    } else {\n      return null;\n    }\n  }\n\n  hexadecimalIntegerAsNumber(attrName) {\n    const intValue = parseInt(this[attrName], 16);\n    if (intValue > Number.MAX_SAFE_INTEGER) {\n      return Infinity;\n    }\n    return intValue;\n  }\n\n  decimalFloatingPoint(attrName) {\n    return parseFloat(this[attrName]);\n  }\n\n  enumeratedString(attrName) {\n    return this[attrName];\n  }\n\n  decimalResolution(attrName) {\n    const res = DECIMAL_RESOLUTION_REGEX.exec(this[attrName]);\n    if (res === null) {\n      return undefined;\n    }\n    return {\n      width: parseInt(res[1], 10),\n      height: parseInt(res[2], 10)\n    };\n  }\n\n  static parseAttrList(input) {\n    var match, attrs = {};\n    ATTR_LIST_REGEX.lastIndex = 0;\n    while ((match = ATTR_LIST_REGEX.exec(input)) !== null) {\n      var value = match[2], quote = '\"';\n\n      if (value.indexOf(quote) === 0 &&\n          value.lastIndexOf(quote) === (value.length-1)) {\n        value = value.slice(1, -1);\n      }\n      attrs[match[1]] = value;\n    }\n    return attrs;\n  }\n\n}\n\nexport default AttrList;\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/attr-list.js","/**\n * Playlist Loader\n*/\n\nimport URLToolkit from 'url-toolkit';\nimport Event from '../events';\nimport EventHandler from '../event-handler';\nimport {ErrorTypes, ErrorDetails} from '../errors';\nimport AttrList from '../utils/attr-list';\nimport {logger} from '../utils/logger';\n\n// https://regex101.com is your friend\nconst MASTER_PLAYLIST_REGEX = /#EXT-X-STREAM-INF:([^\\n\\r]*)[\\r\\n]+([^\\r\\n]+)/g;\nconst MASTER_PLAYLIST_MEDIA_REGEX = /#EXT-X-MEDIA:(.*)/g;\n\nconst LEVEL_PLAYLIST_REGEX_FAST = new RegExp([\n  /#EXTINF:(\\d*(?:\\.\\d+)?)(?:,(.*)\\s+)?/.source, // duration (#EXTINF:<duration>,<title>), group 1 => duration, group 2 => title\n  /|(?!#)(\\S+)/.source,                          // segment URI, group 3 => the URI (note newline is not eaten)\n  /|#EXT-X-BYTERANGE:*(.+)/.source,              // next segment's byterange, group 4 => range spec (x@y)\n  /|#EXT-X-PROGRAM-DATE-TIME:(.+)/.source,       // next segment's program date/time group 5 => the datetime spec\n  /|#.*/.source                                  // All other non-segment oriented tags will match with all groups empty\n].join(''), 'g');\n\nconst LEVEL_PLAYLIST_REGEX_SLOW = /(?:(?:#(EXTM3U))|(?:#EXT-X-(PLAYLIST-TYPE):(.+))|(?:#EXT-X-(MEDIA-SEQUENCE): *(\\d+))|(?:#EXT-X-(TARGETDURATION): *(\\d+))|(?:#EXT-X-(KEY):(.+))|(?:#EXT-X-(START):(.+))|(?:#EXT-X-(ENDLIST))|(?:#EXT-X-(DISCONTINUITY-SEQ)UENCE:(\\d+))|(?:#EXT-X-(DIS)CONTINUITY))|(?:#EXT-X-(VERSION):(\\d+))|(?:#EXT-X-(MAP):(.+))|(?:(#)(.*):(.*))|(?:(#)(.*))(?:.*)\\r?\\n?/;\n\nclass LevelKey {\n\n  constructor() {\n    this.method = null;\n    this.key = null;\n    this.iv = null;\n    this._uri = null;\n  }\n\n  get uri() {\n    if (!this._uri && this.reluri) {\n      this._uri = URLToolkit.buildAbsoluteURL(this.baseuri, this.reluri, { alwaysNormalize: true });\n    }\n    return this._uri;\n  }\n\n}\n\nclass Fragment {\n\n  constructor() {\n    this._url = null;\n    this._byteRange = null;\n    this._decryptdata = null;\n    this.tagList = [];\n  }\n\n  get url() {\n    if (!this._url && this.relurl) {\n      this._url = URLToolkit.buildAbsoluteURL(this.baseurl, this.relurl, { alwaysNormalize: true });\n    }\n    return this._url;\n  }\n\n  set url(value) {\n    this._url = value;\n  }\n\n  get programDateTime() {\n    if (!this._programDateTime && this.rawProgramDateTime) {\n      this._programDateTime = new Date(Date.parse(this.rawProgramDateTime));\n    }\n    return this._programDateTime;\n  }\n\n  get byteRange() {\n    if (!this._byteRange) {\n      let byteRange = this._byteRange = [];\n      if (this.rawByteRange) {\n        const params = this.rawByteRange.split('@', 2);\n        if (params.length === 1) {\n          const lastByteRangeEndOffset = this.lastByteRangeEndOffset;\n          byteRange[0] = lastByteRangeEndOffset ? lastByteRangeEndOffset : 0;\n        } else {\n          byteRange[0] = parseInt(params[1]);\n        }\n        byteRange[1] = parseInt(params[0]) + byteRange[0];\n      }\n    }\n    return this._byteRange;\n  }\n\n  get byteRangeStartOffset() {\n    return this.byteRange[0];\n  }\n\n  get byteRangeEndOffset() {\n    return this.byteRange[1];\n  }\n\n  get decryptdata() {\n    if (!this._decryptdata) {\n      this._decryptdata = this.fragmentDecryptdataFromLevelkey(this.levelkey, this.sn);\n    }\n    return this._decryptdata;\n  }\n\n  /**\n   * Utility method for parseLevelPlaylist to create an initialization vector for a given segment\n   * @returns {Uint8Array}\n   */\n  createInitializationVector(segmentNumber) {\n    var uint8View = new Uint8Array(16);\n\n    for (var i = 12; i < 16; i++) {\n      uint8View[i] = (segmentNumber >> 8 * (15 - i)) & 0xff;\n    }\n\n    return uint8View;\n  }\n\n  /**\n   * Utility method for parseLevelPlaylist to get a fragment's decryption data from the currently parsed encryption key data\n   * @param levelkey - a playlist's encryption info\n   * @param segmentNumber - the fragment's segment number\n   * @returns {*} - an object to be applied as a fragment's decryptdata\n   */\n  fragmentDecryptdataFromLevelkey(levelkey, segmentNumber) {\n    var decryptdata = levelkey;\n\n    if (levelkey && levelkey.method && levelkey.uri && !levelkey.iv) {\n      decryptdata = new LevelKey();\n      decryptdata.method = levelkey.method;\n      decryptdata.baseuri = levelkey.baseuri;\n      decryptdata.reluri = levelkey.reluri;\n      decryptdata.iv = this.createInitializationVector(segmentNumber);\n    }\n\n    return decryptdata;\n  }\n\n  cloneObj(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n}\n\nclass PlaylistLoader extends EventHandler {\n\n  constructor(hls) {\n    super(hls,\n      Event.MANIFEST_LOADING,\n      Event.LEVEL_LOADING,\n      Event.AUDIO_TRACK_LOADING,\n      Event.SUBTITLE_TRACK_LOADING);\n    this.loaders = {};\n  }\n\n  destroy() {\n    for (let loaderName in this.loaders) {\n      let loader = this.loaders[loaderName];\n      if (loader) {\n        loader.destroy();\n      }\n    }\n    this.loaders = {};\n    EventHandler.prototype.destroy.call(this);\n  }\n\n  onManifestLoading(data) {\n    this.load(data.url, { type : 'manifest'});\n  }\n\n  onLevelLoading(data) {\n    this.load(data.url, { type : 'level', level : data.level, id : data.id});\n  }\n\n  onAudioTrackLoading(data) {\n    this.load(data.url, { type : 'audioTrack', id : data.id});\n  }\n\n  onSubtitleTrackLoading(data) {\n    this.load(data.url, { type : 'subtitleTrack', id : data.id});\n  }\n\n  load(url, context) {\n    let loader = this.loaders[context.type];\n    if (loader) {\n      let loaderContext = loader.context;\n      if (loaderContext && loaderContext.url === url) {\n        logger.trace(`playlist request ongoing`);\n        return;\n      } else {\n        logger.warn(`abort previous loader for type:${context.type}`);\n        loader.abort();\n      }\n    }\n    let config = this.hls.config,\n        retry,\n        timeout,\n        retryDelay,\n        maxRetryDelay;\n    if(context.type === 'manifest') {\n      retry = config.manifestLoadingMaxRetry;\n      timeout = config.manifestLoadingTimeOut;\n      retryDelay = config.manifestLoadingRetryDelay;\n      maxRetryDelay = config.manifestLoadingMaxRetryTimeout;\n    } else {\n      retry = config.levelLoadingMaxRetry;\n      timeout = config.levelLoadingTimeOut;\n      retryDelay = config.levelLoadingRetryDelay;\n      maxRetryDelay = config.levelLoadingMaxRetryTimeout;\n      logger.log(`loading playlist for ${context.type} ${context.level || context.id}`);\n    }\n    loader  = this.loaders[context.type] = context.loader = typeof(config.pLoader) !== 'undefined' ? new config.pLoader(config) : new config.loader(config);\n    context.url = url;\n    context.responseType = '';\n\n    let loaderConfig, loaderCallbacks;\n    loaderConfig = { timeout : timeout, maxRetry : retry , retryDelay : retryDelay, maxRetryDelay : maxRetryDelay};\n    loaderCallbacks = { onSuccess : this.loadsuccess.bind(this), onError :this.loaderror.bind(this), onTimeout : this.loadtimeout.bind(this)};\n    loader.load(context,loaderConfig,loaderCallbacks);\n  }\n\n  resolve(url, baseUrl) {\n    return URLToolkit.buildAbsoluteURL(baseUrl, url, { alwaysNormalize: true });\n  }\n\n  parseMasterPlaylist(string, baseurl) {\n    let levels = [], result;\n    MASTER_PLAYLIST_REGEX.lastIndex = 0;\n    while ((result = MASTER_PLAYLIST_REGEX.exec(string)) != null){\n      const level = {};\n\n      var attrs = level.attrs = new AttrList(result[1]);\n      level.url = this.resolve(result[2], baseurl);\n\n      var resolution = attrs.decimalResolution('RESOLUTION');\n      if(resolution) {\n        level.width = resolution.width;\n        level.height = resolution.height;\n      }\n      level.bitrate = attrs.decimalInteger('AVERAGE-BANDWIDTH') || attrs.decimalInteger('BANDWIDTH');\n      level.name = attrs.NAME;\n\n      var codecs = attrs.CODECS;\n      if(codecs) {\n        codecs = codecs.split(/[ ,]+/);\n        for (let i = 0; i < codecs.length; i++) {\n          const codec = codecs[i];\n          if (codec.indexOf('avc1') !== -1) {\n            level.videoCodec = this.avc1toavcoti(codec);\n          } else if (codec.indexOf('hvc1') !== -1) {\n            level.videoCodec = codec;\n          } else {\n            level.audioCodec = codec;\n          }\n        }\n      }\n\n      levels.push(level);\n    }\n    return levels;\n  }\n\n  parseMasterPlaylistMedia(string, baseurl, type, audioGroups=[]) {\n    let result;\n    let medias = [];\n    let id = 0;\n    const findGroup = (groups, mediaGroupId) => groups.find(group => group.id === mediaGroupId);\n    MASTER_PLAYLIST_MEDIA_REGEX.lastIndex = 0;\n    while ((result = MASTER_PLAYLIST_MEDIA_REGEX.exec(string)) !== null) {\n      const media = {};\n      const attrs = new AttrList(result[1]);\n      if (attrs.TYPE === type) {\n        media.groupId = attrs['GROUP-ID'];\n        media.instreamId = attrs['INSTREAM-ID'];\n        media.name = attrs.NAME;\n        media.type = type;\n        media.default = (attrs.DEFAULT === 'YES');\n        media.autoselect = (attrs.AUTOSELECT === 'YES');\n        media.forced = (attrs.FORCED === 'YES');\n        if (attrs.URI) {\n          media.url = this.resolve(attrs.URI, baseurl);\n        }\n        media.lang = attrs.LANGUAGE;\n        if (!media.name) {\n            media.name = media.lang;\n        }\n        if (audioGroups.length) {\n          const groupCodec = findGroup(audioGroups, media.groupId);\n          media.audioCodec = groupCodec ? groupCodec.codec : audioGroups[0].codec;\n        }\n        media.id = id++;\n        medias.push(media);\n      }\n    }\n    return medias;\n  }\n\n  avc1toavcoti(codec) {\n    var result, avcdata = codec.split('.');\n    if (avcdata.length > 2) {\n      result = avcdata.shift() + '.';\n      result += parseInt(avcdata.shift()).toString(16);\n      result += ('000' + parseInt(avcdata.shift()).toString(16)).substr(-4);\n    } else {\n      result = codec;\n    }\n    return result;\n  }\n\n  parseLevelPlaylist(string, baseurl, id, type) {\n    var currentSN = 0,\n        totalduration = 0,\n        level = {type: null, version: null, url: baseurl, fragments: [], live: true, startSN: 0},\n        levelkey = new LevelKey(),\n        cc = 0,\n        prevFrag = null,\n        frag = new Fragment(),\n        result,\n        i;\n\n    LEVEL_PLAYLIST_REGEX_FAST.lastIndex = 0;\n\n    while ((result = LEVEL_PLAYLIST_REGEX_FAST.exec(string)) !== null) {\n      const duration = result[1];\n      if (duration) { // INF\n        frag.duration = parseFloat(duration);\n        // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n        const title = (' ' + result[2]).slice(1);\n        frag.title = title ? title : null;\n        frag.tagList.push(title ? [ 'INF',duration,title ] : [ 'INF',duration ]);\n      } else if (result[3]) { // url\n        if (!isNaN(frag.duration)) {\n          const sn = currentSN++;\n          frag.type = type;\n          frag.start = totalduration;\n          frag.levelkey = levelkey;\n          frag.sn = sn;\n          frag.level = id;\n          frag.cc = cc;\n          frag.baseurl = baseurl;\n          // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n          frag.relurl = (' ' + result[3]).slice(1);\n\n          level.fragments.push(frag);\n          prevFrag = frag;\n          totalduration += frag.duration;\n\n          frag = new Fragment();\n        }\n      } else if (result[4]) { // X-BYTERANGE\n        frag.rawByteRange = (' ' + result[4]).slice(1);\n        if (prevFrag) {\n          const lastByteRangeEndOffset = prevFrag.byteRangeEndOffset;\n          if (lastByteRangeEndOffset) {\n            frag.lastByteRangeEndOffset = lastByteRangeEndOffset;\n          }\n        }\n      } else if (result[5]) { // PROGRAM-DATE-TIME\n        // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n        frag.rawProgramDateTime = (' ' + result[5]).slice(1);\n        frag.tagList.push(['PROGRAM-DATE-TIME', frag.rawProgramDateTime]);\n      } else {\n        result = result[0].match(LEVEL_PLAYLIST_REGEX_SLOW);\n        for (i = 1; i < result.length; i++) {\n          if (result[i] !== undefined) {\n            break;\n          }\n        }\n\n        // avoid sliced strings    https://github.com/video-dev/hls.js/issues/939\n        const value1 = (' ' + result[i+1]).slice(1);\n        const value2 = (' ' + result[i+2]).slice(1);\n\n        switch (result[i]) {\n          case '#':\n            frag.tagList.push(value2 ? [ value1,value2 ] : [ value1 ]);\n            break;\n          case 'PLAYLIST-TYPE':\n            level.type = value1.toUpperCase();\n            break;\n          case 'MEDIA-SEQUENCE':\n            currentSN = level.startSN = parseInt(value1);\n            break;\n          case 'TARGETDURATION':\n            level.targetduration = parseFloat(value1);\n            break;\n          case 'VERSION':\n            level.version = parseInt(value1);\n            break;\n          case 'EXTM3U':\n            break;\n          case 'ENDLIST':\n            level.live = false;\n            break;\n          case 'DIS':\n            cc++;\n            frag.tagList.push(['DIS']);\n            break;\n          case 'DISCONTINUITY-SEQ':\n            cc = parseInt(value1);\n            break;\n          case 'KEY':\n            // https://tools.ietf.org/html/draft-pantos-http-live-streaming-08#section-3.4.4\n            var decryptparams = value1;\n            var keyAttrs = new AttrList(decryptparams);\n            var decryptmethod = keyAttrs.enumeratedString('METHOD'),\n                decrypturi = keyAttrs.URI,\n                decryptiv = keyAttrs.hexadecimalInteger('IV');\n            if (decryptmethod) {\n              levelkey = new LevelKey();\n              if ((decrypturi) && (['AES-128', 'SAMPLE-AES'].indexOf(decryptmethod) >= 0)) {\n                levelkey.method = decryptmethod;\n                // URI to get the key\n                levelkey.baseuri = baseurl;\n                levelkey.reluri = decrypturi;\n                levelkey.key = null;\n                // Initialization Vector (IV)\n                levelkey.iv = decryptiv;\n              }\n            }\n            break;\n          case 'START':\n            let startParams = value1;\n            let startAttrs = new AttrList(startParams);\n            let startTimeOffset = startAttrs.decimalFloatingPoint('TIME-OFFSET');\n            //TIME-OFFSET can be 0\n            if ( !isNaN(startTimeOffset) ) {\n              level.startTimeOffset = startTimeOffset;\n            }\n            break;\n          case 'MAP':\n            let mapAttrs = new AttrList(value1);\n            frag.relurl = mapAttrs.URI;\n            frag.rawByteRange = mapAttrs.BYTERANGE;\n            frag.baseurl = baseurl;\n            frag.level = id;\n            frag.type = type;\n            frag.sn = 'initSegment';\n            level.initSegment = frag;\n            frag = new Fragment();\n            break;\n          default:\n            logger.warn(`line parsed but not handled: ${result}`);\n            break;\n        }\n      }\n    }\n    frag = prevFrag;\n    //logger.log('found ' + level.fragments.length + ' fragments');\n    if(frag && !frag.relurl) {\n      level.fragments.pop();\n      totalduration-=frag.duration;\n    }\n    level.totalduration = totalduration;\n    level.averagetargetduration = totalduration / level.fragments.length;\n    level.endSN = currentSN - 1;\n    level.startCC = level.fragments[0] ? level.fragments[0].cc : 0;\n    level.endCC = cc;\n    return level;\n  }\n\n  loadsuccess(response, stats, context, networkDetails=null) {\n    var string = response.data,\n        url = response.url,\n        type = context.type,\n        id = context.id,\n        level = context.level,\n        hls = this.hls;\n\n    this.loaders[type] = undefined;\n    // responseURL not supported on some browsers (it is used to detect URL redirection)\n    // data-uri mode also not supported (but no need to detect redirection)\n    if (url === undefined || url.indexOf('data:') === 0) {\n      // fallback to initial URL\n      url = context.url;\n    }\n    stats.tload = performance.now();\n    //stats.mtime = new Date(target.getResponseHeader('Last-Modified'));\n    if (string.indexOf('#EXTM3U') === 0) {\n      if (string.indexOf('#EXTINF:') > 0) {\n        let isLevel = (type !== 'audioTrack' && type !== 'subtitleTrack'),\n            levelId = !isNaN(level) ? level : !isNaN(id) ? id : 0,\n            levelDetails = this.parseLevelPlaylist(string, url, levelId, (type === 'audioTrack' ? 'audio' : (type === 'subtitleTrack' ? 'subtitle' : 'main') ));\n            levelDetails.tload = stats.tload;\n        if (type === 'manifest') {\n        // first request, stream manifest (no master playlist), fire manifest loaded event with level details\n          hls.trigger(Event.MANIFEST_LOADED, {levels: [{url: url, details : levelDetails}], audioTracks : [], url: url, stats: stats, networkDetails: networkDetails});\n        }\n        stats.tparsed = performance.now();\n        if (levelDetails.targetduration) {\n          if (isLevel) {\n            hls.trigger(Event.LEVEL_LOADED, {details: levelDetails, level: level || 0, id: id || 0, stats: stats, networkDetails: networkDetails});\n          } else {\n            if (type === 'audioTrack') {\n              hls.trigger(Event.AUDIO_TRACK_LOADED, {details: levelDetails, id: id, stats: stats, networkDetails: networkDetails});\n            }\n            else if (type === 'subtitleTrack') {\n              hls.trigger(Event.SUBTITLE_TRACK_LOADED, {details: levelDetails, id: id, stats: stats, networkDetails: networkDetails});\n            }\n          }\n        } else {\n          hls.trigger(Event.ERROR, {type: ErrorTypes.NETWORK_ERROR, details: ErrorDetails.MANIFEST_PARSING_ERROR, fatal: true, url: url, reason: 'invalid targetduration', networkDetails: networkDetails});\n        }\n      } else {\n        let levels = this.parseMasterPlaylist(string, url);\n        // multi level playlist, parse level info\n        if (levels.length) {\n          const audioGroups = levels.map(l => ({ id: l.attrs.AUDIO, codec: l.audioCodec}));\n          let audioTracks = this.parseMasterPlaylistMedia(string, url, 'AUDIO', audioGroups);\n          let subtitles = this.parseMasterPlaylistMedia(string, url, 'SUBTITLES');\n          let captions = this.parseMasterPlaylistMedia(string, url, 'CLOSED-CAPTIONS');\n          if (audioTracks.length) {\n            // check if we have found an audio track embedded in main playlist (audio track without URI attribute)\n            let embeddedAudioFound = false;\n            audioTracks.forEach(audioTrack => {\n              if(!audioTrack.url) {\n                embeddedAudioFound = true;\n              }\n            });\n            // if no embedded audio track defined, but audio codec signaled in quality level, we need to signal this main audio track\n            // this could happen with playlists with alt audio rendition in which quality levels (main) contains both audio+video. but with mixed audio track not signaled\n            if (embeddedAudioFound === false && levels[0].audioCodec && !levels[0].attrs.AUDIO) {\n              logger.log('audio codec signaled in quality level, but no embedded audio track signaled, create one');\n              audioTracks.unshift({ type : 'main', name : 'main'});\n            }\n          }\n          hls.trigger(Event.MANIFEST_LOADED, {levels, audioTracks, subtitles, captions, url, stats, networkDetails});\n        } else {\n          if (type === 'manifest') {\n            hls.trigger(Event.ERROR, {\n              type: ErrorTypes.NETWORK_ERROR,\n              details: ErrorDetails.MANIFEST_PARSING_ERROR,\n              fatal: true,\n              url: url,\n              reason: 'no level found in manifest',\n              networkDetails\n            });\n          } else {\n            hls.trigger(Event.ERROR, {type: ErrorTypes.NETWORK_ERROR, details: ErrorDetails.MANIFEST_EMPTY_ERROR, fatal: false, url: url, reason: 'no level found in manifest', context });\n          }\n        }\n      }\n    } else {\n      hls.trigger(Event.ERROR, {type: ErrorTypes.NETWORK_ERROR, details: ErrorDetails.MANIFEST_PARSING_ERROR, fatal: true, url: url, reason: 'no EXTM3U delimiter', networkDetails: networkDetails});\n    }\n  }\n\n  loaderror(response, context, networkDetails=null) {\n    var details, fatal,loader = context.loader;\n    switch(context.type) {\n      case 'manifest':\n        details = ErrorDetails.MANIFEST_LOAD_ERROR;\n        fatal = true;\n        break;\n      case 'level':\n        details = ErrorDetails.LEVEL_LOAD_ERROR;\n        fatal = false;\n        break;\n      case 'audioTrack':\n        details = ErrorDetails.AUDIO_TRACK_LOAD_ERROR;\n        fatal = false;\n        break;\n    }\n    if (loader) {\n      loader.abort();\n      this.loaders[context.type] = undefined;\n    }\n    this.hls.trigger(Event.ERROR, {type: ErrorTypes.NETWORK_ERROR, details: details, fatal: fatal, url: context.url, loader: loader, response: response, context : context, networkDetails: networkDetails});\n  }\n\n  loadtimeout(stats, context, networkDetails=null) {\n    var details, fatal, loader = context.loader;\n    switch(context.type) {\n      case 'manifest':\n        details = ErrorDetails.MANIFEST_LOAD_TIMEOUT;\n        fatal = true;\n        break;\n      case 'level':\n        details = ErrorDetails.LEVEL_LOAD_TIMEOUT;\n        fatal = false;\n        break;\n      case 'audioTrack':\n        details = ErrorDetails.AUDIO_TRACK_LOAD_TIMEOUT;\n        fatal = false;\n        break;\n    }\n    if (loader) {\n      loader.abort();\n      this.loaders[context.type] = undefined;\n    }\n    this.hls.trigger(Event.ERROR, {type: ErrorTypes.NETWORK_ERROR, details: details, fatal: fatal, url: context.url, loader: loader, context : context, networkDetails: networkDetails});\n  }\n}\n\nexport default PlaylistLoader;\n\n\n\n// WEBPACK FOOTER //\n// ./src/loader/playlist-loader.js","/*\n * Fragment Loader\n*/\n\nimport Event from '../events';\nimport EventHandler from '../event-handler';\nimport {ErrorTypes, ErrorDetails} from '../errors';\nimport {logger} from '../utils/logger';\n\nclass FragmentLoader extends EventHandler {\n\n  constructor(hls) {\n    super(hls, Event.FRAG_LOADING);\n    this.loaders = {};\n  }\n\n  destroy() {\n    let loaders = this.loaders;\n    for (let loaderName in loaders) {\n      let loader = loaders[loaderName];\n      if (loader) {\n        loader.destroy();\n      }\n    }\n    this.loaders = {};\n    EventHandler.prototype.destroy.call(this);\n  }\n\n  onFragLoading(data) {\n    let frag = data.frag,\n        type = frag.type,\n        loader = this.loaders[type],\n        config = this.hls.config;\n\n    frag.loaded = 0;\n    if (loader) {\n      logger.warn(`abort previous fragment loader for type:${type}`);\n      loader.abort();\n    }\n    loader  = this.loaders[type] = frag.loader = typeof(config.fLoader) !== 'undefined' ? new config.fLoader(config) : new config.loader(config);\n\n    let loaderContext, loaderConfig, loaderCallbacks;\n    loaderContext = { url : frag.url, frag : frag, responseType : 'arraybuffer', progressData : false};\n    let start = frag.byteRangeStartOffset, end = frag.byteRangeEndOffset;\n    if (!isNaN(start) && !isNaN(end)) {\n      loaderContext.rangeStart = start;\n      loaderContext.rangeEnd = end;\n    }\n    loaderConfig = { timeout : config.fragLoadingTimeOut, maxRetry : 0 , retryDelay : 0, maxRetryDelay : config.fragLoadingMaxRetryTimeout};\n    loaderCallbacks = { onSuccess : this.loadsuccess.bind(this), onError :this.loaderror.bind(this), onTimeout : this.loadtimeout.bind(this), onProgress: this.loadprogress.bind(this)};\n    loader.load(loaderContext,loaderConfig,loaderCallbacks);\n  }\n\n  loadsuccess(response, stats, context, networkDetails=null) {\n    let payload = response.data, frag = context.frag;\n    // detach fragment loader on load success\n    frag.loader = undefined;\n    this.loaders[frag.type] = undefined;\n    this.hls.trigger(Event.FRAG_LOADED, {payload: payload, frag: frag, stats: stats, networkDetails: networkDetails});\n  }\n\n  loaderror(response, context, networkDetails=null) {\n    let loader = context.loader;\n    if (loader) {\n      loader.abort();\n    }\n    this.loaders[context.type] = undefined;\n    this.hls.trigger(Event.ERROR, {type: ErrorTypes.NETWORK_ERROR, details: ErrorDetails.FRAG_LOAD_ERROR, fatal: false, frag: context.frag, response: response, networkDetails: networkDetails});\n  }\n\n  loadtimeout(stats, context, networkDetails=null) {\n    let loader = context.loader;\n    if (loader) {\n      loader.abort();\n    }\n    this.loaders[context.type] = undefined;\n    this.hls.trigger(Event.ERROR, {type: ErrorTypes.NETWORK_ERROR, details: ErrorDetails.FRAG_LOAD_TIMEOUT, fatal: false, frag: context.frag, networkDetails: networkDetails});\n  }\n\n  // data will be used for progressive parsing\n  loadprogress(stats, context, data, networkDetails=null) { // jshint ignore:line\n    let frag = context.frag;\n    frag.loaded = stats.loaded;\n    this.hls.trigger(Event.FRAG_LOAD_PROGRESS, {frag: frag, stats: stats, networkDetails: networkDetails});\n  }\n}\n\nexport default FragmentLoader;\n\n\n\n// WEBPACK FOOTER //\n// ./src/loader/fragment-loader.js","/*\n * Decrypt key Loader\n*/\n\nimport Event from '../events';\nimport EventHandler from '../event-handler';\nimport {ErrorTypes, ErrorDetails} from '../errors';\nimport {logger} from '../utils/logger';\n\nclass KeyLoader extends EventHandler {\n\n  constructor(hls) {\n    super(hls, Event.KEY_LOADING);\n    this.loaders = {};\n    this.decryptkey = null;\n    this.decrypturl = null;\n  }\n\n  destroy() {\n    for (let loaderName in this.loaders) {\n      let loader = this.loaders[loaderName];\n      if (loader) {\n        loader.destroy();\n      }\n    }\n    this.loaders = {};\n    EventHandler.prototype.destroy.call(this);\n  }\n\n  onKeyLoading(data) {\n    let frag = data.frag,\n        type = frag.type,\n        loader = this.loaders[type],\n        decryptdata = frag.decryptdata,\n        uri = decryptdata.uri;\n        // if uri is different from previous one or if decrypt key not retrieved yet\n      if (uri !== this.decrypturl || this.decryptkey === null) {\n        let config = this.hls.config;\n\n        if (loader) {\n          logger.warn(`abort previous key loader for type:${type}`);\n          loader.abort();\n        }\n        frag.loader = this.loaders[type] = new config.loader(config);\n        this.decrypturl = uri;\n        this.decryptkey = null;\n\n        let loaderContext, loaderConfig, loaderCallbacks;\n        loaderContext = { url : uri, frag : frag, responseType : 'arraybuffer'};\n        loaderConfig = { timeout : config.fragLoadingTimeOut, maxRetry : config.fragLoadingMaxRetry , retryDelay : config.fragLoadingRetryDelay, maxRetryDelay : config.fragLoadingMaxRetryTimeout};\n        loaderCallbacks = { onSuccess : this.loadsuccess.bind(this), onError :this.loaderror.bind(this), onTimeout : this.loadtimeout.bind(this)};\n        frag.loader.load(loaderContext,loaderConfig,loaderCallbacks);\n      } else if (this.decryptkey) {\n        // we already loaded this key, return it\n        decryptdata.key = this.decryptkey;\n        this.hls.trigger(Event.KEY_LOADED, {frag: frag});\n      }\n  }\n\n  loadsuccess(response, stats, context) {\n    let frag = context.frag;\n    this.decryptkey = frag.decryptdata.key = new Uint8Array(response.data);\n    // detach fragment loader on load success\n    frag.loader = undefined;\n    this.loaders[frag.type] = undefined;\n    this.hls.trigger(Event.KEY_LOADED, {frag: frag});\n  }\n\n  loaderror(response, context) {\n    let frag = context.frag,\n        loader = frag.loader;\n    if (loader) {\n      loader.abort();\n    }\n    this.loaders[context.type] = undefined;\n    this.hls.trigger(Event.ERROR, {type: ErrorTypes.NETWORK_ERROR, details: ErrorDetails.KEY_LOAD_ERROR, fatal: false, frag: frag, response: response});\n  }\n\n  loadtimeout(stats, context) {\n    let frag = context.frag,\n        loader = frag.loader;\n    if (loader) {\n      loader.abort();\n    }\n    this.loaders[context.type] = undefined;\n    this.hls.trigger(Event.ERROR, {type: ErrorTypes.NETWORK_ERROR, details: ErrorDetails.KEY_LOAD_TIMEOUT, fatal: false, frag: frag});\n  }\n}\n\nexport default KeyLoader;\n\n\n\n// WEBPACK FOOTER //\n// ./src/loader/key-loader.js","var BinarySearch = {\n    /**\n     * Searches for an item in an array which matches a certain condition.\n     * This requires the condition to only match one item in the array,\n     * and for the array to be ordered.\n     *\n     * @param {Array} list The array to search.\n     * @param {Function} comparisonFunction\n     *      Called and provided a candidate item as the first argument.\n     *      Should return:\n     *          > -1 if the item should be located at a lower index than the provided item.\n     *          > 1 if the item should be located at a higher index than the provided item.\n     *          > 0 if the item is the item you're looking for.\n     *\n     * @return {*} The object if it is found or null otherwise.\n     */\n    search: function(list, comparisonFunction) {\n        var minIndex = 0;\n        var maxIndex = list.length - 1;\n        var currentIndex = null;\n        var currentElement = null;\n     \n        while (minIndex <= maxIndex) {\n            currentIndex = (minIndex + maxIndex) / 2 | 0;\n            currentElement = list[currentIndex];\n            \n            var comparisonResult = comparisonFunction(currentElement);\n            if (comparisonResult > 0) {\n                minIndex = currentIndex + 1;\n            }\n            else if (comparisonResult < 0) {\n                maxIndex = currentIndex - 1;\n            }\n            else {\n                return currentElement;\n            }\n        }\n     \n        return null;\n    }\n};\n\nexport default BinarySearch;\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/binary-search.js","/**\n * Buffer Helper utils, providing methods dealing buffer length retrieval\n*/\n\nconst BufferHelper = {\n  isBuffered : function(media,position) {\n    if (media) {\n      let buffered = media.buffered;\n      for (let i = 0; i < buffered.length; i++) {\n        if (position >= buffered.start(i) && position <= buffered.end(i)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n\n  bufferInfo : function(media, pos,maxHoleDuration) {\n    // When the buffer can't be read load from the given position (buffer end determines load position)\n    const defaultBufferInfo = { len: 0, start: pos, end: pos, nextStart : undefined };\n    if (media) {\n      try {\n        const vbuffered = media.buffered;\n        const buffered = [];\n        for (let i = 0; i < vbuffered.length; i++) {\n          buffered.push({start: vbuffered.start(i), end: vbuffered.end(i)});\n        }\n        return this.bufferedInfo(buffered, pos, maxHoleDuration);\n      } catch(e) {\n        return defaultBufferInfo;\n      }\n    } else {\n      return defaultBufferInfo;\n    }\n  },\n\n  bufferedInfo : function(buffered,pos,maxHoleDuration) {\n    var buffered2 = [],\n        // bufferStart and bufferEnd are buffer boundaries around current video position\n        bufferLen,bufferStart, bufferEnd,bufferStartNext,i;\n    // sort on buffer.start/smaller end (IE does not always return sorted buffered range)\n    buffered.sort(function (a, b) {\n      var diff = a.start - b.start;\n      if (diff) {\n        return diff;\n      } else {\n        return b.end - a.end;\n      }\n    });\n    // there might be some small holes between buffer time range\n    // consider that holes smaller than maxHoleDuration are irrelevant and build another\n    // buffer time range representations that discards those holes\n    for (i = 0; i < buffered.length; i++) {\n      var buf2len = buffered2.length;\n      if(buf2len) {\n        var buf2end = buffered2[buf2len - 1].end;\n        // if small hole (value between 0 or maxHoleDuration ) or overlapping (negative)\n        if((buffered[i].start - buf2end) < maxHoleDuration) {\n          // merge overlapping time ranges\n          // update lastRange.end only if smaller than item.end\n          // e.g.  [ 1, 15] with  [ 2,8] => [ 1,15] (no need to modify lastRange.end)\n          // whereas [ 1, 8] with  [ 2,15] => [ 1,15] ( lastRange should switch from [1,8] to [1,15])\n          if(buffered[i].end > buf2end) {\n            buffered2[buf2len - 1].end = buffered[i].end;\n          }\n        } else {\n          // big hole\n          buffered2.push(buffered[i]);\n        }\n      } else {\n        // first value\n        buffered2.push(buffered[i]);\n      }\n    }\n    for (i = 0, bufferLen = 0, bufferStart = bufferEnd = pos; i < buffered2.length; i++) {\n      var start =  buffered2[i].start,\n          end = buffered2[i].end;\n      //logger.log('buf start/end:' + buffered.start(i) + '/' + buffered.end(i));\n      if ((pos + maxHoleDuration) >= start && pos < end) {\n        // play position is inside this buffer TimeRange, retrieve end of buffer position and buffer length\n        bufferStart = start;\n        bufferEnd = end;\n        bufferLen = bufferEnd - pos;\n      } else if ((pos + maxHoleDuration) < start) {\n        bufferStartNext = start;\n        break;\n      }\n    }\n    return {len: bufferLen, start: bufferStart || 0, end: bufferEnd || 0, nextStart : bufferStartNext};\n  }\n};\n\nexport default BufferHelper;\n\n\n\n// WEBPACK FOOTER //\n// ./src/helper/buffer-helper.js","import Event from '../events';\nimport DemuxerInline from '../demux/demuxer-inline';\nimport {logger} from '../utils/logger';\nimport {ErrorTypes, ErrorDetails} from '../errors';\nimport EventEmitter from 'events';\nimport work from 'webworkify-webpack';\n\nclass Demuxer {\n\n  constructor(hls, id) {\n    this.hls = hls;\n    this.id = id;\n    // observer setup\n    const observer = this.observer = new EventEmitter();\n    const config = hls.config;\n    observer.trigger = function trigger (event, ...data) {\n      observer.emit(event, event, ...data);\n    };\n\n    observer.off = function off (event, ...data) {\n      observer.removeListener(event, ...data);\n    };\n\n    var forwardMessage = function(ev,data) {\n      data = data || {};\n      data.frag = this.frag;\n      data.id = this.id;\n      hls.trigger(ev,data);\n    }.bind(this);\n\n    // forward events to main thread\n    observer.on(Event.FRAG_DECRYPTED, forwardMessage);\n    observer.on(Event.FRAG_PARSING_INIT_SEGMENT, forwardMessage);\n    observer.on(Event.FRAG_PARSING_DATA, forwardMessage);\n    observer.on(Event.FRAG_PARSED, forwardMessage);\n    observer.on(Event.ERROR, forwardMessage);\n    observer.on(Event.FRAG_PARSING_METADATA, forwardMessage);\n    observer.on(Event.FRAG_PARSING_USERDATA, forwardMessage);\n    observer.on(Event.INIT_PTS_FOUND, forwardMessage);\n\n    const typeSupported = {\n      mp4 : MediaSource.isTypeSupported('video/mp4'),\n      mpeg: MediaSource.isTypeSupported('audio/mpeg'),\n      mp3: MediaSource.isTypeSupported('audio/mp4; codecs=\"mp3\"')\n    };\n    // navigator.vendor is not always available in Web Worker\n    // refer to https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/navigator\n    const vendor = navigator.vendor;\n    if (config.enableWorker && (typeof(Worker) !== 'undefined')) {\n        logger.log('demuxing in webworker');\n        let w;\n        try {\n          w = this.w = work(require.resolve('../demux/demuxer-worker.js'));\n          this.onwmsg = this.onWorkerMessage.bind(this);\n          w.addEventListener('message', this.onwmsg);\n          w.onerror = function(event) { hls.trigger(Event.ERROR, {type: ErrorTypes.OTHER_ERROR, details: ErrorDetails.INTERNAL_EXCEPTION, fatal: true, event : 'demuxerWorker', err : { message : event.message + ' (' + event.filename + ':' + event.lineno + ')' }});};\n          w.postMessage({cmd: 'init', typeSupported : typeSupported, vendor : vendor, id : id, config: JSON.stringify(config)});\n        } catch(err) {\n          logger.error('error while initializing DemuxerWorker, fallback on DemuxerInline');\n          if (w) {\n            // revoke the Object URL that was used to create demuxer worker, so as not to leak it\n            URL.revokeObjectURL(w.objectURL);\n          }\n          this.demuxer = new DemuxerInline(observer,typeSupported,config,vendor);\n          this.w = undefined;\n        }\n      } else {\n        this.demuxer = new DemuxerInline(observer,typeSupported,config, vendor);\n      }\n  }\n\n  destroy() {\n    let w = this.w;\n    if (w) {\n      w.removeEventListener('message', this.onwmsg);\n      w.terminate();\n      this.w = null;\n    } else {\n      let demuxer = this.demuxer;\n      if (demuxer) {\n        demuxer.destroy();\n        this.demuxer = null;\n      }\n    }\n    let observer = this.observer;\n    if (observer) {\n      observer.removeAllListeners();\n      this.observer = null;\n    }\n  }\n\n  push(data, initSegment, audioCodec, videoCodec, frag, duration,accurateTimeOffset,defaultInitPTS) {\n    const w = this.w;\n    const timeOffset = !isNaN(frag.startDTS) ? frag.startDTS  : frag.start;\n    const decryptdata = frag.decryptdata;\n    const lastFrag = this.frag;\n    const discontinuity = !(lastFrag && (frag.cc === lastFrag.cc));\n    const trackSwitch = !(lastFrag && (frag.level === lastFrag.level));\n    const nextSN = lastFrag && (frag.sn === (lastFrag.sn+1));\n    const contiguous = !trackSwitch && nextSN;\n    if (discontinuity) {\n      logger.log(`${this.id}:discontinuity detected`);\n    }\n    if (trackSwitch) {\n      logger.log(`${this.id}:switch detected`);\n    }\n    this.frag = frag;\n    if (w) {\n      // post fragment payload as transferable objects (no copy)\n      w.postMessage({cmd: 'demux', data, decryptdata, initSegment, audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset,defaultInitPTS}, [data]);\n    } else {\n      let demuxer = this.demuxer;\n      if (demuxer) {\n        demuxer.push(data, decryptdata, initSegment, audioCodec, videoCodec, timeOffset, discontinuity, trackSwitch, contiguous, duration, accurateTimeOffset,defaultInitPTS);\n      }\n    }\n  }\n\n  onWorkerMessage(ev) {\n    let data = ev.data,\n        hls = this.hls;\n    //console.log('onWorkerMessage:' + data.event);\n    switch(data.event) {\n      case 'init':\n        // revoke the Object URL that was used to create demuxer worker, so as not to leak it\n        URL.revokeObjectURL(this.w.objectURL);\n        break;\n      // special case for FRAG_PARSING_DATA: data1 and data2 are transferable objects\n      case Event.FRAG_PARSING_DATA:\n        data.data.data1 = new Uint8Array(data.data1);\n        if (data.data2) {\n          data.data.data2 = new Uint8Array(data.data2);\n        }\n        /* falls through */\n      default:\n        data.data = data.data || {};\n        data.data.frag = this.frag;\n        data.data.id = this.id;\n        hls.trigger(data.event, data.data);\n        break;\n    }\n  }\n}\n\nexport default Demuxer;\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/demux/demuxer.js","/**\n * Level Helper class, providing methods dealing with playlist sliding and drift\n*/\n\nimport {logger} from '../utils/logger';\n\nexport function updatePTS(fragments,fromIdx, toIdx) {\n  var fragFrom = fragments[fromIdx], fragTo = fragments[toIdx], fragToPTS = fragTo.startPTS;\n  // if we know startPTS[toIdx]\n  if (!isNaN(fragToPTS)) {\n    // update fragment duration.\n    // it helps to fix drifts between playlist reported duration and fragment real duration\n    if (toIdx > fromIdx) {\n      fragFrom.duration = fragToPTS - fragFrom.start;\n      if (fragFrom.duration < 0) {\n        logger.warn(`negative duration computed for frag ${fragFrom.sn},level ${fragFrom.level}, there should be some duration drift between playlist and fragment!`);\n      }\n    } else {\n      fragTo.duration = fragFrom.start - fragToPTS;\n      if (fragTo.duration < 0) {\n        logger.warn(`negative duration computed for frag ${fragTo.sn},level ${fragTo.level}, there should be some duration drift between playlist and fragment!`);\n      }\n    }\n  } else {\n    // we dont know startPTS[toIdx]\n    if (toIdx > fromIdx) {\n      fragTo.start = fragFrom.start + fragFrom.duration;\n    } else {\n      fragTo.start = Math.max(fragFrom.start - fragTo.duration, 0);\n    }\n  }\n}\n\nexport function updateFragPTSDTS(details,frag,startPTS,endPTS,startDTS,endDTS) {\n  // update frag PTS/DTS\n  if (!isNaN(frag.startPTS)) {\n    // delta PTS between audio and video\n    let deltaPTS = Math.abs(frag.startPTS - startPTS);\n    if (isNaN(frag.deltaPTS)) {\n      frag.deltaPTS = deltaPTS;\n    } else {\n      frag.deltaPTS = Math.max(deltaPTS, frag.deltaPTS);\n    }\n    startPTS = Math.min(startPTS, frag.startPTS);\n    endPTS = Math.max(endPTS, frag.endPTS);\n    startDTS = Math.min(startDTS, frag.startDTS);\n    endDTS = Math.max(endDTS, frag.endDTS);\n  }\n\n  const drift = startPTS - frag.start;\n  frag.start = frag.startPTS = startPTS;\n  frag.endPTS = endPTS;\n  frag.startDTS = startDTS;\n  frag.endDTS = endDTS;\n  frag.duration = endPTS - startPTS;\n\n  const sn = frag.sn;\n  // exit if sn out of range\n  if (!details || sn < details.startSN || sn > details.endSN) {\n    return 0;\n  }\n  var fragIdx, fragments, i;\n  fragIdx = sn - details.startSN;\n  fragments = details.fragments;\n  frag = fragments[fragIdx];\n  // adjust fragment PTS/duration from seqnum-1 to frag 0\n  for (i = fragIdx; i > 0; i--) {\n    updatePTS(fragments, i, i - 1);\n  }\n\n  // adjust fragment PTS/duration from seqnum to last frag\n  for (i = fragIdx; i < fragments.length - 1; i++) {\n    updatePTS(fragments, i, i + 1);\n  }\n  details.PTSKnown = true;\n  //logger.log(`                                            frag start/end:${startPTS.toFixed(3)}/${endPTS.toFixed(3)}`);\n\n  return drift;\n}\n\nexport function mergeDetails(oldDetails,newDetails) {\n    var start = Math.max(oldDetails.startSN,newDetails.startSN)-newDetails.startSN,\n        end = Math.min(oldDetails.endSN,newDetails.endSN)-newDetails.startSN,\n        delta = newDetails.startSN - oldDetails.startSN,\n        oldfragments = oldDetails.fragments,\n        newfragments = newDetails.fragments,\n        ccOffset =0,\n        PTSFrag;\n\n    // check if old/new playlists have fragments in common\n    if ( end < start) {\n      newDetails.PTSKnown = false;\n      return;\n    }\n    // loop through overlapping SN and update startPTS , cc, and duration if any found\n    for(var i = start ; i <= end ; i++) {\n      var oldFrag = oldfragments[delta+i],\n          newFrag = newfragments[i];\n      if (newFrag && oldFrag) {\n        ccOffset = oldFrag.cc - newFrag.cc;\n        if (!isNaN(oldFrag.startPTS)) {\n          newFrag.start = newFrag.startPTS = oldFrag.startPTS;\n          newFrag.endPTS = oldFrag.endPTS;\n          newFrag.duration = oldFrag.duration;\n          newFrag.backtracked = oldFrag.backtracked;\n          newFrag.dropped = oldFrag.dropped;\n          PTSFrag = newFrag;\n        }\n      }\n    }\n\n    if(ccOffset) {\n      logger.log(`discontinuity sliding from playlist, take drift into account`);\n      for(i = 0 ; i < newfragments.length ; i++) {\n        newfragments[i].cc += ccOffset;\n      }\n    }\n\n    // if at least one fragment contains PTS info, recompute PTS information for all fragments\n    if(PTSFrag) {\n      updateFragPTSDTS(newDetails,PTSFrag,PTSFrag.startPTS,PTSFrag.endPTS,PTSFrag.startDTS,PTSFrag.endDTS);\n    } else {\n      // ensure that delta is within oldfragments range\n      // also adjust sliding in case delta is 0 (we could have old=[50-60] and new=old=[50-61])\n      // in that case we also need to adjust start offset of all fragments\n      if (delta >= 0 && delta < oldfragments.length) {\n        // adjust start by sliding offset\n        var sliding = oldfragments[delta].start;\n        for(i = 0 ; i < newfragments.length ; i++) {\n          newfragments[i].start += sliding;\n        }\n      }\n    }\n    // if we are here, it means we have fragments overlapping between\n    // old and new level. reliable PTS info is thus relying on old level\n    newDetails.PTSKnown = oldDetails.PTSKnown;\n  }\n\n\n\n// WEBPACK FOOTER //\n// ./src/helper/level-helper.js","/**\n *  TimeRanges to string helper\n */\n\nconst TimeRanges = {\n  toString : function(r) {\n    var log = '', len = r.length;\n    for (var i=0; i<len; i++) {\n      log += '[' + r.start(i).toFixed(3) + ',' + r.end(i).toFixed(3) + ']';\n    }\n    return log;\n  }\n};\n\nexport default TimeRanges;\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/timeRanges.js","import BinarySearch from './binary-search';\nimport {logger} from '../utils/logger';\n\nexport function findFirstFragWithCC(fragments, cc) {\n  let firstFrag = null;\n\n  for (let i = 0; i < fragments.length; i += 1) {\n    const currentFrag = fragments[i];\n    if (currentFrag && currentFrag.cc === cc) {\n      firstFrag = currentFrag;\n      break;\n    }\n  }\n\n  return firstFrag;\n}\n\nexport function findFragWithCC(fragments, CC) {\n  return BinarySearch.search(fragments, (candidate) => {\n     if (candidate.cc < CC) {\n        return 1;\n      } else if (candidate.cc > CC) {\n        return -1;\n     } else {\n        return 0;\n     }\n  });\n}\n\nexport function shouldAlignOnDiscontinuities(lastFrag, lastLevel, details) {\n  let shouldAlign = false;\n  if (lastLevel && lastLevel.details && details) {\n    if (details.endCC > details.startCC || (lastFrag && lastFrag.cc < details.startCC)) {\n      shouldAlign = true;\n    }\n  }\n  return shouldAlign;\n}\n\n// Find the first frag in the previous level which matches the CC of the first frag of the new level\nexport function findDiscontinuousReferenceFrag(prevDetails, curDetails) {\n  const prevFrags = prevDetails.fragments;\n  const curFrags = curDetails.fragments;\n\n  if (!curFrags.length || !prevFrags.length) {\n    logger.log('No fragments to align');\n    return;\n  }\n\n  const prevStartFrag = findFirstFragWithCC(prevFrags, curFrags[0].cc);\n\n  if (!prevStartFrag || (prevStartFrag && !prevStartFrag.startPTS)) {\n    logger.log('No frag in previous level to align on');\n    return;\n  }\n\n  return prevStartFrag;\n}\n\nexport function adjustPtsByReferenceFrag(referenceFrag, details) {\n  if (!referenceFrag) {\n    return;\n  }\n\n  details.fragments.forEach((frag, index) => {\n    if (frag) {\n      frag.duration = referenceFrag.duration;\n      frag.end = frag.endPTS = referenceFrag.endPTS + (frag.duration * index);\n      frag.start = frag.startPTS = referenceFrag.startPTS + frag.start;\n    }\n  });\n  details.PTSKnown = true;\n}\n\n// If a change in CC is detected, the PTS can no longer be relied upon\n// Attempt to align the level by using the last level - find the last frag matching the current CC and use it's PTS\n// as a reference\nexport function alignDiscontinuities(lastFrag, lastLevel, details) {\n  if (shouldAlignOnDiscontinuities(lastFrag, lastLevel, details)) {\n    logger.log('Adjusting PTS using last level due to CC increase within current level');\n    const referenceFrag = findDiscontinuousReferenceFrag(lastLevel.details, details);\n    adjustPtsByReferenceFrag(referenceFrag, details);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/discontinuities.js","/*\n * Stream Controller\n*/\n\nimport BinarySearch from '../utils/binary-search';\nimport BufferHelper from '../helper/buffer-helper';\nimport Demuxer from '../demux/demuxer';\nimport Event from '../events';\nimport EventHandler from '../event-handler';\nimport * as LevelHelper from '../helper/level-helper';import TimeRanges from '../utils/timeRanges';\nimport {ErrorTypes, ErrorDetails} from '../errors';\nimport {logger} from '../utils/logger';\nimport { alignDiscontinuities, findFirstFragWithCC } from '../utils/discontinuities';\n\nconst State = {\n  STOPPED : 'STOPPED',\n  IDLE : 'IDLE',\n  KEY_LOADING : 'KEY_LOADING',\n  FRAG_LOADING : 'FRAG_LOADING',\n  FRAG_LOADING_WAITING_RETRY : 'FRAG_LOADING_WAITING_RETRY',\n  WAITING_LEVEL : 'WAITING_LEVEL',\n  PARSING : 'PARSING',\n  PARSED : 'PARSED',\n  BUFFER_FLUSHING : 'BUFFER_FLUSHING',\n  ENDED : 'ENDED',\n  ERROR : 'ERROR'\n};\n\nclass StreamController extends EventHandler {\n\n  constructor(hls) {\n    super(hls,\n      Event.MEDIA_ATTACHED,\n      Event.MEDIA_DETACHING,\n      Event.MANIFEST_LOADING,\n      Event.MANIFEST_PARSED,\n      Event.LEVEL_LOADED,\n      Event.KEY_LOADED,\n      Event.FRAG_LOADED,\n      Event.FRAG_LOAD_EMERGENCY_ABORTED,\n      Event.FRAG_PARSING_INIT_SEGMENT,\n      Event.FRAG_PARSING_DATA,\n      Event.FRAG_PARSED,\n      Event.ERROR,\n      Event.AUDIO_TRACK_SWITCHING,\n      Event.AUDIO_TRACK_SWITCHED,\n      Event.BUFFER_CREATED,\n      Event.BUFFER_APPENDED,\n      Event.BUFFER_FLUSHED,\n      Event.LEVEL_REMOVED\n    );\n\n    this.config = hls.config;\n    this.audioCodecSwap = false;\n    this.ticks = 0;\n    this._state = State.STOPPED;\n    this.ontick = this.tick.bind(this);\n  }\n\n  destroy() {\n    this.stopLoad();\n    if (this.timer) {\n      clearInterval(this.timer);\n      this.timer = null;\n    }\n    EventHandler.prototype.destroy.call(this);\n    this.state = State.STOPPED;\n  }\n\n  startLoad(startPosition) {\n    if (this.levels) {\n      let lastCurrentTime = this.lastCurrentTime, hls = this.hls;\n      this.stopLoad();\n      if (!this.timer) {\n        this.timer = setInterval(this.ontick, 100);\n      }\n      this.level = -1;\n      this.fragLoadError = 0;\n      if (!this.startFragRequested) {\n        // determine load level\n        let startLevel = hls.startLevel;\n        if (startLevel === -1) {\n          // -1 : guess start Level by doing a bitrate test by loading first fragment of lowest quality level\n          startLevel = 0;\n          this.bitrateTest = true;\n        }\n        // set new level to playlist loader : this will trigger start level load\n        // hls.nextLoadLevel remains until it is set to a new value or until a new frag is successfully loaded\n        this.level = hls.nextLoadLevel = startLevel;\n        this.loadedmetadata = false;\n      }\n      // if startPosition undefined but lastCurrentTime set, set startPosition to last currentTime\n      if (lastCurrentTime > 0 && startPosition === -1) {\n        logger.log(`override startPosition with lastCurrentTime @${lastCurrentTime.toFixed(3)}`);\n        startPosition = lastCurrentTime;\n      }\n      this.state = State.IDLE;\n      this.nextLoadPosition = this.startPosition = this.lastCurrentTime = startPosition;\n      this.tick();\n    } else {\n      this.forceStartLoad = true;\n      this.state = State.STOPPED;\n    }\n  }\n\n  stopLoad() {\n    var frag = this.fragCurrent;\n    if (frag) {\n      if (frag.loader) {\n        frag.loader.abort();\n      }\n      this.fragCurrent = null;\n    }\n    this.fragPrevious = null;\n    if (this.demuxer) {\n      this.demuxer.destroy();\n      this.demuxer = null;\n    }\n    this.state = State.STOPPED;\n    this.forceStartLoad = false;\n  }\n\n  tick() {\n    this.ticks++;\n    if (this.ticks === 1) {\n      this.doTick();\n      if (this.ticks > 1) {\n        setTimeout(this.tick, 1);\n      }\n      this.ticks = 0;\n    }\n  }\n\n  doTick() {\n    switch(this.state) {\n      case State.ERROR:\n        //don't do anything in error state to avoid breaking further ...\n        break;\n      case State.BUFFER_FLUSHING:\n      // in buffer flushing state, reset fragLoadError counter\n        this.fragLoadError = 0;\n        break;\n      case State.IDLE:\n        this._doTickIdle();\n        break;\n      case State.WAITING_LEVEL:\n        var level = this.levels[this.level];\n        // check if playlist is already loaded\n        if (level && level.details) {\n          this.state = State.IDLE;\n        }\n        break;\n      case State.FRAG_LOADING_WAITING_RETRY:\n        var now = performance.now();\n        var retryDate = this.retryDate;\n        // if current time is gt than retryDate, or if media seeking let's switch to IDLE state to retry loading\n        if(!retryDate || (now >= retryDate) || (this.media && this.media.seeking)) {\n          logger.log(`mediaController: retryDate reached, switch back to IDLE state`);\n          this.state = State.IDLE;\n        }\n        break;\n      case State.ERROR:\n      case State.STOPPED:\n      case State.FRAG_LOADING:\n      case State.PARSING:\n      case State.PARSED:\n      case State.ENDED:\n        break;\n      default:\n        break;\n    }\n    // check buffer\n    this._checkBuffer();\n    // check/update current fragment\n    this._checkFragmentChanged();\n  }\n\n  // Ironically the \"idle\" state is the on we do the most logic in it seems ....\n  // NOTE: Maybe we could rather schedule a check for buffer length after half of the currently\n  //       played segment, or on pause/play/seek instead of naively checking every 100ms?\n  _doTickIdle() {\n    const hls = this.hls,\n          config = hls.config,\n          media = this.media;\n\n    // if video not attached AND\n    // start fragment already requested OR start frag prefetch disable\n    // exit loop\n    // => if start level loaded and media not attached but start frag prefetch is enabled and start frag not requested yet, we will not exit loop\n    if (this.levelLastLoaded !== undefined && !media &&\n      (this.startFragRequested || !config.startFragPrefetch)) {\n      return;\n    }\n\n    // if we have not yet loaded any fragment, start loading from start position\n    let pos = 0;\n    if (this.loadedmetadata) {\n      pos = media.currentTime;\n    } else if (this.nextLoadPosition) {\n      pos = this.nextLoadPosition;\n    }\n\n    // determine next load level\n    let level = hls.nextLoadLevel,\n        levelInfo = this.levels[level];\n\n    if (!levelInfo) {\n      return;\n    }\n\n    let levelBitrate = levelInfo.bitrate,\n        maxBufLen;\n\n    // compute max Buffer Length that we could get from this load level, based on level bitrate. don't buffer more than 60 MB and more than 30s\n    if (levelBitrate) {\n      maxBufLen = Math.max(8 * config.maxBufferSize / levelBitrate, config.maxBufferLength);\n    } else {\n      maxBufLen = config.maxBufferLength;\n    }\n    maxBufLen = Math.min(maxBufLen, config.maxMaxBufferLength);\n\n    // determine next candidate fragment to be loaded, based on current position and end of buffer position\n    // ensure up to `config.maxMaxBufferLength` of buffer upfront\n\n    const bufferInfo = BufferHelper.bufferInfo(this.mediaBuffer ? this.mediaBuffer : media, pos, config.maxBufferHole),\n          bufferLen = bufferInfo.len;\n    // Stay idle if we are still with buffer margins\n    if (bufferLen >= maxBufLen) {\n      return;\n    }\n\n    // if buffer length is less than maxBufLen try to load a new fragment ...\n    logger.trace(`buffer length of ${bufferLen.toFixed(3)} is below max of ${maxBufLen.toFixed(3)}. checking for more payload ...`);\n\n    // set next load level : this will trigger a playlist load if needed\n    this.level = hls.nextLoadLevel = level;\n\n    const levelDetails = levelInfo.details;\n    // if level info not retrieved yet, switch state and wait for level retrieval\n    // if live playlist, ensure that new playlist has been refreshed to avoid loading/try to load\n    // a useless and outdated fragment (that might even introduce load error if it is already out of the live playlist)\n    if (typeof levelDetails === 'undefined' || levelDetails.live && this.levelLastLoaded !== level) {\n      this.state = State.WAITING_LEVEL;\n      return;\n    }\n\n    // we just got done loading the final fragment, and currentPos is buffered, and there is no other buffered range after ...\n    // rationale is that in case there are any buffered rangesafter, it means that there are unbuffered portion in between\n    // so we should not switch to ENDED in that case, to be able to buffer themx\n    let fragPrevious = this.fragPrevious;\n    if (!levelDetails.live && fragPrevious && fragPrevious.sn === levelDetails.endSN && bufferLen && !bufferInfo.nextStart) {\n        // fragPrevious is last fragment. retrieve level duration using last frag start offset + duration\n        // real duration might be lower than initial duration if there are drifts between real frag duration and playlist signaling\n        const duration = Math.min(media.duration,fragPrevious.start + fragPrevious.duration);\n        // if everything (almost) til the end is buffered, let's signal eos\n        // we don't compare exactly media.duration === bufferInfo.end as there could be some subtle media duration difference (audio/video offsets...)\n        // tolerate up to one frag duration to cope with these cases.\n        // also cope with almost zero last frag duration (max last frag duration with 200ms) refer to https://github.com/video-dev/hls.js/pull/657\n        if (duration - Math.max(bufferInfo.end,fragPrevious.start) <= Math.max(0.2,fragPrevious.duration)) {\n          // Finalize the media stream\n          let data = {};\n          if (this.altAudio) {\n            data.type = 'video';\n          }\n          this.hls.trigger(Event.BUFFER_EOS,data);\n          this.state = State.ENDED;\n          return;\n      }\n    }\n\n    // if we have the levelDetails for the selected variant, lets continue enrichen our stream (load keys/fragments or trigger EOS, etc..)\n    this._fetchPayloadOrEos(pos, bufferInfo, levelDetails);\n  }\n\n  _fetchPayloadOrEos(pos, bufferInfo, levelDetails) {\n    const fragPrevious = this.fragPrevious,\n          level = this.level,\n          fragments = levelDetails.fragments,\n          fragLen = fragments.length;\n\n    // empty playlist\n    if (fragLen === 0) {\n      return;\n    }\n\n    // find fragment index, contiguous with end of buffer position\n    let start = fragments[0].start,\n        end = fragments[fragLen-1].start + fragments[fragLen-1].duration,\n        bufferEnd = bufferInfo.end,\n        frag;\n\n    if (levelDetails.initSegment && !levelDetails.initSegment.data) {\n      frag = levelDetails.initSegment;\n    } else {\n      // in case of live playlist we need to ensure that requested position is not located before playlist start\n      if (levelDetails.live) {\n        let initialLiveManifestSize = this.config.initialLiveManifestSize;\n        if (fragLen < initialLiveManifestSize) {\n          logger.warn(`Can not start playback of a level, reason: not enough fragments ${fragLen} < ${initialLiveManifestSize}`);\n          return;\n        }\n\n        frag = this._ensureFragmentAtLivePoint(levelDetails, bufferEnd, start, end, fragPrevious, fragments, fragLen);\n        // if it explicitely returns null don't load any fragment and exit function now\n        if (frag === null) {\n          return;\n        }\n\n      } else {\n        // VoD playlist: if bufferEnd before start of playlist, load first fragment\n        if (bufferEnd < start) {\n          frag = fragments[0];\n        }\n      }\n    }\n    if (!frag) {\n      frag = this._findFragment(start, fragPrevious, fragLen, fragments, bufferEnd, end, levelDetails);\n    }\n    if(frag) {\n      this._loadFragmentOrKey(frag, level, levelDetails, pos, bufferEnd);\n    }\n    return;\n  }\n\n  _ensureFragmentAtLivePoint(levelDetails, bufferEnd, start, end, fragPrevious, fragments, fragLen) {\n    const config = this.hls.config, media = this.media;\n\n    let frag;\n\n    // check if requested position is within seekable boundaries :\n    //logger.log(`start/pos/bufEnd/seeking:${start.toFixed(3)}/${pos.toFixed(3)}/${bufferEnd.toFixed(3)}/${this.media.seeking}`);\n    let maxLatency = config.liveMaxLatencyDuration !== undefined ? config.liveMaxLatencyDuration : config.liveMaxLatencyDurationCount*levelDetails.targetduration;\n\n    if (bufferEnd < Math.max(start-config.maxFragLookUpTolerance, end - maxLatency)) {\n        let liveSyncPosition = this.liveSyncPosition = this.computeLivePosition(start, levelDetails);\n        logger.log(`buffer end: ${bufferEnd.toFixed(3)} is located too far from the end of live sliding playlist, reset currentTime to : ${liveSyncPosition.toFixed(3)}`);\n        bufferEnd = liveSyncPosition;\n        if (media && media.readyState && media.duration > liveSyncPosition) {\n          media.currentTime = liveSyncPosition;\n        }\n        this.nextLoadPosition = liveSyncPosition;\n    }\n\n    // if end of buffer greater than live edge, don't load any fragment\n    // this could happen if live playlist intermittently slides in the past.\n    // level 1 loaded [182580161,182580167]\n    // level 1 loaded [182580162,182580169]\n    // Loading 182580168 of [182580162 ,182580169],level 1 ..\n    // Loading 182580169 of [182580162 ,182580169],level 1 ..\n    // level 1 loaded [182580162,182580168] <============= here we should have bufferEnd > end. in that case break to avoid reloading 182580168\n    // level 1 loaded [182580164,182580171]\n    //\n    // don't return null in case media not loaded yet (readystate === 0)\n    if (levelDetails.PTSKnown && bufferEnd > end && media && media.readyState) {\n      return null;\n    }\n\n    if (this.startFragRequested && !levelDetails.PTSKnown) {\n      /* we are switching level on live playlist, but we don't have any PTS info for that quality level ...\n         try to load frag matching with next SN.\n         even if SN are not synchronized between playlists, loading this frag will help us\n         compute playlist sliding and find the right one after in case it was not the right consecutive one */\n      if (fragPrevious) {\n        const targetSN = fragPrevious.sn + 1;\n        var targetCC = fragPrevious.cc + 1;\n        if (targetSN >= levelDetails.startSN && targetSN <= levelDetails.endSN) {\n          frag = fragments[targetSN - levelDetails.startSN];\n          logger.log(`live playlist, switching playlist, load frag with next SN: ${frag.sn}`);\n        } else if (targetCC >= levelDetails.startCC && targetCC <= levelDetails.endCC) {\n          frag = findFirstFragWithCC(fragments, targetCC);\n          logger.log(`Live playlist switch, cannot find frag with target SN. Loading frag with next CC: ${ frag.cc }`);\n        }\n        // next frag SN not available (or not with same continuity counter)\n        // look for a frag sharing the same CC\n        if (!frag) {\n          frag = BinarySearch.search(fragments, function(frag) {\n            return fragPrevious.cc - frag.cc;\n          });\n          if (frag) {\n            logger.log(`live playlist, switching playlist, load frag with same CC: ${frag.sn}`);\n          }\n        }\n      }\n      if (!frag) {\n        /* we have no idea about which fragment should be loaded.\n           so let's load mid fragment. it will help computing playlist sliding and find the right one\n        */\n        frag = fragments[Math.min(fragLen - 1, Math.round(fragLen / 2))];\n        logger.log(`live playlist, switching playlist, unknown, load middle frag : ${frag.sn}`);\n      }\n    }\n    return frag;\n  }\n\n  _findFragment(start, fragPrevious, fragLen, fragments, bufferEnd, end, levelDetails) {\n    const config = this.hls.config;\n    let frag;\n    let foundFrag;\n    let maxFragLookUpTolerance = config.maxFragLookUpTolerance;\n    const fragNext = fragPrevious ? fragments[fragPrevious.sn - fragments[0].sn + 1] : undefined;\n    let fragmentWithinToleranceTest = (candidate) => {\n      // offset should be within fragment boundary - config.maxFragLookUpTolerance\n      // this is to cope with situations like\n      // bufferEnd = 9.991\n      // frag[Ø] : [0,10]\n      // frag[1] : [10,20]\n      // bufferEnd is within frag[0] range ... although what we are expecting is to return frag[1] here\n      //              frag start               frag start+duration\n      //                  |-----------------------------|\n      //              <--->                         <--->\n      //  ...--------><-----------------------------><---------....\n      // previous frag         matching fragment         next frag\n      //  return -1             return 0                 return 1\n      //logger.log(`level/sn/start/end/bufEnd:${level}/${candidate.sn}/${candidate.start}/${(candidate.start+candidate.duration)}/${bufferEnd}`);\n      // Set the lookup tolerance to be small enough to detect the current segment - ensures we don't skip over very small segments\n      let candidateLookupTolerance = Math.min(maxFragLookUpTolerance, candidate.duration);\n      if (candidate.start + candidate.duration - candidateLookupTolerance <= bufferEnd) {\n        return 1;\n      } // if maxFragLookUpTolerance will have negative value then don't return -1 for first element\n      else if (candidate.start - candidateLookupTolerance > bufferEnd && candidate.start) {\n        return -1;\n      }\n      return 0;\n    };\n\n    if (bufferEnd < end) {\n      if (bufferEnd > end - maxFragLookUpTolerance) {\n        maxFragLookUpTolerance = 0;\n      }\n      // Prefer the next fragment if it's within tolerance\n      if (fragNext && !fragmentWithinToleranceTest(fragNext)) {\n        foundFrag = fragNext;\n      } else {\n        foundFrag = BinarySearch.search(fragments, fragmentWithinToleranceTest);\n      }\n    } else {\n      // reach end of playlist\n      foundFrag = fragments[fragLen-1];\n    }\n    if (foundFrag) {\n      frag = foundFrag;\n      const curSNIdx = frag.sn - levelDetails.startSN;\n      const sameLevel = fragPrevious && frag.level === fragPrevious.level;\n      const prevFrag = fragments[curSNIdx - 1];\n      const nextFrag = fragments[curSNIdx + 1];\n      //logger.log('find SN matching with pos:' +  bufferEnd + ':' + frag.sn);\n      if (fragPrevious && frag.sn === fragPrevious.sn) {\n        if (sameLevel && !frag.backtracked) {\n          if (frag.sn < levelDetails.endSN) {\n            let deltaPTS = fragPrevious.deltaPTS;\n            // if there is a significant delta between audio and video, larger than max allowed hole,\n            // and if previous remuxed fragment did not start with a keyframe. (fragPrevious.dropped)\n            // let's try to load previous fragment again to get last keyframe\n            // then we will reload again current fragment (that way we should be able to fill the buffer hole ...)\n            if (deltaPTS && deltaPTS > config.maxBufferHole && fragPrevious.dropped && curSNIdx && !frag.backtracked) {\n              frag = prevFrag;\n              logger.warn(`SN just loaded, with large PTS gap between audio and video, maybe frag is not starting with a keyframe ? load previous one to try to overcome this`);\n              // decrement previous frag load counter to avoid frag loop loading error when next fragment will get reloaded\n              fragPrevious.loadCounter--;\n            } else {\n              frag = nextFrag;\n              logger.log(`SN just loaded, load next one: ${frag.sn}`);\n            }\n          } else {\n            frag = null;\n          }\n        } else if (frag.backtracked) {\n          // Only backtrack a max of 1 consecutive fragment to prevent sliding back too far when little or no frags start with keyframes\n          if (nextFrag && nextFrag.backtracked) {\n            logger.warn(`Already backtracked from fragment ${nextFrag.sn}, will not backtrack to fragment ${frag.sn}. Loading fragment ${nextFrag.sn}`);\n            frag = nextFrag;\n          } else {\n            // If a fragment has dropped frames and it's in a same level/sequence, load the previous fragment to try and find the keyframe\n            // Reset the dropped count now since it won't be reset until we parse the fragment again, which prevents infinite backtracking on the same segment\n            logger.warn('Loaded fragment with dropped frames, backtracking 1 segment to find a keyframe');\n            frag.dropped = 0;\n            if (prevFrag) {\n              if (prevFrag.loadCounter) {\n                prevFrag.loadCounter--;\n              }\n              frag = prevFrag;\n              frag.backtracked = true;\n            } else if (curSNIdx) {\n              // can't backtrack on very first fragment\n              frag = null;\n            }\n          }\n        }\n      }\n    }\n    return frag;\n  }\n\n  _loadFragmentOrKey(frag, level, levelDetails, pos, bufferEnd) {\n    const hls = this.hls,\n          config = hls.config;\n\n    //logger.log('loading frag ' + i +',pos/bufEnd:' + pos.toFixed(3) + '/' + bufferEnd.toFixed(3));\n    if ((frag.decryptdata && frag.decryptdata.uri != null) && (frag.decryptdata.key == null)) {\n      logger.log(`Loading key for ${frag.sn} of [${levelDetails.startSN} ,${levelDetails.endSN}],level ${level}`);\n      this.state = State.KEY_LOADING;\n      hls.trigger(Event.KEY_LOADING, {frag: frag});\n    } else {\n      logger.log(`Loading ${frag.sn} of [${levelDetails.startSN} ,${levelDetails.endSN}],level ${level}, currentTime:${pos.toFixed(3)},bufferEnd:${bufferEnd}`);\n      // ensure that we are not reloading the same fragments in loop ...\n      if (this.fragLoadIdx !== undefined) {\n        this.fragLoadIdx++;\n      } else {\n        this.fragLoadIdx = 0;\n      }\n      if (frag.loadCounter) {\n        frag.loadCounter++;\n        let maxThreshold = config.fragLoadingLoopThreshold;\n        // if this frag has already been loaded 3 times, and if it has been reloaded recently\n        if (frag.loadCounter > maxThreshold && (Math.abs(this.fragLoadIdx - frag.loadIdx) < maxThreshold)) {\n          hls.trigger(Event.ERROR, {type: ErrorTypes.MEDIA_ERROR, details: ErrorDetails.FRAG_LOOP_LOADING_ERROR, fatal: false, frag: frag});\n          return;\n        }\n      } else {\n        frag.loadCounter = 1;\n      }\n      frag.loadIdx = this.fragLoadIdx;\n      frag.autoLevel = hls.autoLevelEnabled;\n      frag.bitrateTest = this.bitrateTest;\n\n      this.fragCurrent = frag;\n      this.startFragRequested = true;\n      // Don't update nextLoadPosition for fragments which are not buffered\n      if (!isNaN(frag.sn) && !frag.bitrateTest) {\n        this.nextLoadPosition = frag.start + frag.duration;\n      }\n      hls.trigger(Event.FRAG_LOADING, {frag: frag});\n      // lazy demuxer init, as this could take some time ... do it during frag loading\n      if (!this.demuxer) {\n        this.demuxer = new Demuxer(hls,'main');\n      }\n      this.state = State.FRAG_LOADING;\n      return;\n    }\n  }\n\n  set state(nextState) {\n    if (this.state !== nextState) {\n      const previousState = this.state;\n      this._state = nextState;\n      logger.log(`main stream:${previousState}->${nextState}`);\n      this.hls.trigger(Event.STREAM_STATE_TRANSITION, {previousState, nextState});\n    }\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  getBufferedFrag(position) {\n    return BinarySearch.search(this._bufferedFrags, function(frag) {\n      if (position < frag.startPTS) {\n        return -1;\n      } else if (position > frag.endPTS) {\n        return 1;\n      }\n      return 0;\n    });\n  }\n\n  get currentLevel() {\n    let media = this.media;\n    if (media) {\n      const frag = this.getBufferedFrag(media.currentTime);\n      if (frag) {\n        return frag.level;\n      }\n    }\n    return -1;\n  }\n\n  get nextBufferedFrag() {\n    let media = this.media;\n    if (media) {\n      // first get end range of current fragment\n      return this.followingBufferedFrag(this.getBufferedFrag(media.currentTime));\n    } else {\n      return null;\n    }\n  }\n\n  followingBufferedFrag(frag) {\n    if (frag) {\n      // try to get range of next fragment (500ms after this range)\n      return this.getBufferedFrag(frag.endPTS + 0.5);\n    }\n    return null;\n  }\n\n  get nextLevel() {\n    const frag = this.nextBufferedFrag;\n    if (frag) {\n      return frag.level;\n    } else {\n      return -1;\n    }\n  }\n\n  _checkFragmentChanged() {\n    var fragPlayingCurrent, currentTime, video = this.media;\n    if (video && video.readyState && video.seeking === false) {\n      currentTime = video.currentTime;\n      /* if video element is in seeked state, currentTime can only increase.\n        (assuming that playback rate is positive ...)\n        As sometimes currentTime jumps back to zero after a\n        media decode error, check this, to avoid seeking back to\n        wrong position after a media decode error\n      */\n      if(currentTime > video.playbackRate*this.lastCurrentTime) {\n        this.lastCurrentTime = currentTime;\n      }\n      if (BufferHelper.isBuffered(video,currentTime)) {\n        fragPlayingCurrent = this.getBufferedFrag(currentTime);\n      } else if (BufferHelper.isBuffered(video,currentTime + 0.1)) {\n        /* ensure that FRAG_CHANGED event is triggered at startup,\n          when first video frame is displayed and playback is paused.\n          add a tolerance of 100ms, in case current position is not buffered,\n          check if current pos+100ms is buffered and use that buffer range\n          for FRAG_CHANGED event reporting */\n        fragPlayingCurrent = this.getBufferedFrag(currentTime + 0.1);\n      }\n      if (fragPlayingCurrent) {\n        var fragPlaying = fragPlayingCurrent;\n        if (fragPlaying !== this.fragPlaying) {\n          this.hls.trigger(Event.FRAG_CHANGED, {frag: fragPlaying});\n          const fragPlayingLevel = fragPlaying.level;\n          if (!this.fragPlaying || this.fragPlaying.level !== fragPlayingLevel) {\n            this.hls.trigger(Event.LEVEL_SWITCHED, {level: fragPlayingLevel});\n          }\n          this.fragPlaying = fragPlaying;\n        }\n      }\n    }\n  }\n\n  /*\n    on immediate level switch :\n     - pause playback if playing\n     - cancel any pending load request\n     - and trigger a buffer flush\n  */\n  immediateLevelSwitch() {\n    logger.log('immediateLevelSwitch');\n    if (!this.immediateSwitch) {\n      this.immediateSwitch = true;\n      let media = this.media, previouslyPaused;\n      if (media) {\n        previouslyPaused = media.paused;\n        media.pause();\n      } else {\n        // don't restart playback after instant level switch in case media not attached\n        previouslyPaused = true;\n      }\n      this.previouslyPaused = previouslyPaused;\n    }\n    var fragCurrent = this.fragCurrent;\n    if (fragCurrent && fragCurrent.loader) {\n      fragCurrent.loader.abort();\n    }\n    this.fragCurrent = null;\n    // increase fragment load Index to avoid frag loop loading error after buffer flush\n    this.fragLoadIdx += 2 * this.config.fragLoadingLoopThreshold;\n    // flush everything\n    this.flushMainBuffer(0,Number.POSITIVE_INFINITY);\n  }\n\n  /*\n     on immediate level switch end, after new fragment has been buffered :\n      - nudge video decoder by slightly adjusting video currentTime (if currentTime buffered)\n      - resume the playback if needed\n  */\n  immediateLevelSwitchEnd() {\n    let media = this.media;\n    if (media && media.buffered.length) {\n      this.immediateSwitch = false;\n      if(BufferHelper.isBuffered(media,media.currentTime)) {\n        // only nudge if currentTime is buffered\n        media.currentTime -= 0.0001;\n      }\n      if (!this.previouslyPaused) {\n        media.play();\n      }\n    }\n  }\n\n  nextLevelSwitch() {\n    /* try to switch ASAP without breaking video playback :\n       in order to ensure smooth but quick level switching,\n      we need to find the next flushable buffer range\n      we should take into account new segment fetch time\n    */\n    let media = this.media;\n    // ensure that media is defined and that metadata are available (to retrieve currentTime)\n    if (media && media.readyState) {\n      let fetchdelay, fragPlayingCurrent, nextBufferedFrag;\n      // increase fragment load Index to avoid frag loop loading error after buffer flush\n      this.fragLoadIdx += 2 * this.config.fragLoadingLoopThreshold;\n      fragPlayingCurrent = this.getBufferedFrag(media.currentTime);\n      if (fragPlayingCurrent && fragPlayingCurrent.startPTS > 1) {\n        // flush buffer preceding current fragment (flush until current fragment start offset)\n        // minus 1s to avoid video freezing, that could happen if we flush keyframe of current video ...\n        this.flushMainBuffer(0,fragPlayingCurrent.startPTS - 1);\n      }\n      if (!media.paused) {\n        // add a safety delay of 1s\n        var nextLevelId = this.hls.nextLoadLevel,nextLevel = this.levels[nextLevelId], fragLastKbps = this.fragLastKbps;\n        if (fragLastKbps && this.fragCurrent) {\n          fetchdelay = this.fragCurrent.duration * nextLevel.bitrate / (1000 * fragLastKbps) + 1;\n        } else {\n          fetchdelay = 0;\n        }\n      } else {\n        fetchdelay = 0;\n      }\n      //logger.log('fetchdelay:'+fetchdelay);\n      // find buffer range that will be reached once new fragment will be fetched\n      nextBufferedFrag = this.getBufferedFrag(media.currentTime + fetchdelay);\n      if (nextBufferedFrag) {\n        // we can flush buffer range following this one without stalling playback\n        nextBufferedFrag = this.followingBufferedFrag(nextBufferedFrag);\n        if (nextBufferedFrag) {\n          // if we are here, we can also cancel any loading/demuxing in progress, as they are useless\n          var fragCurrent = this.fragCurrent;\n          if (fragCurrent && fragCurrent.loader) {\n            fragCurrent.loader.abort();\n          }\n          this.fragCurrent = null;\n          // start flush position is the start PTS of next buffered frag.\n          // we use frag.naxStartPTS which is max(audio startPTS, video startPTS).\n          // in case there is a small PTS Delta between audio and video, using maxStartPTS avoids flushing last samples from current fragment\n          this.flushMainBuffer(nextBufferedFrag.maxStartPTS , Number.POSITIVE_INFINITY);\n        }\n      }\n    }\n  }\n\n  flushMainBuffer(startOffset,endOffset) {\n    this.state = State.BUFFER_FLUSHING;\n    let flushScope = {startOffset: startOffset, endOffset: endOffset};\n    // if alternate audio tracks are used, only flush video, otherwise flush everything\n    if (this.altAudio) {\n      flushScope.type = 'video';\n    }\n    this.hls.trigger(Event.BUFFER_FLUSHING, flushScope);\n  }\n\n  onMediaAttached(data) {\n    var media = this.media = this.mediaBuffer = data.media;\n    this.onvseeking = this.onMediaSeeking.bind(this);\n    this.onvseeked = this.onMediaSeeked.bind(this);\n    this.onvended = this.onMediaEnded.bind(this);\n    media.addEventListener('seeking', this.onvseeking);\n    media.addEventListener('seeked', this.onvseeked);\n    media.addEventListener('ended', this.onvended);\n    let config = this.config;\n    if(this.levels && config.autoStartLoad) {\n      this.hls.startLoad(config.startPosition);\n    }\n  }\n\n  onMediaDetaching() {\n    var media = this.media;\n    if (media && media.ended) {\n      logger.log('MSE detaching and video ended, reset startPosition');\n      this.startPosition = this.lastCurrentTime = 0;\n    }\n\n    // reset fragment loading counter on MSE detaching to avoid reporting FRAG_LOOP_LOADING_ERROR after error recovery\n    var levels = this.levels;\n    if (levels) {\n      // reset fragment load counter\n        levels.forEach(level => {\n          if(level.details) {\n            level.details.fragments.forEach(fragment => {\n              fragment.loadCounter = undefined;\n              fragment.backtracked = undefined;\n            });\n          }\n      });\n    }\n    // remove video listeners\n    if (media) {\n      media.removeEventListener('seeking', this.onvseeking);\n      media.removeEventListener('seeked', this.onvseeked);\n      media.removeEventListener('ended', this.onvended);\n      this.onvseeking = this.onvseeked  = this.onvended = null;\n    }\n    this.media = this.mediaBuffer = null;\n    this.loadedmetadata = false;\n    this.stopLoad();\n  }\n\n  onMediaSeeking() {\n    let media = this.media, currentTime = media ? media.currentTime : undefined, config = this.config;\n    if (!isNaN(currentTime)) {\n      logger.log(`media seeking to ${currentTime.toFixed(3)}`);\n    }\n    let mediaBuffer = this.mediaBuffer ? this.mediaBuffer : media;\n    let bufferInfo = BufferHelper.bufferInfo(mediaBuffer,currentTime,this.config.maxBufferHole);\n    if (this.state === State.FRAG_LOADING) {\n      let fragCurrent = this.fragCurrent;\n      // check if we are seeking to a unbuffered area AND if frag loading is in progress\n      if (bufferInfo.len === 0 && fragCurrent) {\n        let tolerance = config.maxFragLookUpTolerance,\n            fragStartOffset = fragCurrent.start - tolerance,\n            fragEndOffset = fragCurrent.start + fragCurrent.duration + tolerance;\n        // check if we seek position will be out of currently loaded frag range : if out cancel frag load, if in, don't do anything\n        if (currentTime < fragStartOffset || currentTime > fragEndOffset) {\n          if (fragCurrent.loader) {\n            logger.log('seeking outside of buffer while fragment load in progress, cancel fragment load');\n            fragCurrent.loader.abort();\n          }\n          this.fragCurrent = null;\n          this.fragPrevious = null;\n          // switch to IDLE state to load new fragment\n          this.state = State.IDLE;\n        } else {\n          logger.log('seeking outside of buffer but within currently loaded fragment range');\n        }\n      }\n    } else if (this.state === State.ENDED) {\n        // if seeking to unbuffered area, clean up fragPrevious\n        if (bufferInfo.len === 0) {\n          this.fragPrevious = 0;\n        }\n        // switch to IDLE state to check for potential new fragment\n        this.state = State.IDLE;\n    }\n    if (media) {\n      this.lastCurrentTime = currentTime;\n    }\n    // avoid reporting fragment loop loading error in case user is seeking several times on same position\n    if (this.state !== State.FRAG_LOADING && this.fragLoadIdx !== undefined) {\n      this.fragLoadIdx += 2 * config.fragLoadingLoopThreshold;\n    }\n    // in case seeking occurs although no media buffered, adjust startPosition and nextLoadPosition to seek target\n    if(!this.loadedmetadata) {\n      this.nextLoadPosition = this.startPosition = currentTime;\n    }\n    // tick to speed up processing\n    this.tick();\n  }\n\n  onMediaSeeked() {\n    const media = this.media, currentTime = media ? media.currentTime : undefined;\n    if (!isNaN(currentTime)) {\n      logger.log(`media seeked to ${currentTime.toFixed(3)}`);\n    }\n    // tick to speed up FRAGMENT_PLAYING triggering\n    this.tick();\n  }\n\n  onMediaEnded() {\n    logger.log('media ended');\n    // reset startPosition and lastCurrentTime to restart playback @ stream beginning\n    this.startPosition = this.lastCurrentTime = 0;\n  }\n\n\n  onManifestLoading() {\n    // reset buffer on manifest loading\n    logger.log('trigger BUFFER_RESET');\n    this.hls.trigger(Event.BUFFER_RESET);\n    this._bufferedFrags = [];\n    this.stalled = false;\n    this.startPosition = this.lastCurrentTime = 0;\n  }\n\n  onManifestParsed(data) {\n    var aac = false, heaac = false, codec;\n    data.levels.forEach(level => {\n      // detect if we have different kind of audio codecs used amongst playlists\n      codec = level.audioCodec;\n      if (codec) {\n        if (codec.indexOf('mp4a.40.2') !== -1) {\n          aac = true;\n        }\n        if (codec.indexOf('mp4a.40.5') !== -1) {\n          heaac = true;\n        }\n      }\n    });\n    this.audioCodecSwitch = (aac && heaac);\n    if (this.audioCodecSwitch) {\n      logger.log('both AAC/HE-AAC audio found in levels; declaring level codec as HE-AAC');\n    }\n    this.levels = data.levels;\n    this.startLevelLoaded = false;\n    this.startFragRequested = false;\n    let config = this.config;\n    if (config.autoStartLoad || this.forceStartLoad) {\n      this.hls.startLoad(config.startPosition);\n    }\n  }\n\n  onLevelLoaded(data) {\n    const newDetails = data.details;\n    const newLevelId = data.level;\n    const lastLevel = this.levels[this.levelLastLoaded];\n    const curLevel = this.levels[newLevelId];\n    const duration = newDetails.totalduration;\n    let sliding = 0;\n\n    logger.log(`level ${newLevelId} loaded [${newDetails.startSN},${newDetails.endSN}], cc [${newDetails.startCC}, ${newDetails.endCC}] duration:${duration}`);\n\n    if (newDetails.live) {\n      const curDetails = curLevel.details;\n      if (curDetails && newDetails.fragments.length > 0) {\n        // we already have details for that level, merge them\n        LevelHelper.mergeDetails(curDetails,newDetails);\n        sliding = newDetails.fragments[0].start;\n        this.liveSyncPosition = this.computeLivePosition(sliding, curDetails);\n        if (newDetails.PTSKnown) {\n          logger.log(`live playlist sliding:${sliding.toFixed(3)}`);\n        } else {\n          logger.log('live playlist - outdated PTS, unknown sliding');\n          alignDiscontinuities(this.fragPrevious, lastLevel, newDetails);\n        }\n      } else {\n        logger.log('live playlist - first load, unknown sliding');\n        newDetails.PTSKnown = false;\n        alignDiscontinuities(this.fragPrevious, lastLevel, newDetails);\n      }\n    } else {\n      newDetails.PTSKnown = false;\n    }\n    // override level info\n    this.levelLastLoaded = newLevelId;\n    curLevel.details = newDetails;\n    this.hls.trigger(Event.LEVEL_UPDATED, { details: newDetails, level: newLevelId });\n\n    if (this.startFragRequested === false) {\n    // compute start position if set to -1. use it straight away if value is defined\n      if (this.startPosition === -1 || this.lastCurrentTime === -1) {\n        // first, check if start time offset has been set in playlist, if yes, use this value\n        let startTimeOffset = newDetails.startTimeOffset;\n        if(!isNaN(startTimeOffset)) {\n          if (startTimeOffset < 0) {\n            logger.log(`negative start time offset ${startTimeOffset}, count from end of last fragment`);\n            startTimeOffset = sliding + duration + startTimeOffset;\n          }\n          logger.log(`start time offset found in playlist, adjust startPosition to ${startTimeOffset}`);\n          this.startPosition = startTimeOffset;\n        } else {\n          // if live playlist, set start position to be fragment N-this.config.liveSyncDurationCount (usually 3)\n          if (newDetails.live) {\n            this.startPosition = this.computeLivePosition(sliding, newDetails);\n            logger.log(`configure startPosition to ${this.startPosition}`);\n          } else {\n            this.startPosition = 0;\n          }\n        }\n        this.lastCurrentTime = this.startPosition;\n      }\n      this.nextLoadPosition = this.startPosition;\n    }\n    // only switch batck to IDLE state if we were waiting for level to start downloading a new fragment\n    if (this.state === State.WAITING_LEVEL) {\n      this.state = State.IDLE;\n    }\n    //trigger handler right now\n    this.tick();\n  }\n\n  onKeyLoaded() {\n    if (this.state === State.KEY_LOADING) {\n      this.state = State.IDLE;\n      this.tick();\n    }\n  }\n\n  onFragLoaded(data) {\n    var fragCurrent = this.fragCurrent,\n        fragLoaded = data.frag;\n    if (this.state === State.FRAG_LOADING &&\n        fragCurrent &&\n        fragLoaded.type === 'main' &&\n        fragLoaded.level === fragCurrent.level &&\n        fragLoaded.sn === fragCurrent.sn) {\n      let stats = data.stats,\n          currentLevel = this.levels[fragCurrent.level],\n          details = currentLevel.details;\n      logger.log(`Loaded  ${fragCurrent.sn} of [${details.startSN} ,${details.endSN}],level ${fragCurrent.level}`);\n      // reset frag bitrate test in any case after frag loaded event\n      this.bitrateTest = false;\n      this.stats = stats;\n      // if this frag was loaded to perform a bitrate test AND if hls.nextLoadLevel is greater than 0\n      // then this means that we should be able to load a fragment at a higher quality level\n      if (fragLoaded.bitrateTest === true && this.hls.nextLoadLevel) {\n        // switch back to IDLE state ... we just loaded a fragment to determine adequate start bitrate and initialize autoswitch algo\n        this.state = State.IDLE;\n        this.startFragRequested = false;\n        stats.tparsed = stats.tbuffered = performance.now();\n        this.hls.trigger(Event.FRAG_BUFFERED, {stats: stats, frag: fragCurrent, id : 'main'});\n        this.tick();\n      } else if (fragLoaded.sn === 'initSegment') {\n        this.state = State.IDLE;\n        stats.tparsed = stats.tbuffered = performance.now();\n        details.initSegment.data = data.payload;\n        this.hls.trigger(Event.FRAG_BUFFERED, {stats: stats, frag: fragCurrent, id : 'main'});\n        this.tick();\n      } else {\n        this.state = State.PARSING;\n        // transmux the MPEG-TS data to ISO-BMFF segments\n        let duration = details.totalduration,\n            level = fragCurrent.level,\n            sn = fragCurrent.sn,\n            audioCodec = this.config.defaultAudioCodec || currentLevel.audioCodec;\n        if(this.audioCodecSwap) {\n          logger.log('swapping playlist audio codec');\n          if(audioCodec === undefined) {\n            audioCodec = this.lastAudioCodec;\n          }\n          if(audioCodec) {\n            if(audioCodec.indexOf('mp4a.40.5') !==-1) {\n              audioCodec = 'mp4a.40.2';\n            } else {\n              audioCodec = 'mp4a.40.5';\n            }\n          }\n        }\n        this.pendingBuffering = true;\n        this.appended = false;\n        logger.log(`Parsing ${sn} of [${details.startSN} ,${details.endSN}],level ${level}, cc ${fragCurrent.cc}`);\n        let demuxer = this.demuxer;\n        if (!demuxer) {\n          demuxer = this.demuxer = new Demuxer(this.hls,'main');\n        }\n        // time Offset is accurate if level PTS is known, or if playlist is not sliding (not live) and if media is not seeking (this is to overcome potential timestamp drifts between playlists and fragments)\n        let media = this.media;\n        let mediaSeeking = media && media.seeking;\n        let accurateTimeOffset = !mediaSeeking && (details.PTSKnown || !details.live);\n        let initSegmentData = details.initSegment ? details.initSegment.data : [];\n        demuxer.push(data.payload, initSegmentData,audioCodec, currentLevel.videoCodec, fragCurrent, duration, accurateTimeOffset,undefined);\n      }\n    }\n    this.fragLoadError = 0;\n  }\n\n  onFragParsingInitSegment(data) {\n    const fragCurrent = this.fragCurrent;\n    const fragNew = data.frag;\n    if (fragCurrent &&\n        data.id === 'main' &&\n        fragNew.sn === fragCurrent.sn &&\n        fragNew.level === fragCurrent.level &&\n        this.state === State.PARSING) {\n      var tracks = data.tracks, trackName, track;\n\n      // if audio track is expected to come from audio stream controller, discard any coming from main\n      if (tracks.audio && this.altAudio) {\n        delete tracks.audio;\n      }\n      // include levelCodec in audio and video tracks\n      track = tracks.audio;\n      if(track) {\n        var audioCodec = this.levels[this.level].audioCodec,\n            ua = navigator.userAgent.toLowerCase();\n        if(audioCodec && this.audioCodecSwap) {\n          logger.log('swapping playlist audio codec');\n          if(audioCodec.indexOf('mp4a.40.5') !==-1) {\n            audioCodec = 'mp4a.40.2';\n          } else {\n            audioCodec = 'mp4a.40.5';\n          }\n        }\n        // in case AAC and HE-AAC audio codecs are signalled in manifest\n        // force HE-AAC , as it seems that most browsers prefers that way,\n        // except for mono streams OR on FF\n        // these conditions might need to be reviewed ...\n        if (this.audioCodecSwitch) {\n            // don't force HE-AAC if mono stream\n           if(track.metadata.channelCount !== 1 &&\n            // don't force HE-AAC if firefox\n            ua.indexOf('firefox') === -1) {\n              audioCodec = 'mp4a.40.5';\n          }\n        }\n        // HE-AAC is broken on Android, always signal audio codec as AAC even if variant manifest states otherwise\n        if(ua.indexOf('android') !== -1 && track.container !== 'audio/mpeg') { // Exclude mpeg audio\n          audioCodec = 'mp4a.40.2';\n          logger.log(`Android: force audio codec to ${audioCodec}`);\n        }\n        track.levelCodec = audioCodec;\n        track.id = data.id;\n      }\n      track = tracks.video;\n      if(track) {\n        track.levelCodec = this.levels[this.level].videoCodec;\n        track.id = data.id;\n      }\n      this.hls.trigger(Event.BUFFER_CODECS,tracks);\n      // loop through tracks that are going to be provided to bufferController\n      for (trackName in tracks) {\n        track = tracks[trackName];\n        logger.log(`main track:${trackName},container:${track.container},codecs[level/parsed]=[${track.levelCodec}/${track.codec}]`);\n        var initSegment = track.initSegment;\n        if (initSegment) {\n          this.appended = true;\n          // arm pending Buffering flag before appending a segment\n          this.pendingBuffering = true;\n          this.hls.trigger(Event.BUFFER_APPENDING, {type: trackName, data: initSegment, parent : 'main', content : 'initSegment'});\n        }\n      }\n      //trigger handler right now\n      this.tick();\n    }\n  }\n\n  onFragParsingData(data) {\n    const fragCurrent = this.fragCurrent;\n    const fragNew = data.frag;\n    if (fragCurrent &&\n        data.id === 'main' &&\n        fragNew.sn === fragCurrent.sn &&\n        fragNew.level === fragCurrent.level &&\n        !(data.type === 'audio' && this.altAudio) && // filter out main audio if audio track is loaded through audio stream controller\n        this.state === State.PARSING) {\n      var level = this.levels[this.level],\n          frag = fragCurrent;\n          if (isNaN(data.endPTS)) {\n            data.endPTS = data.startPTS + fragCurrent.duration;\n            data.endDTS = data.startDTS + fragCurrent.duration;\n          }\n\n      logger.log(`Parsed ${data.type},PTS:[${data.startPTS.toFixed(3)},${data.endPTS.toFixed(3)}],DTS:[${data.startDTS.toFixed(3)}/${data.endDTS.toFixed(3)}],nb:${data.nb},dropped:${data.dropped || 0}`);\n\n      // Detect gaps in a fragment  and try to fix it by finding a keyframe in the previous fragment (see _findFragments)\n      if(data.type === 'video') {\n        frag.dropped = data.dropped;\n        if (frag.dropped) {\n          if (!frag.backtracked) {\n            logger.warn('missing video frame(s), backtracking fragment');\n            // Return back to the IDLE state without appending to buffer\n            // Causes findFragments to backtrack a segment and find the keyframe\n            // Audio fragments arriving before video sets the nextLoadPosition, causing _findFragments to skip the backtracked fragment\n            frag.backtracked = true;\n            this.nextLoadPosition = data.startPTS;\n            this.state = State.IDLE;\n            this.fragPrevious = frag;\n            this.tick();\n            return;\n          } else {\n            logger.warn('Already backtracked on this fragment, appending with the gap');\n          }\n        } else {\n          // Only reset the backtracked flag if we've loaded the frag without any dropped frames\n          frag.backtracked = false;\n        }\n      }\n\n      var drift = LevelHelper.updateFragPTSDTS(level.details,frag,data.startPTS,data.endPTS,data.startDTS,data.endDTS),\n          hls = this.hls;\n      hls.trigger(Event.LEVEL_PTS_UPDATED, {details: level.details, level: this.level, drift: drift, type: data.type, start: data.startPTS, end: data.endPTS});\n\n      // has remuxer dropped video frames located before first keyframe ?\n      [data.data1, data.data2].forEach(buffer => {\n        // only append in PARSING state (rationale is that an appending error could happen synchronously on first segment appending)\n        // in that case it is useless to append following segments\n        if (buffer && buffer.length && this.state === State.PARSING) {\n          this.appended = true;\n          // arm pending Buffering flag before appending a segment\n          this.pendingBuffering = true;\n          hls.trigger(Event.BUFFER_APPENDING, {type: data.type, data: buffer, parent : 'main',content : 'data'});\n        }\n      });\n      //trigger handler right now\n      this.tick();\n    }\n  }\n\n  onFragParsed(data) {\n    const fragCurrent = this.fragCurrent;\n    const fragNew = data.frag;\n    if (fragCurrent &&\n        data.id === 'main' &&\n        fragNew.sn === fragCurrent.sn &&\n        fragNew.level === fragCurrent.level &&\n        this.state === State.PARSING) {\n      this.stats.tparsed = performance.now();\n      this.state = State.PARSED;\n      this._checkAppendedParsed();\n    }\n  }\n\n  onAudioTrackSwitching(data) {\n    // if any URL found on new audio track, it is an alternate audio track\n    var altAudio = !!data.url,\n        trackId = data.id;\n    // if we switch on main audio, ensure that main fragment scheduling is synced with media.buffered\n    // don't do anything if we switch to alt audio: audio stream controller is handling it.\n    // we will just have to change buffer scheduling on audioTrackSwitched\n    if (!altAudio) {\n      if (this.mediaBuffer !== this.media) {\n        logger.log(`switching on main audio, use media.buffered to schedule main fragment loading`);\n        this.mediaBuffer = this.media;\n        let fragCurrent = this.fragCurrent;\n        // we need to refill audio buffer from main: cancel any frag loading to speed up audio switch\n        if (fragCurrent.loader) {\n          logger.log('switching to main audio track, cancel main fragment load');\n          fragCurrent.loader.abort();\n        }\n        this.fragCurrent = null;\n        this.fragPrevious = null;\n        // destroy demuxer to force init segment generation (following audio switch)\n        if (this.demuxer) {\n          this.demuxer.destroy();\n          this.demuxer = null;\n        }\n        // switch to IDLE state to load new fragment\n        this.state = State.IDLE;\n      }\n      let hls = this.hls;\n      // switching to main audio, flush all audio and trigger track switched\n      hls.trigger(Event.BUFFER_FLUSHING, {startOffset: 0 , endOffset: Number.POSITIVE_INFINITY, type : 'audio'});\n      hls.trigger(Event.AUDIO_TRACK_SWITCHED, {id : trackId});\n      this.altAudio = false;\n    }\n  }\n\n  onAudioTrackSwitched(data) {\n    var trackId = data.id,\n    altAudio = !!this.hls.audioTracks[trackId].url;\n    if (altAudio) {\n      let videoBuffer = this.videoBuffer;\n      // if we switched on alternate audio, ensure that main fragment scheduling is synced with video sourcebuffer buffered\n      if (videoBuffer && this.mediaBuffer !== videoBuffer) {\n        logger.log(`switching on alternate audio, use video.buffered to schedule main fragment loading`);\n        this.mediaBuffer = videoBuffer;\n      }\n    }\n    this.altAudio = altAudio;\n    this.tick();\n  }\n\n\n\n  onBufferCreated(data) {\n    let tracks = data.tracks, mediaTrack, name, alternate = false;\n    for(var type in tracks) {\n      let track = tracks[type];\n      if (track.id === 'main') {\n        name = type;\n        mediaTrack = track;\n        // keep video source buffer reference\n        if (type === 'video') {\n          this.videoBuffer = tracks[type].buffer;\n        }\n      } else {\n        alternate = true;\n      }\n    }\n    if (alternate && mediaTrack) {\n      logger.log(`alternate track found, use ${name}.buffered to schedule main fragment loading`);\n      this.mediaBuffer = mediaTrack.buffer;\n    } else {\n      this.mediaBuffer = this.media;\n    }\n  }\n\n  onBufferAppended(data) {\n    if (data.parent === 'main') {\n      const state = this.state;\n      if (state === State.PARSING || state === State.PARSED) {\n        // check if all buffers have been appended\n        this.pendingBuffering = (data.pending > 0);\n        this._checkAppendedParsed();\n      }\n    }\n  }\n\n  _checkAppendedParsed() {\n    //trigger handler right now\n    if (this.state === State.PARSED && (!this.appended || !this.pendingBuffering)) {\n      const frag = this.fragCurrent;\n      if (frag) {\n        const media = this.mediaBuffer ? this.mediaBuffer : this.media;\n        logger.log(`main buffered : ${TimeRanges.toString(media.buffered)}`);\n        // filter fragments potentially evicted from buffer. this is to avoid memleak on live streams\n        let bufferedFrags = this._bufferedFrags.filter(frag => {return BufferHelper.isBuffered(media,(frag.startPTS + frag.endPTS) / 2);});\n        // push new range\n        bufferedFrags.push(frag);\n        // sort frags, as we use BinarySearch for lookup in getBufferedFrag ...\n        this._bufferedFrags = bufferedFrags.sort(function(a,b) {return (a.startPTS - b.startPTS);});\n        this.fragPrevious = frag;\n        const stats = this.stats;\n        stats.tbuffered = performance.now();\n        // we should get rid of this.fragLastKbps\n        this.fragLastKbps = Math.round(8 * stats.total / (stats.tbuffered - stats.tfirst));\n        this.hls.trigger(Event.FRAG_BUFFERED, {stats: stats, frag: frag, id : 'main'});\n        this.state = State.IDLE;\n      }\n      this.tick();\n    }\n  }\n\n  onError(data) {\n    let frag = data.frag || this.fragCurrent;\n    // don't handle frag error not related to main fragment\n    if (frag && frag.type !== 'main') {\n      return;\n    }\n    let media = this.media,\n        // 0.5 : tolerance needed as some browsers stalls playback before reaching buffered end\n        mediaBuffered = media && BufferHelper.isBuffered(media,media.currentTime) && BufferHelper.isBuffered(media,media.currentTime+0.5);\n    switch(data.details) {\n      case ErrorDetails.FRAG_LOAD_ERROR:\n      case ErrorDetails.FRAG_LOAD_TIMEOUT:\n      case ErrorDetails.KEY_LOAD_ERROR:\n      case ErrorDetails.KEY_LOAD_TIMEOUT:\n        if(!data.fatal) {\n          var loadError = this.fragLoadError;\n          if(loadError) {\n            loadError++;\n          } else {\n            loadError=1;\n          }\n          let config = this.config;\n          // keep retrying / don't raise fatal network error if current position is buffered or if in automode with current level not 0\n          if (loadError <= config.fragLoadingMaxRetry || mediaBuffered || (frag.autoLevel && frag.level)) {\n            this.fragLoadError = loadError;\n            // reset load counter to avoid frag loop loading error\n            frag.loadCounter = 0;\n            // exponential backoff capped to config.fragLoadingMaxRetryTimeout\n            var delay = Math.min(Math.pow(2,loadError-1)*config.fragLoadingRetryDelay,config.fragLoadingMaxRetryTimeout);\n            logger.warn(`mediaController: frag loading failed, retry in ${delay} ms`);\n            this.retryDate = performance.now() + delay;\n            // retry loading state\n            // if loadedmetadata is not set, it means that we are emergency switch down on first frag\n            // in that case, reset startFragRequested flag\n            if(!this.loadedmetadata) {\n              this.startFragRequested = false;\n              this.nextLoadPosition = this.startPosition;\n            }\n            this.state = State.FRAG_LOADING_WAITING_RETRY;\n          } else {\n            logger.error(`mediaController: ${data.details} reaches max retry, redispatch as fatal ...`);\n            // switch error to fatal\n            data.fatal = true;\n            this.state = State.ERROR;\n          }\n        }\n        break;\n      case ErrorDetails.FRAG_LOOP_LOADING_ERROR:\n        if(!data.fatal) {\n          // if buffer is not empty\n          if (mediaBuffered) {\n            // try to reduce max buffer length : rationale is that we could get\n            // frag loop loading error because of buffer eviction\n            this._reduceMaxBufferLength(frag.duration);\n            this.state = State.IDLE;\n          } else {\n            // buffer empty. report as fatal if in manual mode or if lowest level.\n            // level controller takes care of emergency switch down logic\n            if (!frag.autoLevel || frag.level === 0) {\n              // switch error to fatal\n              data.fatal = true;\n              this.state = State.ERROR;\n            }\n          }\n        }\n        break;\n      case ErrorDetails.LEVEL_LOAD_ERROR:\n      case ErrorDetails.LEVEL_LOAD_TIMEOUT:\n        if(this.state !== State.ERROR) {\n          if (data.fatal) {\n           // if fatal error, stop processing\n            this.state = State.ERROR;\n            logger.warn(`streamController: ${data.details},switch to ${this.state} state ...`);\n          } else {\n            // in case of non fatal error while loading level, if level controller is not retrying to load level , switch back to IDLE\n            if (!data.levelRetry && this.state === State.WAITING_LEVEL) {\n              this.state = State.IDLE;\n            }\n          }\n        }\n        break;\n      case ErrorDetails.BUFFER_FULL_ERROR:\n        // if in appending state\n        if (data.parent === 'main' && (this.state === State.PARSING || this.state === State.PARSED)) {\n          // reduce max buf len if current position is buffered\n          if (mediaBuffered) {\n            this._reduceMaxBufferLength(this.config.maxBufferLength);\n            this.state = State.IDLE;\n          } else {\n            // current position is not buffered, but browser is still complaining about buffer full error\n            // this happens on IE/Edge, refer to https://github.com/video-dev/hls.js/pull/708\n            // in that case flush the whole buffer to recover\n            logger.warn('buffer full error also media.currentTime is not buffered, flush everything');\n            this.fragCurrent = null;\n            // flush everything\n            this.flushMainBuffer(0,Number.POSITIVE_INFINITY);\n          }\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  _reduceMaxBufferLength(minLength) {\n    let config = this.config;\n    if (config.maxMaxBufferLength >= minLength) {\n      // reduce max buffer length as it might be too high. we do this to avoid loop flushing ...\n      config.maxMaxBufferLength/=2;\n      logger.warn(`main:reduce max buffer length to ${config.maxMaxBufferLength}s`);\n      // increase fragment load Index to avoid frag loop loading error after buffer flush\n      this.fragLoadIdx += 2 * config.fragLoadingLoopThreshold;\n    }\n  }\n\n_checkBuffer() {\n    var media = this.media,\n        config = this.config;\n    // if ready state different from HAVE_NOTHING (numeric value 0), we are allowed to seek\n    if(media && media.readyState) {\n        let currentTime = media.currentTime,\n            mediaBuffer = this.mediaBuffer ? this.mediaBuffer : media,\n             buffered = mediaBuffer.buffered;\n      // adjust currentTime to start position on loaded metadata\n      if(!this.loadedmetadata && buffered.length) {\n        this.loadedmetadata = true;\n        // only adjust currentTime if different from startPosition or if startPosition not buffered\n        // at that stage, there should be only one buffered range, as we reach that code after first fragment has been buffered\n        let startPosition = media.seeking ? currentTime : this.startPosition,\n            startPositionBuffered = BufferHelper.isBuffered(mediaBuffer,startPosition),\n            firstbufferedPosition = buffered.start(0);\n        // if currentTime not matching with expected startPosition or startPosition not buffered\n        if (currentTime !== startPosition ||\n          (!startPositionBuffered && (Math.abs(startPosition-firstbufferedPosition) < config.maxSeekHole))) {\n          logger.log(`target start position:${startPosition}`);\n          // if startPosition not buffered, let's seek to buffered.start(0)\n          if(!startPositionBuffered) {\n            startPosition = firstbufferedPosition;\n            logger.log(`target start position not buffered, seek to buffered.start(0) ${startPosition}`);\n          }\n          logger.log(`adjust currentTime from ${currentTime} to ${startPosition}`);\n          media.currentTime = startPosition;\n        }\n      } else if (this.immediateSwitch) {\n        this.immediateLevelSwitchEnd();\n      } else {\n        let bufferInfo = BufferHelper.bufferInfo(media,currentTime,0),\n            expectedPlaying = !(media.paused || // not playing when media is paused\n                                media.ended  || // not playing when media is ended\n                                media.buffered.length === 0), // not playing if nothing buffered\n            jumpThreshold = 0.5, // tolerance needed as some browsers stalls playback before reaching buffered range end\n            playheadMoving = currentTime !== this.lastCurrentTime;\n\n        if (playheadMoving) {\n          // played moving, but was previously stalled => now not stuck anymore\n          if (this.stallReported) {\n            logger.warn(`playback not stuck anymore @${currentTime}, after ${Math.round(performance.now()-this.stalled)}ms`);\n            this.stallReported = false;\n          }\n          this.stalled = undefined;\n          this.nudgeRetry = 0;\n        } else {\n          // playhead not moving\n          if(expectedPlaying) {\n            // playhead not moving BUT media expected to play\n            const tnow = performance.now();\n            const hls = this.hls;\n            if(!this.stalled) {\n              // stall just detected, store current time\n              this.stalled = tnow;\n              this.stallReported = false;\n            } else {\n              // playback already stalled, check stalling duration\n              // if stalling for more than a given threshold, let's try to recover\n              const stalledDuration = tnow - this.stalled;\n              const bufferLen = bufferInfo.len;\n              let nudgeRetry = this.nudgeRetry || 0;\n              // have we reached stall deadline ?\n              if (bufferLen <= jumpThreshold && stalledDuration > config.lowBufferWatchdogPeriod * 1000) {\n                // report stalled error once\n                if (!this.stallReported) {\n                  this.stallReported = true;\n                  logger.warn(`playback stalling in low buffer @${currentTime}`);\n                  hls.trigger(Event.ERROR, {type: ErrorTypes.MEDIA_ERROR, details: ErrorDetails.BUFFER_STALLED_ERROR, fatal: false, buffer : bufferLen});\n                }\n                // if buffer len is below threshold, try to jump to start of next buffer range if close\n                // no buffer available @ currentTime, check if next buffer is close (within a config.maxSeekHole second range)\n                var nextBufferStart = bufferInfo.nextStart, delta = nextBufferStart-currentTime;\n                if(nextBufferStart &&\n                   (delta < config.maxSeekHole) &&\n                   (delta > 0)) {\n                  this.nudgeRetry = ++nudgeRetry;\n                  const nudgeOffset = nudgeRetry * config.nudgeOffset;\n                  // next buffer is close ! adjust currentTime to nextBufferStart\n                  // this will ensure effective video decoding\n                  logger.log(`adjust currentTime from ${media.currentTime} to next buffered @ ${nextBufferStart} + nudge ${nudgeOffset}`);\n                  media.currentTime = nextBufferStart + nudgeOffset;\n                  // reset stalled so to rearm watchdog timer\n                  this.stalled = undefined;\n                  hls.trigger(Event.ERROR, {type: ErrorTypes.MEDIA_ERROR, details: ErrorDetails.BUFFER_SEEK_OVER_HOLE, fatal: false, hole : nextBufferStart + nudgeOffset - currentTime});\n                }\n              } else if (bufferLen > jumpThreshold && stalledDuration > config.highBufferWatchdogPeriod * 1000) {\n                // report stalled error once\n                if (!this.stallReported) {\n                  this.stallReported = true;\n                  logger.warn(`playback stalling in high buffer @${currentTime}`);\n                  hls.trigger(Event.ERROR, {type: ErrorTypes.MEDIA_ERROR, details: ErrorDetails.BUFFER_STALLED_ERROR, fatal: false, buffer : bufferLen});\n                }\n                // reset stalled so to rearm watchdog timer\n                this.stalled = undefined;\n                this.nudgeRetry = ++nudgeRetry;\n                if (nudgeRetry < config.nudgeMaxRetry) {\n                  const currentTime = media.currentTime;\n                  const targetTime = currentTime + nudgeRetry * config.nudgeOffset;\n                  logger.log(`adjust currentTime from ${currentTime} to ${targetTime}`);\n                  // playback stalled in buffered area ... let's nudge currentTime to try to overcome this\n                  media.currentTime = targetTime;\n                  hls.trigger(Event.ERROR, {type: ErrorTypes.MEDIA_ERROR, details: ErrorDetails.BUFFER_NUDGE_ON_STALL, fatal: false});\n                } else {\n                  logger.error(`still stuck in high buffer @${currentTime} after ${config.nudgeMaxRetry}, raise fatal error`);\n                  hls.trigger(Event.ERROR, {type: ErrorTypes.MEDIA_ERROR, details: ErrorDetails.BUFFER_STALLED_ERROR, fatal: true});\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  onFragLoadEmergencyAborted() {\n    this.state = State.IDLE;\n    // if loadedmetadata is not set, it means that we are emergency switch down on first frag\n    // in that case, reset startFragRequested flag\n    if(!this.loadedmetadata) {\n      this.startFragRequested = false;\n      this.nextLoadPosition = this.startPosition;\n    }\n    this.tick();\n  }\n\n  onBufferFlushed() {\n    /* after successful buffer flushing, filter flushed fragments from bufferedFrags\n      use mediaBuffered instead of media (so that we will check against video.buffered ranges in case of alt audio track)\n    */\n    const media = this.mediaBuffer ? this.mediaBuffer : this.media;\n    this._bufferedFrags = this._bufferedFrags.filter(frag => {return BufferHelper.isBuffered(media,(frag.startPTS + frag.endPTS) / 2);});\n\n    // increase fragment load Index to avoid frag loop loading error after buffer flush\n    this.fragLoadIdx += 2 * this.config.fragLoadingLoopThreshold;\n    // move to IDLE once flush complete. this should trigger new fragment loading\n    this.state = State.IDLE;\n    // reset reference to frag\n    this.fragPrevious = null;\n  }\n\n  onLevelRemoved(data) {\n    this.levels = this.levels.filter((level, index) => index !== data.level);\n  }\n\n  swapAudioCodec() {\n    this.audioCodecSwap = !this.audioCodecSwap;\n  }\n\n  computeLivePosition(sliding, levelDetails) {\n    let targetLatency = this.config.liveSyncDuration !== undefined ? this.config.liveSyncDuration : this.config.liveSyncDurationCount * levelDetails.targetduration;\n    return sliding + Math.max(0, levelDetails.totalduration - targetLatency);\n  }\n\n  get liveSyncPosition() {\n    return this._liveSyncPosition;\n  }\n\n  set liveSyncPosition(value) {\n    this._liveSyncPosition = value;\n  }\n}\nexport default StreamController;\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/controller/stream-controller.js","/*\n * Level Controller\n*/\n\nimport Event from '../events';\nimport EventHandler from '../event-handler';\nimport {logger} from '../utils/logger';\nimport {ErrorTypes, ErrorDetails} from '../errors';\nimport BufferHelper from '../helper/buffer-helper';\n\nclass LevelController extends EventHandler {\n\n  constructor(hls) {\n    super(hls,\n      Event.MANIFEST_LOADED,\n      Event.LEVEL_LOADED,\n      Event.FRAG_LOADED,\n      Event.ERROR);\n    this.ontick = this.tick.bind(this);\n    this._manualLevel = -1;\n  }\n\n  destroy() {\n    this.cleanTimer();\n    this._manualLevel = -1;\n  }\n\n  cleanTimer() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n      this.timer = null;\n    }\n  }\n\n  startLoad() {\n    this.canload = true;\n    let levels = this._levels;\n    // clean up live level details to force reload them, and reset load errors\n    if(levels) {\n      levels.forEach(level => {\n        level.loadError = 0;\n        const levelDetails = level.details;\n        if (levelDetails && levelDetails.live) {\n          level.details = undefined;\n        }\n      });\n    }\n    // speed up live playlist refresh if timer exists\n    if (this.timer) {\n      this.tick();\n    }\n  }\n\n  stopLoad() {\n    this.canload = false;\n  }\n\n  onManifestLoaded(data) {\n    let levels0 = [];\n    let levels = [];\n    let audioTracks = [];\n    let bitrateStart;\n    let bitrateSet = {};\n    let videoCodecFound = false;\n    let audioCodecFound = false;\n    let hls = this.hls;\n    let brokenmp4inmp3 = /chrome|firefox/.test(navigator.userAgent.toLowerCase());\n    let checkSupported = function (type, codec) {\n      return MediaSource.isTypeSupported(`${type}/mp4;codecs=${codec}`);\n    };\n\n    // regroup redundant level together\n    data.levels.forEach(level => {\n      if(level.videoCodec) {\n        videoCodecFound = true;\n      }\n      // erase audio codec info if browser does not support mp4a.40.34. demuxer will autodetect codec and fallback to mpeg/audio\n      if(brokenmp4inmp3 && level.audioCodec && level.audioCodec.indexOf('mp4a.40.34') !== -1) {\n        level.audioCodec = undefined;\n      }\n      if(level.audioCodec || (level.attrs && level.attrs.AUDIO)) {\n        audioCodecFound = true;\n      }\n      let redundantLevelId = bitrateSet[level.bitrate];\n      if (redundantLevelId === undefined) {\n        bitrateSet[level.bitrate] = levels0.length;\n        level.url = [level.url];\n        level.urlId = 0;\n        levels0.push(level);\n      } else {\n        levels0[redundantLevelId].url.push(level.url);\n      }\n    });\n\n    // remove audio-only level if we also have levels with audio+video codecs signalled\n    if(videoCodecFound && audioCodecFound) {\n      levels0.forEach(level => {\n        if(level.videoCodec) {\n          levels.push(level);\n        }\n      });\n    } else {\n      levels = levels0;\n    }\n    // only keep level with supported audio/video codecs\n    levels = levels.filter(function(level) {\n      let audioCodec = level.audioCodec, videoCodec = level.videoCodec;\n      return (!audioCodec || checkSupported('audio',audioCodec)) &&\n        (!videoCodec || checkSupported('video', videoCodec));\n    });\n\n    if (data.audioTracks) {\n      audioTracks = data.audioTracks.filter(track => !track.audioCodec || checkSupported('audio', track.audioCodec));\n    }\n\n    if(levels.length) {\n      // start bitrate is the first bitrate of the manifest\n      bitrateStart = levels[0].bitrate;\n      // sort level on bitrate\n      levels.sort(function (a, b) {\n        return a.bitrate - b.bitrate;\n      });\n      this._levels = levels;\n      // find index of first level in sorted levels\n      for (let i = 0; i < levels.length; i++) {\n        if (levels[i].bitrate === bitrateStart) {\n          this._firstLevel = i;\n          logger.log(`manifest loaded,${levels.length} level(s) found, first bitrate:${bitrateStart}`);\n          break;\n        }\n      }\n      hls.trigger(Event.MANIFEST_PARSED, {levels, audioTracks, firstLevel: this._firstLevel, stats: data.stats, audio : audioCodecFound, video : videoCodecFound, altAudio : data.audioTracks.length > 0});\n    } else {\n      hls.trigger(Event.ERROR, {type: ErrorTypes.MEDIA_ERROR, details: ErrorDetails.MANIFEST_INCOMPATIBLE_CODECS_ERROR, fatal: true, url: hls.url, reason: 'no level with compatible codecs found in manifest'});\n    }\n    return;\n  }\n\n  get levels() {\n    return this._levels;\n  }\n\n  get level() {\n    return this._level;\n  }\n\n  set level(newLevel) {\n    let levels = this._levels;\n    if (levels && levels.length > newLevel) {\n      if (this._level !== newLevel || levels[newLevel].details === undefined) {\n        this.setLevelInternal(newLevel);\n      }\n    }\n  }\n\n setLevelInternal(newLevel) {\n    const levels = this._levels;\n    const hls = this.hls;\n    // check if level idx is valid\n    if (newLevel >= 0 && newLevel < levels.length) {\n      // stopping live reloading timer if any\n      this.cleanTimer();\n      if (this._level !== newLevel) {\n        logger.log(`switching to level ${newLevel}`);\n        this._level = newLevel;\n        var levelProperties = levels[newLevel];\n        levelProperties.level = newLevel;\n        // LEVEL_SWITCH to be deprecated in next major release\n        hls.trigger(Event.LEVEL_SWITCH, levelProperties);\n        hls.trigger(Event.LEVEL_SWITCHING, levelProperties);\n      }\n      var level = levels[newLevel], levelDetails = level.details;\n       // check if we need to load playlist for this level\n      if (!levelDetails || levelDetails.live === true) {\n        // level not retrieved yet, or live playlist we need to (re)load it\n        var urlId = level.urlId;\n        hls.trigger(Event.LEVEL_LOADING, {url: level.url[urlId], level: newLevel, id: urlId});\n      }\n    } else {\n      // invalid level id given, trigger error\n      hls.trigger(Event.ERROR, {type : ErrorTypes.OTHER_ERROR, details: ErrorDetails.LEVEL_SWITCH_ERROR, level: newLevel, fatal: false, reason: 'invalid level idx'});\n    }\n }\n\n  get manualLevel() {\n    return this._manualLevel;\n  }\n\n  set manualLevel(newLevel) {\n    this._manualLevel = newLevel;\n    if (this._startLevel === undefined) {\n      this._startLevel = newLevel;\n    }\n    if (newLevel !== -1) {\n      this.level = newLevel;\n    }\n  }\n\n  get firstLevel() {\n    return this._firstLevel;\n  }\n\n  set firstLevel(newLevel) {\n    this._firstLevel = newLevel;\n  }\n\n  get startLevel() {\n    // hls.startLevel takes precedence over config.startLevel\n    // if none of these values are defined, fallback on this._firstLevel (first quality level appearing in variant manifest)\n    if (this._startLevel === undefined) {\n      let configStartLevel = this.hls.config.startLevel;\n      if (configStartLevel !== undefined) {\n        return configStartLevel;\n      } else {\n        return this._firstLevel;\n      }\n    } else {\n      return this._startLevel;\n    }\n  }\n\n  set startLevel(newLevel) {\n    this._startLevel = newLevel;\n  }\n\n  onError(data) {\n    if(data.fatal) {\n      if (data.type === ErrorTypes.NETWORK_ERROR) {\n        this.cleanTimer();\n      }\n      return;\n    }\n\n    let details = data.details, hls = this.hls, levelId, level, levelError = false;\n    let removeLevel = false;\n    // try to recover not fatal errors\n    switch(details) {\n      case ErrorDetails.FRAG_LOAD_ERROR:\n      case ErrorDetails.FRAG_LOAD_TIMEOUT:\n      case ErrorDetails.FRAG_LOOP_LOADING_ERROR:\n      case ErrorDetails.KEY_LOAD_ERROR:\n      case ErrorDetails.KEY_LOAD_TIMEOUT:\n         levelId = data.frag.level;\n         break;\n      case ErrorDetails.LEVEL_LOAD_ERROR:\n      case ErrorDetails.LEVEL_LOAD_TIMEOUT:\n        levelId = data.context.level;\n        levelError = true;\n        break;\n      case ErrorDetails.REMUX_ALLOC_ERROR:\n        levelId = data.level;\n        break;\n      case ErrorDetails.MANIFEST_EMPTY_ERROR:\n        levelId = data.context.level;\n        levelError = true;\n        removeLevel = true;\n        break;\n      default:\n        break;\n    }\n    /* try to switch to a redundant stream if any available.\n     * if no redundant stream available, emergency switch down (if in auto mode and current level not 0)\n     * otherwise, we cannot recover this network error ...\n     */\n    if (levelId !== undefined) {\n      level = this._levels[levelId];\n      if(!level.loadError) {\n        level.loadError = 1;\n      } else {\n        level.loadError++;\n      }\n      // if any redundant streams available and if we haven't try them all (level.loadError is reseted on successful frag/level load.\n      // if level.loadError reaches nbRedundantLevel it means that we tried them all, no hope  => let's switch down\n      const nbRedundantLevel = level.url.length;\n     if (nbRedundantLevel > 1 && level.loadError < nbRedundantLevel) {\n        level.urlId = (level.urlId + 1) % nbRedundantLevel;\n        level.details = undefined;\n        logger.warn(`level controller,${details} for level ${levelId}: switching to redundant stream id ${level.urlId}`);\n      } else {\n        if (removeLevel) {\n          logger.warn(`Bad level encountered, removing & forcing to auto mode`);\n          this._levels = this.levels.filter((l, index) => index !== levelId);\n          hls.currentLevel = -1;\n          hls.trigger(Event.LEVEL_REMOVED, { level: levelId });\n        }\n        // we could try to recover if in auto mode and current level not lowest level (0)\n        let recoverable = ((this._manualLevel === -1) && levelId);\n        if (recoverable) {\n          logger.warn(`level controller,${details}: switch-down for next fragment`);\n          hls.nextAutoLevel = Math.max(0,levelId-1);\n        } else if(level && level.details && level.details.live) {\n          logger.warn(`level controller,${details} on live stream, discard`);\n          if (levelError) {\n            // reset this._level so that another call to set level() will retrigger a frag load\n            this._level = undefined;\n          }\n          // other errors are handled by stream controller\n        } else if (details === ErrorDetails.LEVEL_LOAD_ERROR ||\n                   details === ErrorDetails.LEVEL_LOAD_TIMEOUT) {\n          let media = hls.media,\n            // 0.5 : tolerance needed as some browsers stalls playback before reaching buffered end\n              mediaBuffered = media && BufferHelper.isBuffered(media,media.currentTime) && BufferHelper.isBuffered(media,media.currentTime+0.5);\n          if (mediaBuffered) {\n            let retryDelay = hls.config.levelLoadingRetryDelay;\n            logger.warn(`level controller,${details}, but media buffered, retry in ${retryDelay}ms`);\n            this.timer = setTimeout(this.ontick,retryDelay);\n            // boolean used to inform stream controller not to switch back to IDLE on non fatal error\n            data.levelRetry = true;\n          } else {\n            logger.error(`cannot recover ${details} error`);\n            this._level = undefined;\n            // stopping live reloading timer if any\n            this.cleanTimer();\n            // switch error to fatal\n            data.fatal = true;\n          }\n        }\n      }\n    }\n  }\n\n  // reset level load error counter on successful frag loaded\n  onFragLoaded(data) {\n    const fragLoaded = data.frag;\n    if (fragLoaded && fragLoaded.type === 'main') {\n      const level = this._levels[fragLoaded.level];\n      if (level) {\n        level.loadError = 0;\n      }\n    }\n  }\n\n  onLevelLoaded(data) {\n    const levelId = data.level;\n     // only process level loaded events matching with expected level\n    if (levelId === this._level) {\n      let curLevel = this._levels[levelId];\n      // reset level load error counter on successful level loaded\n      curLevel.loadError = 0;\n      let newDetails = data.details;\n      // if current playlist is a live playlist, arm a timer to reload it\n      if (newDetails.live) {\n        let reloadInterval = 1000*( newDetails.averagetargetduration ? newDetails.averagetargetduration : newDetails.targetduration),\n            curLevel = this._levels[data.level],\n            curDetails = curLevel.details;\n        if (curDetails && newDetails.endSN === curDetails.endSN) {\n          // follow HLS Spec, If the client reloads a Playlist file and finds that it has not\n          // changed then it MUST wait for a period of one-half the target\n          // duration before retrying.\n          reloadInterval /=2;\n          logger.log(`same live playlist, reload twice faster`);\n        }\n        // decrement reloadInterval with level loading delay\n        reloadInterval -= performance.now() - data.stats.trequest;\n        // in any case, don't reload more than every second\n        reloadInterval = Math.max(1000,Math.round(reloadInterval));\n        logger.log(`live playlist, reload in ${reloadInterval} ms`);\n        this.timer = setTimeout(this.ontick,reloadInterval);\n      } else {\n        this.timer = null;\n      }\n    }\n  }\n\n  tick() {\n    var levelId = this._level;\n    if (levelId !== undefined && this.canload) {\n      var level = this._levels[levelId];\n      if (level && level.url) {\n        var urlId = level.urlId;\n        this.hls.trigger(Event.LEVEL_LOADING, {url: level.url[urlId], level: levelId, id: urlId});\n      }\n    }\n  }\n\n  get nextLoadLevel() {\n    if (this._manualLevel !== -1) {\n      return this._manualLevel;\n    } else {\n     return this.hls.nextAutoLevel;\n    }\n  }\n\n  set nextLoadLevel(nextLevel) {\n    this.level = nextLevel;\n    if (this._manualLevel === -1) {\n      this.hls.nextAutoLevel = nextLevel;\n    }\n  }\n}\n\nexport default LevelController;\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/controller/level-controller.js","/*\n * id3 metadata track controller\n*/\n\nimport Event from '../events';\nimport EventHandler from '../event-handler';\nimport ID3 from '../demux/id3';\n\nclass ID3TrackController extends EventHandler {\n\n  constructor(hls) {\n    super(hls,\n               Event.MEDIA_ATTACHED,\n               Event.MEDIA_DETACHING,\n               Event.FRAG_PARSING_METADATA);\n    this.id3Track = undefined;\n    this.media = undefined;\n  }\n\n  destroy() {\n    EventHandler.prototype.destroy.call(this);\n  }\n\n  // Add ID3 metatadata text track.\n  onMediaAttached(data) {\n    this.media = data.media;\n    if (!this.media) {\n      return;\n    }\n\n    this.id3Track = this.media.addTextTrack('metadata', 'id3');\n    this.id3Track.mode = 'hidden';\n  }\n\n  onMediaDetaching() {\n    this.media = undefined;\n  }\n\n  onFragParsingMetadata(data) {\n    const fragment = data.frag;\n    const samples = data.samples;\n\n    // Attempt to recreate Safari functionality by creating\n    // WebKitDataCue objects when available and store the decoded\n    // ID3 data in the value property of the cue\n    let Cue = window.WebKitDataCue || window.VTTCue || window.TextTrackCue;\n\n    for (let i = 0; i < samples.length; i++) {\n      const frames = ID3.getID3Frames(samples[i].data);\n      if (frames) {\n        const startTime = samples[i].pts;\n        let endTime = i < samples.length - 1 ? samples[i+1].pts : fragment.endPTS;\n\n        // Give a slight bump to the endTime if it's equal to startTime to avoid a SyntaxError in IE\n        if (startTime === endTime) {\n          endTime += 0.0001;\n        }\n\n        for(let j = 0; j < frames.length; j++) {\n          const frame = frames[j];\n          // Safari doesn't put the timestamp frame in the TextTrack\n          if (!ID3.isTimeStampFrame(frame)) {\n            const cue = new Cue(startTime, endTime, '');\n            cue.value = frame;\n            this.id3Track.addCue(cue);\n          }\n        }\n      }\n    }\n  }\n}\n\nexport default ID3TrackController;\n\n\n\n// WEBPACK FOOTER //\n// ./src/controller/id3-track-controller.js","/*\n * compute an Exponential Weighted moving average\n * - https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average\n *  - heavily inspired from shaka-player\n */\n\nclass EWMA {\n\n //  About half of the estimated value will be from the last |halfLife| samples by weight.\n  constructor(halfLife) {\n    // Larger values of alpha expire historical data more slowly.\n    this.alpha_ = halfLife ? Math.exp(Math.log(0.5) / halfLife) : 0;\n    this.estimate_ = 0;\n    this.totalWeight_ = 0;\n  }\n\n  sample(weight,value) {\n    var adjAlpha = Math.pow(this.alpha_, weight);\n    this.estimate_ = value * (1 - adjAlpha) + adjAlpha * this.estimate_;\n    this.totalWeight_ += weight;\n  }\n\n  getTotalWeight() {\n    return this.totalWeight_;\n  }\n\n  getEstimate() {\n    if (this.alpha_) {\n      var zeroFactor = 1 - Math.pow(this.alpha_, this.totalWeight_);\n      return this.estimate_ / zeroFactor;\n    } else {\n      return this.estimate_;\n    }\n  }\n}\n\nexport default EWMA;\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/ewma.js","/*\n * EWMA Bandwidth Estimator\n *  - heavily inspired from shaka-player\n * Tracks bandwidth samples and estimates available bandwidth.\n * Based on the minimum of two exponentially-weighted moving averages with\n * different half-lives.\n */\n\nimport EWMA from '../utils/ewma';\n\n\nclass EwmaBandWidthEstimator {\n\n  constructor(hls,slow,fast,defaultEstimate) {\n    this.hls = hls;\n    this.defaultEstimate_ = defaultEstimate;\n    this.minWeight_ = 0.001;\n    this.minDelayMs_ = 50;\n    this.slow_ = new EWMA(slow);\n    this.fast_ = new EWMA(fast);\n  }\n\n  sample(durationMs,numBytes) {\n    durationMs = Math.max(durationMs, this.minDelayMs_);\n    var bandwidth = 8000* numBytes / durationMs,\n    //console.log('instant bw:'+ Math.round(bandwidth));\n    // we weight sample using loading duration....\n        weight = durationMs / 1000;\n    this.fast_.sample(weight,bandwidth);\n    this.slow_.sample(weight,bandwidth);\n  }\n\n  canEstimate() {\n    let fast = this.fast_;\n    return (fast && fast.getTotalWeight() >= this.minWeight_);\n  }\n\n\n  getEstimate() {\n    if (this.canEstimate()) {\n      //console.log('slow estimate:'+ Math.round(this.slow_.getEstimate()));\n      //console.log('fast estimate:'+ Math.round(this.fast_.getEstimate()));\n      // Take the minimum of these two estimates.  This should have the effect of\n      // adapting down quickly, but up more slowly.\n      return Math.min(this.fast_.getEstimate(),this.slow_.getEstimate());\n    } else {\n      return this.defaultEstimate_;\n    }\n  }\n\n  destroy() {\n  }\n}\nexport default EwmaBandWidthEstimator;\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/ewma-bandwidth-estimator.js","/*\n * simple ABR Controller\n *  - compute next level based on last fragment bw heuristics\n *  - implement an abandon rules triggered if we have less than 2 frag buffered and if computed bw shows that we risk buffer stalling\n */\n\nimport Event from '../events';\nimport EventHandler from '../event-handler';\nimport BufferHelper from '../helper/buffer-helper';\nimport {ErrorDetails} from '../errors';\nimport {logger} from '../utils/logger';\nimport EwmaBandWidthEstimator from '../utils/ewma-bandwidth-estimator';\n\nclass AbrController extends EventHandler {\n\n  constructor(hls) {\n    super(hls, Event.FRAG_LOADING,\n               Event.FRAG_LOADED,\n               Event.FRAG_BUFFERED,\n               Event.ERROR);\n    this.lastLoadedFragLevel = 0;\n    this._nextAutoLevel = -1;\n    this.hls = hls;\n    this.timer = null;\n    this._bwEstimator = null;\n    this.onCheck = this._abandonRulesCheck.bind(this);\n  }\n\n  destroy() {\n    this.clearTimer();\n    EventHandler.prototype.destroy.call(this);\n  }\n\n  onFragLoading(data) {\n    let frag = data.frag;\n    if (frag.type === 'main') {\n      if (!this.timer) {\n        this.timer = setInterval(this.onCheck, 100);\n      }\n      // lazy init of bw Estimator, rationale is that we use different params for Live/VoD\n      // so we need to wait for stream manifest / playlist type to instantiate it.\n      if (!this._bwEstimator) {\n        let hls = this.hls,\n            level = data.frag.level,\n            isLive = hls.levels[level].details.live,\n            config = hls.config,\n            ewmaFast, ewmaSlow;\n\n        if (isLive) {\n          ewmaFast = config.abrEwmaFastLive;\n          ewmaSlow = config.abrEwmaSlowLive;\n        } else {\n          ewmaFast = config.abrEwmaFastVoD;\n          ewmaSlow = config.abrEwmaSlowVoD;\n        }\n        this._bwEstimator = new EwmaBandWidthEstimator(hls,ewmaSlow,ewmaFast,config.abrEwmaDefaultEstimate);\n      }\n      this.fragCurrent = frag;\n    }\n  }\n\n  _abandonRulesCheck() {\n    /*\n      monitor fragment retrieval time...\n      we compute expected time of arrival of the complete fragment.\n      we compare it to expected time of buffer starvation\n    */\n    let hls = this.hls, v = hls.media,frag = this.fragCurrent, loader = frag.loader, minAutoLevel = hls.minAutoLevel;\n\n    // if loader has been destroyed or loading has been aborted, stop timer and return\n    if(!loader || ( loader.stats && loader.stats.aborted)) {\n      logger.warn('frag loader destroy or aborted, disarm abandonRules');\n      this.clearTimer();\n      return;\n    }\n    let stats = loader.stats;\n    /* only monitor frag retrieval time if\n    (video not paused OR first fragment being loaded(ready state === HAVE_NOTHING = 0)) AND autoswitching enabled AND not lowest level (=> means that we have several levels) */\n    if (v && stats && ((!v.paused && (v.playbackRate !== 0)) || !v.readyState) && frag.autoLevel && frag.level) {\n      let requestDelay = performance.now() - stats.trequest,\n          playbackRate = Math.abs(v.playbackRate);\n      // monitor fragment load progress after half of expected fragment duration,to stabilize bitrate\n      if (requestDelay > (500 * frag.duration / playbackRate)) {\n        let levels = hls.levels,\n            loadRate = Math.max(1, stats.bw ? stats.bw / 8 : stats.loaded * 1000 / requestDelay), // byte/s; at least 1 byte/s to avoid division by zero\n            // compute expected fragment length using frag duration and level bitrate. also ensure that expected len is gte than already loaded size\n            level = levels[frag.level],\n            levelBitrate = level.realBitrate ? Math.max(level.realBitrate,level.bitrate) : level.bitrate,\n            expectedLen = stats.total ? stats.total : Math.max(stats.loaded, Math.round(frag.duration * levelBitrate / 8)),\n            pos = v.currentTime,\n            fragLoadedDelay = (expectedLen - stats.loaded) / loadRate,\n            bufferStarvationDelay = (BufferHelper.bufferInfo(v,pos,hls.config.maxBufferHole).end - pos) / playbackRate;\n        // consider emergency switch down only if we have less than 2 frag buffered AND\n        // time to finish loading current fragment is bigger than buffer starvation delay\n        // ie if we risk buffer starvation if bw does not increase quickly\n        if ((bufferStarvationDelay < (2 * frag.duration / playbackRate)) && (fragLoadedDelay > bufferStarvationDelay)) {\n          let fragLevelNextLoadedDelay, nextLoadLevel;\n          // lets iterate through lower level and try to find the biggest one that could avoid rebuffering\n          // we start from current level - 1 and we step down , until we find a matching level\n          for (nextLoadLevel = frag.level - 1 ; nextLoadLevel > minAutoLevel ; nextLoadLevel--) {\n            // compute time to load next fragment at lower level\n            // 0.8 : consider only 80% of current bw to be conservative\n            // 8 = bits per byte (bps/Bps)\n            let levelNextBitrate = levels[nextLoadLevel].realBitrate ? Math.max(levels[nextLoadLevel].realBitrate,levels[nextLoadLevel].bitrate) : levels[nextLoadLevel].bitrate;\n            fragLevelNextLoadedDelay = frag.duration * levelNextBitrate / (8 * 0.8 * loadRate);\n            if (fragLevelNextLoadedDelay < bufferStarvationDelay) {\n              // we found a lower level that be rebuffering free with current estimated bw !\n              break;\n            }\n          }\n          // only emergency switch down if it takes less time to load new fragment at lowest level instead\n          // of finishing loading current one ...\n          if (fragLevelNextLoadedDelay < fragLoadedDelay) {\n            logger.warn(`loading too slow, abort fragment loading and switch to level ${nextLoadLevel}:fragLoadedDelay[${nextLoadLevel}]<fragLoadedDelay[${frag.level-1}];bufferStarvationDelay:${fragLevelNextLoadedDelay.toFixed(1)}<${fragLoadedDelay.toFixed(1)}:${bufferStarvationDelay.toFixed(1)}`);\n            // force next load level in auto mode\n            hls.nextLoadLevel = nextLoadLevel;\n            // update bw estimate for this fragment before cancelling load (this will help reducing the bw)\n            this._bwEstimator.sample(requestDelay,stats.loaded);\n            //abort fragment loading\n            loader.abort();\n            // stop abandon rules timer\n            this.clearTimer();\n            hls.trigger(Event.FRAG_LOAD_EMERGENCY_ABORTED, {frag: frag, stats: stats });\n          }\n        }\n      }\n    }\n  }\n\n  onFragLoaded(data) {\n    let frag = data.frag;\n    if (frag.type === 'main' && !isNaN(frag.sn)) {\n      // stop monitoring bw once frag loaded\n      this.clearTimer();\n      // store level id after successful fragment load\n      this.lastLoadedFragLevel = frag.level;\n      // reset forced auto level value so that next level will be selected\n      this._nextAutoLevel = -1;\n\n      // compute level average bitrate\n      if (this.hls.config.abrMaxWithRealBitrate) {\n        const level = this.hls.levels[frag.level];\n        let loadedBytes = (level.loaded ? level.loaded.bytes : 0) + data.stats.loaded;\n        let loadedDuration = (level.loaded ? level.loaded.duration : 0) + data.frag.duration;\n        level.loaded = { bytes : loadedBytes, duration : loadedDuration };\n        level.realBitrate = Math.round(8*loadedBytes/loadedDuration);\n      }\n      // if fragment has been loaded to perform a bitrate test,\n      if (data.frag.bitrateTest) {\n        let stats = data.stats;\n        stats.tparsed = stats.tbuffered = stats.tload;\n        this.onFragBuffered(data);\n      }\n    }\n  }\n\n  onFragBuffered(data) {\n    var stats = data.stats, frag = data.frag;\n    // only update stats on first frag buffering\n    // if same frag is loaded multiple times, it might be in browser cache, and loaded quickly\n    // and leading to wrong bw estimation\n    // on bitrate test, also only update stats once (if tload = tbuffered == on FRAG_LOADED)\n    if (stats.aborted !== true && frag.loadCounter === 1 && frag.type === 'main' && !isNaN(frag.sn) && ((!frag.bitrateTest || stats.tload === stats.tbuffered))) {\n      // use tparsed-trequest instead of tbuffered-trequest to compute fragLoadingProcessing; rationale is that  buffer appending only happens once media is attached\n      // in case we use config.startFragPrefetch while media is not attached yet, fragment might be parsed while media not attached yet, but it will only be buffered on media attached\n      // as a consequence it could happen really late in the process. meaning that appending duration might appears huge ... leading to underestimated throughput estimation\n      let fragLoadingProcessingMs = stats.tparsed - stats.trequest;\n      logger.log(`latency/loading/parsing/append/kbps:${Math.round(stats.tfirst-stats.trequest)}/${Math.round(stats.tload-stats.tfirst)}/${Math.round(stats.tparsed-stats.tload)}/${Math.round(stats.tbuffered-stats.tparsed)}/${Math.round(8*stats.loaded/(stats.tbuffered-stats.trequest))}`);\n      this._bwEstimator.sample(fragLoadingProcessingMs,stats.loaded);\n      stats.bwEstimate = this._bwEstimator.getEstimate();\n      // if fragment has been loaded to perform a bitrate test, (hls.startLevel = -1), store bitrate test delay duration\n      if (frag.bitrateTest) {\n        this.bitrateTestDelay = fragLoadingProcessingMs/1000;\n      } else {\n        this.bitrateTestDelay = 0;\n      }\n    }\n  }\n\n  onError(data) {\n    // stop timer in case of frag loading error\n    switch(data.details) {\n      case ErrorDetails.FRAG_LOAD_ERROR:\n      case ErrorDetails.FRAG_LOAD_TIMEOUT:\n        this.clearTimer();\n        break;\n      default:\n        break;\n    }\n  }\n\n clearTimer() {\n    clearInterval(this.timer);\n    this.timer = null;\n }\n\n  // return next auto level\n  get nextAutoLevel() {\n    const forcedAutoLevel = this._nextAutoLevel;\n    const bwEstimator = this._bwEstimator;\n    // in case next auto level has been forced, and bw not available or not reliable, return forced value\n    if (forcedAutoLevel !== -1 && (!bwEstimator || !bwEstimator.canEstimate())) {\n      return forcedAutoLevel;\n    }\n    // compute next level using ABR logic\n    let nextABRAutoLevel = this._nextABRAutoLevel;\n    // if forced auto level has been defined, use it to cap ABR computed quality level\n    if (forcedAutoLevel !== -1) {\n      nextABRAutoLevel = Math.min(forcedAutoLevel,nextABRAutoLevel);\n    }\n    return nextABRAutoLevel;\n  }\n  get _nextABRAutoLevel() {\n    var hls = this.hls, maxAutoLevel = hls.maxAutoLevel, levels = hls.levels, config = hls.config, minAutoLevel = hls.minAutoLevel;\n    const v = hls.media,\n          currentLevel = this.lastLoadedFragLevel,\n          currentFragDuration = this.fragCurrent ? this.fragCurrent.duration : 0,\n          pos = (v ? v.currentTime : 0),\n          // playbackRate is the absolute value of the playback rate; if v.playbackRate is 0, we use 1 to load as\n          // if we're playing back at the normal rate.\n          playbackRate = ((v && (v.playbackRate !== 0)) ? Math.abs(v.playbackRate) : 1.0),\n          avgbw = this._bwEstimator ? this._bwEstimator.getEstimate() : config.abrEwmaDefaultEstimate,\n          // bufferStarvationDelay is the wall-clock time left until the playback buffer is exhausted.\n          bufferStarvationDelay = (BufferHelper.bufferInfo(v, pos, config.maxBufferHole).end - pos) / playbackRate;\n\n    // First, look to see if we can find a level matching with our avg bandwidth AND that could also guarantee no rebuffering at all\n    let bestLevel = this._findBestLevel(currentLevel,currentFragDuration,avgbw,minAutoLevel,maxAutoLevel,bufferStarvationDelay,config.abrBandWidthFactor,config.abrBandWidthUpFactor,levels);\n    if (bestLevel >= 0) {\n      return bestLevel;\n    } else {\n      logger.trace('rebuffering expected to happen, lets try to find a quality level minimizing the rebuffering');\n      // not possible to get rid of rebuffering ... let's try to find level that will guarantee less than maxStarvationDelay of rebuffering\n      // if no matching level found, logic will return 0\n      let maxStarvationDelay = currentFragDuration ? Math.min(currentFragDuration,config.maxStarvationDelay) : config.maxStarvationDelay,\n          bwFactor = config.abrBandWidthFactor,\n          bwUpFactor = config.abrBandWidthUpFactor;\n      if (bufferStarvationDelay === 0) {\n        // in case buffer is empty, let's check if previous fragment was loaded to perform a bitrate test\n        let bitrateTestDelay = this.bitrateTestDelay;\n        if (bitrateTestDelay) {\n          // if it is the case, then we need to adjust our max starvation delay using maxLoadingDelay config value\n          // max video loading delay used in  automatic start level selection :\n          // in that mode ABR controller will ensure that video loading time (ie the time to fetch the first fragment at lowest quality level +\n          // the time to fetch the fragment at the appropriate quality level is less than ```maxLoadingDelay``` )\n          // cap maxLoadingDelay and ensure it is not bigger 'than bitrate test' frag duration\n          const maxLoadingDelay = currentFragDuration ? Math.min(currentFragDuration,config.maxLoadingDelay) : config.maxLoadingDelay;\n          maxStarvationDelay = maxLoadingDelay - bitrateTestDelay;\n          logger.trace(`bitrate test took ${Math.round(1000*bitrateTestDelay)}ms, set first fragment max fetchDuration to ${Math.round(1000*maxStarvationDelay)} ms`);\n          // don't use conservative factor on bitrate test\n          bwFactor = bwUpFactor = 1;\n        }\n      }\n      bestLevel = this._findBestLevel(currentLevel,currentFragDuration,avgbw,minAutoLevel,maxAutoLevel,bufferStarvationDelay+maxStarvationDelay,bwFactor,bwUpFactor,levels);\n      return Math.max(bestLevel,0);\n    }\n  }\n\n  _findBestLevel(currentLevel,currentFragDuration,currentBw,minAutoLevel,maxAutoLevel,maxFetchDuration,bwFactor,bwUpFactor,levels) {\n    for (let i = maxAutoLevel; i >= minAutoLevel; i--) {\n      let levelInfo = levels[i],\n          levelDetails = levelInfo.details,\n          avgDuration = levelDetails ? levelDetails.totalduration/levelDetails.fragments.length : currentFragDuration,\n          live = levelDetails ? levelDetails.live : false,\n          adjustedbw;\n    // follow algorithm captured from stagefright :\n    // https://android.googlesource.com/platform/frameworks/av/+/master/media/libstagefright/httplive/LiveSession.cpp\n    // Pick the highest bandwidth stream below or equal to estimated bandwidth.\n    // consider only 80% of the available bandwidth, but if we are switching up,\n    // be even more conservative (70%) to avoid overestimating and immediately\n    // switching back.\n      if (i <= currentLevel) {\n        adjustedbw = bwFactor * currentBw;\n      } else {\n        adjustedbw = bwUpFactor * currentBw;\n      }\n      const bitrate = levels[i].realBitrate ? Math.max(levels[i].realBitrate,levels[i].bitrate) : levels[i].bitrate,\n            fetchDuration = bitrate * avgDuration / adjustedbw;\n\n    logger.trace(`level/adjustedbw/bitrate/avgDuration/maxFetchDuration/fetchDuration: ${i}/${Math.round(adjustedbw)}/${bitrate}/${avgDuration}/${maxFetchDuration}/${fetchDuration}`);\n      // if adjusted bw is greater than level bitrate AND\n      if (adjustedbw > bitrate &&\n      // fragment fetchDuration unknown OR live stream OR fragment fetchDuration less than max allowed fetch duration, then this level matches\n      // we don't account for max Fetch Duration for live streams, this is to avoid switching down when near the edge of live sliding window ...\n      // special case to support startLevel = -1 (bitrateTest) on live streams : in that case we should not exit loop so that _findBestLevel will return -1\n        (!fetchDuration || (live  && !this.bitrateTestDelay) || fetchDuration < maxFetchDuration) ) {\n        // as we are looping from highest to lowest, this will return the best achievable quality level\n        return i;\n      }\n    }\n    // not enough time budget even with quality level 0 ... rebuffering might happen\n    return -1;\n  }\n\n  set nextAutoLevel(nextLevel) {\n    this._nextAutoLevel = nextLevel;\n  }\n}\n\nexport default AbrController;\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/controller/abr-controller.js","/*\n * Buffer Controller\n*/\n\nimport Event from '../events';\nimport EventHandler from '../event-handler';\nimport {logger} from '../utils/logger';\nimport {ErrorTypes, ErrorDetails} from '../errors';\n\n\nclass BufferController extends EventHandler {\n\n  constructor(hls) {\n    super(hls,\n      Event.MEDIA_ATTACHING,\n      Event.MEDIA_DETACHING,\n      Event.MANIFEST_PARSED,\n      Event.BUFFER_RESET,\n      Event.BUFFER_APPENDING,\n      Event.BUFFER_CODECS,\n      Event.BUFFER_EOS,\n      Event.BUFFER_FLUSHING,\n      Event.LEVEL_PTS_UPDATED,\n      Event.LEVEL_UPDATED);\n\n    // the value that we have set mediasource.duration to\n    // (the actual duration may be tweaked slighly by the browser)\n    this._msDuration = null;\n    // the value that we want to set mediaSource.duration to\n    this._levelDuration = null;\n\n    // Source Buffer listeners\n    this.onsbue = this.onSBUpdateEnd.bind(this);\n    this.onsbe  = this.onSBUpdateError.bind(this);\n    this.pendingTracks = {};\n    this.tracks = {};\n  }\n\n  destroy() {\n    EventHandler.prototype.destroy.call(this);\n  }\n\n  onLevelPtsUpdated(data) {\n    let type = data.type;\n    let audioTrack = this.tracks.audio;\n\n    // Adjusting `SourceBuffer.timestampOffset` (desired point in the timeline where the next frames should be appended)\n    // in Chrome browser when we detect MPEG audio container and time delta between level PTS and `SourceBuffer.timestampOffset`\n    // is greater than 100ms (this is enough to handle seek for VOD or level change for LIVE videos). At the time of change we issue\n    // `SourceBuffer.abort()` and adjusting `SourceBuffer.timestampOffset` if `SourceBuffer.updating` is false or awaiting `updateend`\n    // event if SB is in updating state.\n    // More info here: https://github.com/video-dev/hls.js/issues/332#issuecomment-257986486\n\n    if (type === 'audio' && audioTrack && audioTrack.container === 'audio/mpeg') { // Chrome audio mp3 track\n      let audioBuffer = this.sourceBuffer.audio;\n      let delta = Math.abs(audioBuffer.timestampOffset - data.start);\n\n      // adjust timestamp offset if time delta is greater than 100ms\n      if (delta > 0.1) {\n        let updating = audioBuffer.updating;\n\n        try {\n          audioBuffer.abort();\n        } catch (err) {\n          updating = true;\n          logger.warn('can not abort audio buffer: ' + err);\n        }\n\n        if (!updating) {\n          logger.warn('change mpeg audio timestamp offset from ' + audioBuffer.timestampOffset + ' to ' + data.start);\n          audioBuffer.timestampOffset = data.start;\n        } else {\n          this.audioTimestampOffset = data.start;\n        }\n      }\n    }\n  }\n\n  onManifestParsed(data) {\n    let audioExpected = data.audio,\n        videoExpected = data.video || (data.levels.length && data.audio),\n        sourceBufferNb = 0;\n    // in case of alt audio 2 BUFFER_CODECS events will be triggered, one per stream controller\n    // sourcebuffers will be created all at once when the expected nb of tracks will be reached\n    // in case alt audio is not used, only one BUFFER_CODEC event will be fired from main stream controller\n    // it will contain the expected nb of source buffers, no need to compute it\n    if (data.altAudio && (audioExpected || videoExpected)) {\n      sourceBufferNb = (audioExpected ? 1 : 0) + (videoExpected ? 1 : 0);\n      logger.log(`${sourceBufferNb} sourceBuffer(s) expected`);\n    }\n    this.sourceBufferNb = sourceBufferNb;\n  }\n\n  onMediaAttaching(data) {\n    let media = this.media = data.media;\n    if (media) {\n      // setup the media source\n      var ms = this.mediaSource = new MediaSource();\n      //Media Source listeners\n      this.onmso = this.onMediaSourceOpen.bind(this);\n      this.onmse = this.onMediaSourceEnded.bind(this);\n      this.onmsc = this.onMediaSourceClose.bind(this);\n      ms.addEventListener('sourceopen', this.onmso);\n      ms.addEventListener('sourceended', this.onmse);\n      ms.addEventListener('sourceclose', this.onmsc);\n      // link video and media Source\n      media.src = URL.createObjectURL(ms);\n    }\n  }\n\n  onMediaDetaching() {\n    logger.log('media source detaching');\n    var ms = this.mediaSource;\n    if (ms) {\n      if (ms.readyState === 'open') {\n        try {\n          // endOfStream could trigger exception if any sourcebuffer is in updating state\n          // we don't really care about checking sourcebuffer state here,\n          // as we are anyway detaching the MediaSource\n          // let's just avoid this exception to propagate\n          ms.endOfStream();\n        } catch(err) {\n          logger.warn(`onMediaDetaching:${err.message} while calling endOfStream`);\n        }\n      }\n      ms.removeEventListener('sourceopen', this.onmso);\n      ms.removeEventListener('sourceended', this.onmse);\n      ms.removeEventListener('sourceclose', this.onmsc);\n\n      // Detach properly the MediaSource from the HTMLMediaElement as\n      // suggested in https://github.com/w3c/media-source/issues/53.\n      if (this.media) {\n        URL.revokeObjectURL(this.media.src);\n        this.media.removeAttribute('src');\n        this.media.load();\n      }\n\n      this.mediaSource = null;\n      this.media = null;\n      this.pendingTracks = {};\n      this.tracks = {};\n      this.sourceBuffer = {};\n      this.flushRange = [];\n      this.segments = [];\n      this.appended = 0;\n    }\n    this.onmso = this.onmse = this.onmsc = null;\n    this.hls.trigger(Event.MEDIA_DETACHED);\n  }\n\n  onMediaSourceOpen() {\n    logger.log('media source opened');\n    this.hls.trigger(Event.MEDIA_ATTACHED, { media : this.media });\n    let mediaSource = this.mediaSource;\n    if (mediaSource) {\n      // once received, don't listen anymore to sourceopen event\n      mediaSource.removeEventListener('sourceopen', this.onmso);\n    }\n    this.checkPendingTracks();\n  }\n\n  checkPendingTracks() {\n    // if any buffer codecs pending, check if we have enough to create sourceBuffers\n    let pendingTracks = this.pendingTracks,\n        pendingTracksNb = Object.keys(pendingTracks).length;\n    // if any pending tracks and (if nb of pending tracks gt or equal than expected nb or if unknown expected nb)\n    if (pendingTracksNb && (\n        this.sourceBufferNb <= pendingTracksNb ||\n        this.sourceBufferNb === 0)) {\n      // ok, let's create them now !\n      this.createSourceBuffers(pendingTracks);\n      this.pendingTracks = {};\n      // append any pending segments now !\n      this.doAppending();\n    }\n  }\n\n  onMediaSourceClose() {\n    logger.log('media source closed');\n  }\n\n  onMediaSourceEnded() {\n    logger.log('media source ended');\n  }\n\n\n  onSBUpdateEnd() {\n    // update timestampOffset\n    if (this.audioTimestampOffset) {\n      let audioBuffer = this.sourceBuffer.audio;\n      logger.warn('change mpeg audio timestamp offset from ' + audioBuffer.timestampOffset + ' to ' + this.audioTimestampOffset);\n      audioBuffer.timestampOffset = this.audioTimestampOffset;\n      delete this.audioTimestampOffset;\n    }\n\n    if (this._needsFlush) {\n      this.doFlush();\n    }\n\n    if (this._needsEos) {\n      this.checkEos();\n    }\n    this.appending = false;\n    let parent = this.parent;\n    // count nb of pending segments waiting for appending on this sourcebuffer\n    let pending = this.segments.reduce( (counter, segment) => (segment.parent === parent) ? counter + 1 : counter , 0);\n    this.hls.trigger(Event.BUFFER_APPENDED, { parent : parent, pending : pending });\n\n    // don't append in flushing mode\n    if (!this._needsFlush) {\n      this.doAppending();\n    }\n\n    this.updateMediaElementDuration();\n  }\n\n  onSBUpdateError(event) {\n    logger.error('sourceBuffer error:', event);\n    // according to http://www.w3.org/TR/media-source/#sourcebuffer-append-error\n    // this error might not always be fatal (it is fatal if decode error is set, in that case\n    // it will be followed by a mediaElement error ...)\n    this.hls.trigger(Event.ERROR, {type: ErrorTypes.MEDIA_ERROR, details: ErrorDetails.BUFFER_APPENDING_ERROR, fatal: false});\n    // we don't need to do more than that, as accordin to the spec, updateend will be fired just after\n  }\n\n  onBufferReset() {\n    var sourceBuffer = this.sourceBuffer;\n    for(var type in sourceBuffer) {\n      var sb = sourceBuffer[type];\n      try {\n        this.mediaSource.removeSourceBuffer(sb);\n        sb.removeEventListener('updateend', this.onsbue);\n        sb.removeEventListener('error', this.onsbe);\n      } catch(err) {\n      }\n    }\n    this.sourceBuffer = {};\n    this.flushRange = [];\n    this.segments = [];\n    this.appended = 0;\n  }\n\n  onBufferCodecs(tracks) {\n    // if source buffer(s) not created yet, appended buffer tracks in this.pendingTracks\n    // if sourcebuffers already created, do nothing ...\n    if (Object.keys(this.sourceBuffer).length === 0) {\n      for (var trackName in tracks) { this.pendingTracks[trackName] = tracks[trackName]; }\n      let mediaSource = this.mediaSource;\n      if (mediaSource && mediaSource.readyState === 'open') {\n        // try to create sourcebuffers if mediasource opened\n        this.checkPendingTracks();\n      }\n    }\n  }\n\n\n  createSourceBuffers(tracks) {\n    var sourceBuffer = this.sourceBuffer,mediaSource = this.mediaSource;\n\n    for (let trackName in tracks) {\n      if(!sourceBuffer[trackName]) {\n        let track = tracks[trackName];\n        // use levelCodec as first priority\n        let codec = track.levelCodec || track.codec;\n        let mimeType = `${track.container};codecs=${codec}`;\n        logger.log(`creating sourceBuffer(${mimeType})`);\n        try {\n          let sb = sourceBuffer[trackName] = mediaSource.addSourceBuffer(mimeType);\n          sb.addEventListener('updateend', this.onsbue);\n          sb.addEventListener('error', this.onsbe);\n          this.tracks[trackName] = {codec: codec, container: track.container};\n          track.buffer = sb;\n        } catch(err) {\n          logger.error(`error while trying to add sourceBuffer:${err.message}`);\n          this.hls.trigger(Event.ERROR, {type: ErrorTypes.MEDIA_ERROR, details: ErrorDetails.BUFFER_ADD_CODEC_ERROR, fatal: false, err: err, mimeType : mimeType});\n        }\n      }\n    }\n    this.hls.trigger(Event.BUFFER_CREATED, { tracks : tracks } );\n  }\n\n  onBufferAppending(data) {\n    if (!this._needsFlush) {\n      if (!this.segments) {\n        this.segments = [ data ];\n      } else {\n        this.segments.push(data);\n      }\n      this.doAppending();\n    }\n  }\n\n  onBufferAppendFail(data) {\n    logger.error('sourceBuffer error:',data.event);\n    // according to http://www.w3.org/TR/media-source/#sourcebuffer-append-error\n    // this error might not always be fatal (it is fatal if decode error is set, in that case\n    // it will be followed by a mediaElement error ...)\n    this.hls.trigger(Event.ERROR, {type: ErrorTypes.MEDIA_ERROR, details: ErrorDetails.BUFFER_APPENDING_ERROR, fatal: false});\n  }\n\n  // on BUFFER_EOS mark matching sourcebuffer(s) as ended and trigger checkEos()\n  onBufferEos(data) {\n    var sb = this.sourceBuffer;\n    let dataType = data.type;\n    for(let type in sb) {\n      if (!dataType || type === dataType) {\n        if (!sb[type].ended) {\n          sb[type].ended = true;\n          logger.log(`${type} sourceBuffer now EOS`);\n        }\n      }\n    }\n    this.checkEos();\n  }\n\n // if all source buffers are marked as ended, signal endOfStream() to MediaSource.\n checkEos() {\n    var sb = this.sourceBuffer, mediaSource = this.mediaSource;\n    if (!mediaSource || mediaSource.readyState !== 'open') {\n      this._needsEos = false;\n      return;\n    }\n    for(let type in sb) {\n      let sbobj = sb[type];\n      if (!sbobj.ended) {\n        return;\n      }\n      if(sbobj.updating) {\n        this._needsEos = true;\n        return;\n      }\n    }\n    logger.log('all media data available, signal endOfStream() to MediaSource and stop loading fragment');\n    //Notify the media element that it now has all of the media data\n    try {\n      mediaSource.endOfStream();\n    } catch(e) {\n      logger.warn('exception while calling mediaSource.endOfStream()');\n    }\n    this._needsEos = false;\n }\n\n\n  onBufferFlushing(data) {\n    this.flushRange.push({start: data.startOffset, end: data.endOffset, type : data.type});\n    // attempt flush immediatly\n    this.flushBufferCounter = 0;\n    this.doFlush();\n  }\n\n  onLevelUpdated(event) {\n    let details = event.details;\n    if (details.fragments.length === 0) {\n      return;\n    }\n    this._levelDuration = details.totalduration + details.fragments[0].start;\n    this.updateMediaElementDuration();\n  }\n\n  // https://github.com/video-dev/hls.js/issues/355\n  updateMediaElementDuration() {\n    let media = this.media,\n        mediaSource = this.mediaSource,\n        sourceBuffer = this.sourceBuffer,\n        levelDuration = this._levelDuration;\n    if (levelDuration === null || !media || !mediaSource || !sourceBuffer || media.readyState === 0 || mediaSource.readyState !== 'open') {\n      return;\n    }\n    for (let type in sourceBuffer) {\n      if (sourceBuffer[type].updating) {\n        // can't set duration whilst a buffer is updating\n        return;\n      }\n    }\n    if (this._msDuration === null) {\n      // initialise to the value that the media source is reporting\n      this._msDuration = mediaSource.duration;\n    }\n    let duration = media.duration;\n    // levelDuration was the last value we set.\n    // not using mediaSource.duration as the browser may tweak this value\n    // only update mediasource duration if its value increase, this is to avoid\n    // flushing already buffered portion when switching between quality level\n    if ((levelDuration > this._msDuration && levelDuration > duration) || (duration === Infinity || isNaN(duration) )) {\n      logger.log(`Updating mediasource duration to ${levelDuration.toFixed(3)}`);\n      this._msDuration = mediaSource.duration = levelDuration;\n    }\n  }\n\n  doFlush() {\n    // loop through all buffer ranges to flush\n    while(this.flushRange.length) {\n      var range = this.flushRange[0];\n      // flushBuffer will abort any buffer append in progress and flush Audio/Video Buffer\n      if (this.flushBuffer(range.start, range.end, range.type)) {\n        // range flushed, remove from flush array\n        this.flushRange.shift();\n        this.flushBufferCounter = 0;\n      } else {\n        this._needsFlush = true;\n        // avoid looping, wait for SB update end to retrigger a flush\n        return;\n      }\n    }\n    if (this.flushRange.length === 0) {\n      // everything flushed\n      this._needsFlush = false;\n\n      // let's recompute this.appended, which is used to avoid flush looping\n      var appended = 0;\n      var sourceBuffer = this.sourceBuffer;\n      try {\n        for (var type in sourceBuffer) {\n          appended += sourceBuffer[type].buffered.length;\n        }\n      } catch(error) {\n        // error could be thrown while accessing buffered, in case sourcebuffer has already been removed from MediaSource\n        // this is harmess at this stage, catch this to avoid reporting an internal exception\n        logger.error('error while accessing sourceBuffer.buffered');\n      }\n      this.appended = appended;\n      this.hls.trigger(Event.BUFFER_FLUSHED);\n    }\n  }\n\n  doAppending() {\n    var hls = this.hls, sourceBuffer = this.sourceBuffer, segments = this.segments;\n    if (Object.keys(sourceBuffer).length) {\n      if (this.media.error) {\n        this.segments = [];\n        logger.error('trying to append although a media error occured, flush segment and abort');\n        return;\n      }\n      if (this.appending) {\n        //logger.log(`sb appending in progress`);\n        return;\n      }\n      if (segments && segments.length) {\n        let segment = segments.shift();\n        try {\n          let type = segment.type, sb = sourceBuffer[type];\n          if(sb) {\n            if(!sb.updating) {\n              // reset sourceBuffer ended flag before appending segment\n              sb.ended = false;\n              //logger.log(`appending ${segment.content} ${type} SB, size:${segment.data.length}, ${segment.parent}`);\n              this.parent = segment.parent;\n              sb.appendBuffer(segment.data);\n              this.appendError = 0;\n              this.appended++;\n              this.appending = true;\n            } else {\n              segments.unshift(segment);\n            }\n          } else {\n            // in case we don't have any source buffer matching with this segment type,\n            // it means that Mediasource fails to create sourcebuffer\n            // discard this segment, and trigger update end\n            this.onSBUpdateEnd();\n          }\n        } catch(err) {\n          // in case any error occured while appending, put back segment in segments table\n          logger.error(`error while trying to append buffer:${err.message}`);\n          segments.unshift(segment);\n          var event = {type: ErrorTypes.MEDIA_ERROR, parent : segment.parent};\n          if(err.code !== 22) {\n            if (this.appendError) {\n              this.appendError++;\n            } else {\n              this.appendError = 1;\n            }\n            event.details = ErrorDetails.BUFFER_APPEND_ERROR;\n            /* with UHD content, we could get loop of quota exceeded error until\n              browser is able to evict some data from sourcebuffer. retrying help recovering this\n            */\n            if (this.appendError > hls.config.appendErrorMaxRetry) {\n              logger.log(`fail ${hls.config.appendErrorMaxRetry} times to append segment in sourceBuffer`);\n              segments = [];\n              event.fatal = true;\n              hls.trigger(Event.ERROR, event);\n              return;\n            } else {\n              event.fatal = false;\n              hls.trigger(Event.ERROR, event);\n            }\n          } else {\n            // QuotaExceededError: http://www.w3.org/TR/html5/infrastructure.html#quotaexceedederror\n            // let's stop appending any segments, and report BUFFER_FULL_ERROR error\n            this.segments = [];\n            event.details = ErrorDetails.BUFFER_FULL_ERROR;\n            event.fatal = false;\n            hls.trigger(Event.ERROR,event);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /*\n    flush specified buffered range,\n    return true once range has been flushed.\n    as sourceBuffer.remove() is asynchronous, flushBuffer will be retriggered on sourceBuffer update end\n  */\n  flushBuffer(startOffset, endOffset, typeIn) {\n    var sb, i, bufStart, bufEnd, flushStart, flushEnd, sourceBuffer = this.sourceBuffer;\n    if (Object.keys(sourceBuffer).length) {\n      logger.log(`flushBuffer,pos/start/end: ${this.media.currentTime.toFixed(3)}/${startOffset}/${endOffset}`);\n      // safeguard to avoid infinite looping : don't try to flush more than the nb of appended segments\n      if (this.flushBufferCounter < this.appended) {\n        for (var type in sourceBuffer) {\n          // check if sourcebuffer type is defined (typeIn): if yes, let's only flush this one\n          // if no, let's flush all sourcebuffers\n          if (typeIn && type !== typeIn) {\n            continue;\n          }\n          sb = sourceBuffer[type];\n          // we are going to flush buffer, mark source buffer as 'not ended'\n          sb.ended = false;\n          if (!sb.updating) {\n            try {\n              for (i = 0; i < sb.buffered.length; i++) {\n                bufStart = sb.buffered.start(i);\n                bufEnd = sb.buffered.end(i);\n                // workaround firefox not able to properly flush multiple buffered range.\n                if (navigator.userAgent.toLowerCase().indexOf('firefox') !== -1 && endOffset === Number.POSITIVE_INFINITY) {\n                  flushStart = startOffset;\n                  flushEnd = endOffset;\n                } else {\n                  flushStart = Math.max(bufStart, startOffset);\n                  flushEnd = Math.min(bufEnd, endOffset);\n                }\n                /* sometimes sourcebuffer.remove() does not flush\n                   the exact expected time range.\n                   to avoid rounding issues/infinite loop,\n                   only flush buffer range of length greater than 500ms.\n                */\n                if (Math.min(flushEnd,bufEnd) - flushStart > 0.5 ) {\n                  this.flushBufferCounter++;\n                  logger.log(`flush ${type} [${flushStart},${flushEnd}], of [${bufStart},${bufEnd}], pos:${this.media.currentTime}`);\n                  sb.remove(flushStart, flushEnd);\n                  return false;\n                }\n              }\n            } catch(e) {\n              logger.warn('exception while accessing sourcebuffer, it might have been removed from MediaSource');\n            }\n          } else {\n            //logger.log('abort ' + type + ' append in progress');\n            // this will abort any appending in progress\n            //sb.abort();\n            logger.warn('cannot flush, sb updating in progress');\n            return false;\n          }\n        }\n      } else {\n        logger.warn('abort flushing too many retries');\n      }\n      logger.log('buffer flushed');\n    }\n    // everything flushed !\n    return true;\n  }\n}\n\nexport default BufferController;\n\n\n\n// WEBPACK FOOTER //\n// ./src/controller/buffer-controller.js","/*\n * cap stream level to media size dimension controller\n*/\n\nimport Event from '../events';\nimport EventHandler from '../event-handler';\n\nclass CapLevelController extends EventHandler {\n\tconstructor(hls) {\n    super(hls,\n      Event.FPS_DROP_LEVEL_CAPPING,\n      Event.MEDIA_ATTACHING,\n      Event.MANIFEST_PARSED);\n\t}\n\n\tdestroy() {\n    if (this.hls.config.capLevelToPlayerSize) {\n      this.media = this.restrictedLevels = null;\n      this.autoLevelCapping = Number.POSITIVE_INFINITY;\n      if (this.timer) {\n        this.timer = clearInterval(this.timer);\n      }\n    }\n  }\n\n  onFpsDropLevelCapping(data) {\n\t  // Don't add a restricted level more than once\n    if (CapLevelController.isLevelAllowed(data.droppedLevel, this.restrictedLevels)) {\n      this.restrictedLevels.push(data.droppedLevel);\n    }\n  }\n\n\tonMediaAttaching(data) {\n    this.media = data.media instanceof HTMLVideoElement ? data.media : null;\n  }\n\n  onManifestParsed(data) {\n    const hls = this.hls;\n    this.restrictedLevels = [];\n    if (hls.config.capLevelToPlayerSize) {\n      this.autoLevelCapping = Number.POSITIVE_INFINITY;\n      this.levels = data.levels;\n      hls.firstLevel = this.getMaxLevel(data.firstLevel);\n      clearInterval(this.timer);\n      this.timer = setInterval(this.detectPlayerSize.bind(this), 1000);\n      this.detectPlayerSize();\n    }\n  }\n\n  detectPlayerSize() {\n    if (this.media) {\n      let levelsLength = this.levels ? this.levels.length : 0;\n      if (levelsLength) {\n        const hls = this.hls;\n        hls.autoLevelCapping = this.getMaxLevel(levelsLength - 1);\n        if (hls.autoLevelCapping > this.autoLevelCapping) {\n          // if auto level capping has a higher value for the previous one, flush the buffer using nextLevelSwitch\n          // usually happen when the user go to the fullscreen mode.\n          hls.streamController.nextLevelSwitch();\n        }\n        this.autoLevelCapping = hls.autoLevelCapping;\n      }\n    }\n  }\n\n  /*\n  * returns level should be the one with the dimensions equal or greater than the media (player) dimensions (so the video will be downscaled)\n  */\n  getMaxLevel(capLevelIndex) {\n    if (!this.levels) {\n      return -1;\n    }\n\n    const validLevels = this.levels.filter((level, index) =>\n      CapLevelController.isLevelAllowed(index, this.restrictedLevels) && index <= capLevelIndex\n    );\n\n    return CapLevelController.getMaxLevelByMediaSize(validLevels, this.mediaWidth, this.mediaHeight);\n  }\n\n  get mediaWidth() {\n    let width;\n    const media = this.media;\n    if (media) {\n      width = media.width || media.clientWidth || media.offsetWidth;\n      width *= CapLevelController.contentScaleFactor;\n    }\n    return width;\n  }\n\n  get mediaHeight() {\n    let height;\n    const media = this.media;\n    if (media) {\n      height = media.height || media.clientHeight || media.offsetHeight;\n      height *= CapLevelController.contentScaleFactor;\n    }\n    return height;\n  }\n\n  static get contentScaleFactor() {\n    let pixelRatio = 1;\n    try {\n      pixelRatio =  window.devicePixelRatio;\n    } catch(e) {}\n    return pixelRatio;\n  }\n\n  static isLevelAllowed(level, restrictedLevels = []) {\n    return restrictedLevels.indexOf(level) === -1;\n  }\n\n  static getMaxLevelByMediaSize(levels, width, height) {\n    if (!levels || (levels && !levels.length)) {\n      return -1;\n    }\n\n    // Levels can have the same dimensions but differing bandwidths - since levels are ordered, we can look to the next\n    // to determine whether we've chosen the greatest bandwidth for the media's dimensions\n    const atGreatestBandiwdth = (curLevel, nextLevel) => {\n      if (!nextLevel) {\n        return true;\n      }\n      return curLevel.width !== nextLevel.width || curLevel.height !== nextLevel.height;\n    };\n\n    // If we run through the loop without breaking, the media's dimensions are greater than every level, so default to\n    // the max level\n    let maxLevelIndex = levels.length - 1;\n\n    for (let i = 0; i < levels.length; i+= 1) {\n      const level = levels[i];\n      if ((level.width >= width || level.height >= height) && atGreatestBandiwdth(level, levels[i + 1])) {\n        maxLevelIndex = i;\n        break;\n      }\n    }\n\n    return maxLevelIndex;\n  }\n}\n\nexport default CapLevelController;\n\n\n\n// WEBPACK FOOTER //\n// ./src/controller/cap-level-controller.js","/*\n * FPS Controller\n*/\n\nimport Event from '../events';\nimport EventHandler from '../event-handler';\nimport {logger} from '../utils/logger';\n\nclass FPSController extends EventHandler{\n\n  constructor(hls) {\n    super(hls, Event.MEDIA_ATTACHING);\n  }\n\n  destroy() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n    this.isVideoPlaybackQualityAvailable = false;\n  }\n\n  onMediaAttaching(data) {\n    const config = this.hls.config;\n    if (config.capLevelOnFPSDrop) {\n      const video = this.video = data.media instanceof HTMLVideoElement ? data.media : null;\n      if (typeof video.getVideoPlaybackQuality === 'function') {\n        this.isVideoPlaybackQualityAvailable = true;\n      }\n      clearInterval(this.timer);\n      this.timer = setInterval(this.checkFPSInterval.bind(this), config.fpsDroppedMonitoringPeriod);\n    }\n  }\n\n  checkFPS(video, decodedFrames, droppedFrames) {\n    let currentTime = performance.now();\n    if (decodedFrames) {\n      if (this.lastTime) {\n        let currentPeriod = currentTime - this.lastTime,\n            currentDropped = droppedFrames - this.lastDroppedFrames,\n            currentDecoded = decodedFrames - this.lastDecodedFrames,\n            droppedFPS = 1000 * currentDropped / currentPeriod,\n            hls = this.hls;\n        hls.trigger(Event.FPS_DROP, {currentDropped: currentDropped, currentDecoded: currentDecoded, totalDroppedFrames: droppedFrames});\n        if (droppedFPS > 0) {\n          //logger.log('checkFPS : droppedFPS/decodedFPS:' + droppedFPS/(1000 * currentDecoded / currentPeriod));\n          if (currentDropped > hls.config.fpsDroppedMonitoringThreshold * currentDecoded) {\n            let currentLevel = hls.currentLevel;\n            logger.warn('drop FPS ratio greater than max allowed value for currentLevel: ' + currentLevel);\n            if (currentLevel > 0 && (hls.autoLevelCapping === -1 || hls.autoLevelCapping >= currentLevel)) {\n              currentLevel = currentLevel - 1;\n              hls.trigger(Event.FPS_DROP_LEVEL_CAPPING, {level: currentLevel, droppedLevel: hls.currentLevel});\n              hls.autoLevelCapping = currentLevel;\n              hls.streamController.nextLevelSwitch();\n            }\n          }\n        }\n      }\n      this.lastTime = currentTime;\n      this.lastDroppedFrames = droppedFrames;\n      this.lastDecodedFrames = decodedFrames;\n    }\n  }\n\n  checkFPSInterval() {\n    const video = this.video;\n    if (video) {\n      if (this.isVideoPlaybackQualityAvailable) {\n        let videoPlaybackQuality = video.getVideoPlaybackQuality();\n        this.checkFPS(video, videoPlaybackQuality.totalVideoFrames, videoPlaybackQuality.droppedVideoFrames);\n      } else {\n        this.checkFPS(video, video.webkitDecodedFrameCount, video.webkitDroppedFrameCount);\n      }\n    }\n  }\n}\n\nexport default FPSController;\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/controller/fps-controller.js","/**\n * XHR based logger\n*/\n\nimport {logger} from '../utils/logger';\n\nclass XhrLoader {\n\n  constructor(config) {\n    if (config && config.xhrSetup) {\n      this.xhrSetup = config.xhrSetup;\n    }\n  }\n\n  destroy() {\n    this.abort();\n    this.loader = null;\n  }\n\n  abort() {\n    var loader = this.loader;\n    if (loader && loader.readyState !== 4) {\n      this.stats.aborted = true;\n      loader.abort();\n    }\n\n    window.clearTimeout(this.requestTimeout);\n    this.requestTimeout = null;\n    window.clearTimeout(this.retryTimeout);\n    this.retryTimeout = null;\n  }\n\n  load(context, config, callbacks) {\n    this.context = context;\n    this.config = config;\n    this.callbacks = callbacks;\n    this.stats = {trequest: performance.now(), retry: 0};\n    this.retryDelay = config.retryDelay;\n    this.loadInternal();\n  }\n\n  loadInternal() {\n    var xhr, context = this.context;\n\n    if (typeof XDomainRequest !== 'undefined') {\n       xhr = this.loader = new XDomainRequest();\n    } else {\n       xhr = this.loader = new XMLHttpRequest();\n    }\n    let stats = this.stats;\n    stats.tfirst = 0;\n    stats.loaded = 0;\n    const xhrSetup = this.xhrSetup;\n\n    try {\n      if (xhrSetup) {\n        try {\n          xhrSetup(xhr, context.url);\n        } catch (e) {\n          // fix xhrSetup: (xhr, url) => {xhr.setRequestHeader(\"Content-Language\", \"test\");}\n          // not working, as xhr.setRequestHeader expects xhr.readyState === OPEN\n          xhr.open('GET', context.url, true);\n          xhrSetup(xhr, context.url);\n        }\n      }\n      if (!xhr.readyState) {\n        xhr.open('GET', context.url, true);\n      }\n    } catch (e) {\n      // IE11 throws an exception on xhr.open if attempting to access an HTTP resource over HTTPS\n      this.callbacks.onError({ code : xhr.status, text: e.message }, context);\n      return;\n    }\n\n    if (context.rangeEnd) {\n      xhr.setRequestHeader('Range','bytes=' + context.rangeStart + '-' + (context.rangeEnd-1));\n    }\n    xhr.onreadystatechange = this.readystatechange.bind(this);\n    xhr.onprogress = this.loadprogress.bind(this);\n    xhr.responseType = context.responseType;\n\n    // setup timeout before we perform request\n    this.requestTimeout = window.setTimeout(this.loadtimeout.bind(this), this.config.timeout);\n    xhr.send();\n  }\n\n  readystatechange(event) {\n    var xhr = event.currentTarget,\n        readyState = xhr.readyState,\n        stats = this.stats,\n        context = this.context,\n        config = this.config;\n\n    // don't proceed if xhr has been aborted\n    if (stats.aborted) {\n      return;\n    }\n\n    // >= HEADERS_RECEIVED\n    if (readyState >=2) {\n      // clear xhr timeout and rearm it if readyState less than 4\n      window.clearTimeout(this.requestTimeout);\n      if (stats.tfirst === 0) {\n        stats.tfirst = Math.max(performance.now(), stats.trequest);\n      }\n      if (readyState === 4) {\n        let status = xhr.status;\n        // http status between 200 to 299 are all successful\n        if (status >= 200 && status < 300)  {\n          stats.tload = Math.max(stats.tfirst,performance.now());\n          let data,len;\n          if (context.responseType === 'arraybuffer') {\n            data = xhr.response;\n            len = data.byteLength;\n          } else {\n            data = xhr.responseText;\n            len = data.length;\n          }\n          stats.loaded = stats.total = len;\n          let response = { url : xhr.responseURL, data : data };\n          this.callbacks.onSuccess(response, stats, context, xhr);\n        } else {\n            // if max nb of retries reached or if http status between 400 and 499 (such error cannot be recovered, retrying is useless), return error\n          if (stats.retry >= config.maxRetry || (status >= 400 && status < 499)) {\n            logger.error(`${status} while loading ${context.url}` );\n            this.callbacks.onError({ code : status, text : xhr.statusText}, context, xhr);\n          } else {\n            // retry\n            logger.warn(`${status} while loading ${context.url}, retrying in ${this.retryDelay}...`);\n            // aborts and resets internal state\n            this.destroy();\n            // schedule retry\n            this.retryTimeout = window.setTimeout(this.loadInternal.bind(this), this.retryDelay);\n            // set exponential backoff\n            this.retryDelay = Math.min(2 * this.retryDelay, config.maxRetryDelay);\n            stats.retry++;\n          }\n        }\n      } else {\n        // readyState >= 2 AND readyState !==4 (readyState = HEADERS_RECEIVED || LOADING) rearm timeout as xhr not finished yet\n        this.requestTimeout = window.setTimeout(this.loadtimeout.bind(this), config.timeout);\n      }\n    }\n  }\n\n  loadtimeout() {\n    logger.warn(`timeout while loading ${this.context.url}` );\n    this.callbacks.onTimeout(this.stats, this.context, null);\n  }\n\n  loadprogress(event) {\n    var xhr = event.currentTarget,\n        stats = this.stats;\n\n    stats.loaded = event.loaded;\n    if (event.lengthComputable) {\n      stats.total = event.total;\n    }\n    let onProgress = this.callbacks.onProgress;\n    if (onProgress) {\n      // third arg is to provide on progress data\n      onProgress(stats, this.context, null, xhr);\n    }\n  }\n}\n\nexport default XhrLoader;\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/xhr-loader.js","/**\n * HLS config\n */\n\nimport AbrController from    './controller/abr-controller';\nimport BufferController from  './controller/buffer-controller';\nimport CapLevelController from  './controller/cap-level-controller';\nimport FPSController from './controller/fps-controller';\nimport XhrLoader from './utils/xhr-loader';\n//import FetchLoader from './utils/fetch-loader';\n\nimport AudioTrackController from './controller/audio-track-controller';\nimport AudioStreamController from  './controller/audio-stream-controller';\n\nimport * as Cues from './utils/cues';\nimport TimelineController from './controller/timeline-controller';\nimport SubtitleTrackController from './controller/subtitle-track-controller';\nimport SubtitleStreamController from  './controller/subtitle-stream-controller';\n\nexport var hlsDefaultConfig = {\n  autoStartLoad: true,                    // used by stream-controller\n  startPosition: -1,                      // used by stream-controller\n  defaultAudioCodec: undefined,           // used by stream-controller\n  debug: false,                           // used by logger\n  capLevelOnFPSDrop: false,               // used by fps-controller\n  capLevelToPlayerSize: false,            // used by cap-level-controller\n  initialLiveManifestSize: 1,             // used by stream-controller\n  maxBufferLength: 30,                    // used by stream-controller\n  maxBufferSize: 60 * 1000 * 1000,        // used by stream-controller\n  maxBufferHole: 0.5,                     // used by stream-controller\n  maxSeekHole: 2,                         // used by stream-controller\n  lowBufferWatchdogPeriod: 0.5,           // used by stream-controller\n  highBufferWatchdogPeriod: 3,            // used by stream-controller\n  nudgeOffset: 0.1,                       // used by stream-controller\n  nudgeMaxRetry : 3,                      // used by stream-controller\n  maxFragLookUpTolerance: 0.2,            // used by stream-controller\n  liveSyncDurationCount:3,                // used by stream-controller\n  liveMaxLatencyDurationCount: Infinity,  // used by stream-controller\n  liveSyncDuration: undefined,            // used by stream-controller\n  liveMaxLatencyDuration: undefined,      // used by stream-controller\n  maxMaxBufferLength: 600,                // used by stream-controller\n  enableWorker: true,                     // used by demuxer\n  enableSoftwareAES: true,                // used by decrypter\n  manifestLoadingTimeOut: 10000,          // used by playlist-loader\n  manifestLoadingMaxRetry: 1,             // used by playlist-loader\n  manifestLoadingRetryDelay: 1000,        // used by playlist-loader\n  manifestLoadingMaxRetryTimeout: 64000,  // used by playlist-loader\n  startLevel: undefined,                  // used by level-controller\n  levelLoadingTimeOut: 10000,             // used by playlist-loader\n  levelLoadingMaxRetry: 4,                // used by playlist-loader\n  levelLoadingRetryDelay: 1000,           // used by playlist-loader\n  levelLoadingMaxRetryTimeout: 64000,     // used by playlist-loader\n  fragLoadingTimeOut: 20000,              // used by fragment-loader\n  fragLoadingMaxRetry: 6,                 // used by fragment-loader\n  fragLoadingRetryDelay: 1000,            // used by fragment-loader\n  fragLoadingMaxRetryTimeout: 64000,      // used by fragment-loader\n  fragLoadingLoopThreshold: 3,            // used by stream-controller\n  startFragPrefetch: false,               // used by stream-controller\n  fpsDroppedMonitoringPeriod: 5000,       // used by fps-controller\n  fpsDroppedMonitoringThreshold: 0.2,     // used by fps-controller\n  appendErrorMaxRetry: 3,                 // used by buffer-controller\n  loader: XhrLoader,\n  //loader: FetchLoader,\n  fLoader: undefined,\n  pLoader: undefined,\n  xhrSetup: undefined,\n  fetchSetup: undefined,\n  abrController: AbrController,\n  bufferController: BufferController,\n  capLevelController: CapLevelController,\n  fpsController: FPSController,\n  stretchShortVideoTrack: false,            // used by mp4-remuxer\n  forceKeyFrameOnDiscontinuity: true,       // used by ts-demuxer\n  abrEwmaFastLive: 3,                       // used by abr-controller\n  abrEwmaSlowLive: 9,                       // used by abr-controller\n  abrEwmaFastVoD: 3,                        // used by abr-controller\n  abrEwmaSlowVoD: 9,                        // used by abr-controller\n  abrEwmaDefaultEstimate: 5e5, // 500 kbps  // used by abr-controller\n  abrBandWidthFactor : 0.95,                // used by abr-controller\n  abrBandWidthUpFactor : 0.7,               // used by abr-controller\n  abrMaxWithRealBitrate : false,            // used by abr-controller\n  maxStarvationDelay : 4,                   // used by abr-controller\n  maxLoadingDelay : 4,                      // used by abr-controller\n  minAutoBitrate: 0                         // used by hls\n};\n\nif (typeof __BUILD_VERSION__ === 'undefined' || __BUILD_VERSION__ === 'full') {\n  hlsDefaultConfig.audioStreamController = AudioStreamController;\n  hlsDefaultConfig.audioTrackController  = AudioTrackController;\n  hlsDefaultConfig.subtitleStreamController = SubtitleStreamController;\n  hlsDefaultConfig.subtitleTrackController = SubtitleTrackController;\n  hlsDefaultConfig.timelineController = TimelineController;\n  hlsDefaultConfig.cueHandler = Cues;\n  hlsDefaultConfig.enableCEA708Captions = true;               // used by timeline-controller\n  hlsDefaultConfig.enableWebVTT = true;                       // used by timeline-controller\n  hlsDefaultConfig.captionsTextTrack1Label = 'English';       // used by timeline-controller\n  hlsDefaultConfig.captionsTextTrack1LanguageCode = 'en';     // used by timeline-controller\n  hlsDefaultConfig.captionsTextTrack2Label = 'Spanish';       // used by timeline-controller\n  hlsDefaultConfig.captionsTextTrack2LanguageCode = 'es';     // used by timeline-controller\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/config.js","/**\n * HLS interface\n */\nimport URLToolkit from 'url-toolkit';\nimport Event from './events';\nimport {ErrorTypes, ErrorDetails} from './errors';\nimport PlaylistLoader from './loader/playlist-loader';\nimport FragmentLoader from './loader/fragment-loader';\nimport KeyLoader from './loader/key-loader';\n\nimport StreamController from  './controller/stream-controller';\nimport LevelController from  './controller/level-controller';\nimport ID3TrackController from './controller/id3-track-controller';\n\nimport {logger, enableLogs} from './utils/logger';\nimport EventEmitter from 'events';\nimport {hlsDefaultConfig} from './config';\n\nexport default class Hls {\n  static get version() {\n    return __VERSION__;\n  }\n  static isSupported() {\n    const mediaSource = window.MediaSource = window.MediaSource || window.WebKitMediaSource;\n    const sourceBuffer = window.SourceBuffer = window.SourceBuffer || window.WebKitSourceBuffer;\n    const isTypeSupported = mediaSource &&\n                            typeof mediaSource.isTypeSupported === 'function' &&\n                            mediaSource.isTypeSupported('video/mp4; codecs=\"avc1.42E01E,mp4a.40.2\"');\n\n    // if SourceBuffer is exposed ensure its API is valid\n    // safari and old version of Chrome doe not expose SourceBuffer globally so checking SourceBuffer.prototype is impossible\n    const sourceBufferValidAPI = !sourceBuffer ||\n                                 (sourceBuffer.prototype &&\n                                 typeof sourceBuffer.prototype.appendBuffer === 'function' &&\n                                 typeof sourceBuffer.prototype.remove === 'function');\n    return isTypeSupported && sourceBufferValidAPI;\n  }\n\n  static get Events() {\n    return Event;\n  }\n\n  static get ErrorTypes() {\n    return ErrorTypes;\n  }\n\n  static get ErrorDetails() {\n    return ErrorDetails;\n  }\n\n  static get DefaultConfig() {\n    if(!Hls.defaultConfig) {\n      return hlsDefaultConfig;\n    }\n    return Hls.defaultConfig;\n  }\n\n  static set DefaultConfig(defaultConfig) {\n    Hls.defaultConfig = defaultConfig;\n  }\n\n  constructor(config = {}) {\n    var defaultConfig = Hls.DefaultConfig;\n\n    if ((config.liveSyncDurationCount || config.liveMaxLatencyDurationCount) && (config.liveSyncDuration || config.liveMaxLatencyDuration)) {\n      throw new Error('Illegal hls.js config: don\\'t mix up liveSyncDurationCount/liveMaxLatencyDurationCount and liveSyncDuration/liveMaxLatencyDuration');\n    }\n\n    for (var prop in defaultConfig) {\n        if (prop in config) { continue; }\n        config[prop] = defaultConfig[prop];\n    }\n\n    if (config.liveMaxLatencyDurationCount !== undefined && config.liveMaxLatencyDurationCount <= config.liveSyncDurationCount) {\n      throw new Error('Illegal hls.js config: \"liveMaxLatencyDurationCount\" must be gt \"liveSyncDurationCount\"');\n    }\n\n    if (config.liveMaxLatencyDuration !== undefined && (config.liveMaxLatencyDuration <= config.liveSyncDuration || config.liveSyncDuration === undefined)) {\n      throw new Error('Illegal hls.js config: \"liveMaxLatencyDuration\" must be gt \"liveSyncDuration\"');\n    }\n\n    enableLogs(config.debug);\n    this.config = config;\n    this._autoLevelCapping = -1;\n    // observer setup\n    var observer = this.observer = new EventEmitter();\n    observer.trigger = function trigger (event, ...data) {\n      observer.emit(event, event, ...data);\n    };\n\n    observer.off = function off (event, ...data) {\n      observer.removeListener(event, ...data);\n    };\n    this.on = observer.on.bind(observer);\n    this.off = observer.off.bind(observer);\n    this.trigger = observer.trigger.bind(observer);\n\n    // core controllers and network loaders\n    const abrController = this.abrController = new config.abrController(this);\n    const bufferController  = new config.bufferController(this);\n    const capLevelController = new config.capLevelController(this);\n    const fpsController = new config.fpsController(this);\n    const playListLoader = new PlaylistLoader(this);\n    const fragmentLoader = new FragmentLoader(this);\n    const keyLoader = new KeyLoader(this);\n    const id3TrackController = new ID3TrackController(this);\n\n    // network controllers\n    const levelController = this.levelController = new LevelController(this);\n    const streamController = this.streamController = new StreamController(this);\n    let networkControllers = [levelController, streamController];\n\n    // optional audio stream controller\n    let Controller = config.audioStreamController;\n    if (Controller) {\n      networkControllers.push(new Controller(this));\n    }\n    this.networkControllers = networkControllers;\n\n    let coreComponents = [ playListLoader, fragmentLoader, keyLoader, abrController, bufferController, capLevelController, fpsController, id3TrackController ];\n\n    // optional audio track and subtitle controller\n    Controller = config.audioTrackController;\n    if (Controller) {\n      let audioTrackController = new Controller(this);\n      this.audioTrackController = audioTrackController;\n      coreComponents.push(audioTrackController);\n    }\n\n    Controller = config.subtitleTrackController;\n    if (Controller) {\n      let subtitleTrackController = new Controller(this);\n      this.subtitleTrackController = subtitleTrackController;\n      coreComponents.push(subtitleTrackController);\n    }\n\n    // optional subtitle controller\n    [config.subtitleStreamController, config.timelineController].forEach(Controller => {\n      if (Controller) {\n        coreComponents.push(new Controller(this));\n      }\n    });\n    this.coreComponents = coreComponents;\n  }\n\n  destroy() {\n    logger.log('destroy');\n    this.trigger(Event.DESTROYING);\n    this.detachMedia();\n    this.coreComponents.concat(this.networkControllers).forEach(component => {component.destroy();});\n    this.url = null;\n    this.observer.removeAllListeners();\n    this._autoLevelCapping = -1;\n  }\n\n  attachMedia(media) {\n    logger.log('attachMedia');\n    this.media = media;\n    this.trigger(Event.MEDIA_ATTACHING, {media: media});\n  }\n\n  detachMedia() {\n    logger.log('detachMedia');\n    this.trigger(Event.MEDIA_DETACHING);\n    this.media = null;\n  }\n\n  loadSource(url) {\n    url = URLToolkit.buildAbsoluteURL(window.location.href, url, { alwaysNormalize: true });\n    logger.log(`loadSource:${url}`);\n    this.url = url;\n    // when attaching to a source URL, trigger a playlist load\n    this.trigger(Event.MANIFEST_LOADING, {url: url});\n  }\n\n  startLoad(startPosition=-1) {\n    logger.log(`startLoad(${startPosition})`);\n    this.networkControllers.forEach(controller => {controller.startLoad(startPosition);});\n  }\n\n  stopLoad() {\n    logger.log('stopLoad');\n    this.networkControllers.forEach(controller => {controller.stopLoad();});\n  }\n\n  swapAudioCodec() {\n    logger.log('swapAudioCodec');\n    this.streamController.swapAudioCodec();\n  }\n\n  recoverMediaError() {\n    logger.log('recoverMediaError');\n    var media = this.media;\n    this.detachMedia();\n    this.attachMedia(media);\n  }\n\n  /** Return all quality levels **/\n  get levels() {\n    return this.levelController.levels;\n  }\n\n  /** Return current playback quality level **/\n  get currentLevel() {\n    return this.streamController.currentLevel;\n  }\n\n  /* set quality level immediately (-1 for automatic level selection) */\n  set currentLevel(newLevel) {\n    logger.log(`set currentLevel:${newLevel}`);\n    this.loadLevel = newLevel;\n    this.streamController.immediateLevelSwitch();\n  }\n\n  /** Return next playback quality level (quality level of next fragment) **/\n  get nextLevel() {\n    return this.streamController.nextLevel;\n  }\n\n  /* set quality level for next fragment (-1 for automatic level selection) */\n  set nextLevel(newLevel) {\n    logger.log(`set nextLevel:${newLevel}`);\n    this.levelController.manualLevel = newLevel;\n    this.streamController.nextLevelSwitch();\n  }\n\n  /** Return the quality level of current/last loaded fragment **/\n  get loadLevel() {\n    return this.levelController.level;\n  }\n\n  /* set quality level for current/next loaded fragment (-1 for automatic level selection) */\n  set loadLevel(newLevel) {\n    logger.log(`set loadLevel:${newLevel}`);\n    this.levelController.manualLevel = newLevel;\n  }\n\n  /** Return the quality level of next loaded fragment **/\n  get nextLoadLevel() {\n    return this.levelController.nextLoadLevel;\n  }\n\n  /** set quality level of next loaded fragment **/\n  set nextLoadLevel(level) {\n    this.levelController.nextLoadLevel = level;\n  }\n\n  /** Return first level (index of first level referenced in manifest)\n  **/\n  get firstLevel() {\n    return Math.max(this.levelController.firstLevel, this.minAutoLevel);\n  }\n\n  /** set first level (index of first level referenced in manifest)\n  **/\n  set firstLevel(newLevel) {\n    logger.log(`set firstLevel:${newLevel}`);\n    this.levelController.firstLevel = newLevel;\n  }\n\n  /** Return start level (level of first fragment that will be played back)\n      if not overrided by user, first level appearing in manifest will be used as start level\n      if -1 : automatic start level selection, playback will start from level matching download bandwidth (determined from download of first segment)\n  **/\n  get startLevel() {\n    return this.levelController.startLevel;\n  }\n\n  /** set  start level (level of first fragment that will be played back)\n      if not overrided by user, first level appearing in manifest will be used as start level\n      if -1 : automatic start level selection, playback will start from level matching download bandwidth (determined from download of first segment)\n  **/\n  set startLevel(newLevel) {\n    logger.log(`set startLevel:${newLevel}`);\n    const hls = this;\n    // if not in automatic start level detection, ensure startLevel is greater than minAutoLevel\n    if (newLevel !== -1) {\n      newLevel = Math.max(newLevel,hls.minAutoLevel);\n    }\n    hls.levelController.startLevel = newLevel;\n  }\n\n  /** Return the capping/max level value that could be used by automatic level selection algorithm **/\n  get autoLevelCapping() {\n    return this._autoLevelCapping;\n  }\n\n  /** set the capping/max level value that could be used by automatic level selection algorithm **/\n  set autoLevelCapping(newLevel) {\n    logger.log(`set autoLevelCapping:${newLevel}`);\n    this._autoLevelCapping = newLevel;\n  }\n\n  /* check if we are in automatic level selection mode */\n  get autoLevelEnabled() {\n    return (this.levelController.manualLevel === -1);\n  }\n\n  /* return manual level */\n  get manualLevel() {\n    return this.levelController.manualLevel;\n  }\n\n  /* return min level selectable in auto mode according to config.minAutoBitrate */\n  get minAutoLevel() {\n    let hls = this, levels = hls.levels, minAutoBitrate = hls.config.minAutoBitrate, len = levels ? levels.length : 0;\n    for (let i = 0; i < len; i++) {\n      const levelNextBitrate = levels[i].realBitrate ? Math.max(levels[i].realBitrate,levels[i].bitrate) : levels[i].bitrate;\n      if (levelNextBitrate > minAutoBitrate) {\n        return i;\n      }\n    }\n    return 0;\n  }\n\n  /* return max level selectable in auto mode according to autoLevelCapping */\n  get maxAutoLevel() {\n    const hls = this;\n    const levels = hls.levels;\n    const autoLevelCapping = hls.autoLevelCapping;\n    let maxAutoLevel;\n    if (autoLevelCapping=== -1 && levels && levels.length) {\n      maxAutoLevel = levels.length - 1;\n    } else {\n      maxAutoLevel = autoLevelCapping;\n    }\n    return maxAutoLevel;\n  }\n\n  // return next auto level\n  get nextAutoLevel() {\n    const hls = this;\n    // ensure next auto level is between  min and max auto level\n    return Math.min(Math.max(hls.abrController.nextAutoLevel,hls.minAutoLevel),hls.maxAutoLevel);\n  }\n\n  // this setter is used to force next auto level\n  // this is useful to force a switch down in auto mode : in case of load error on level N, hls.js can set nextAutoLevel to N-1 for example)\n  // forced value is valid for one fragment. upon succesful frag loading at forced level, this value will be resetted to -1 by ABR controller\n  set nextAutoLevel(nextLevel) {\n    const hls = this;\n    hls.abrController.nextAutoLevel = Math.max(hls.minAutoLevel,nextLevel);\n  }\n\n  /** get alternate audio tracks list from playlist **/\n  get audioTracks() {\n    const audioTrackController = this.audioTrackController;\n    return audioTrackController ? audioTrackController.audioTracks : [];\n  }\n\n  /** get index of the selected audio track (index in audio track lists) **/\n  get audioTrack() {\n    const audioTrackController = this.audioTrackController;\n    return audioTrackController ? audioTrackController.audioTrack : -1;\n  }\n\n  /** select an audio track, based on its index in audio track lists**/\n  set audioTrack(audioTrackId) {\n    const audioTrackController = this.audioTrackController;\n    if (audioTrackController) {\n      audioTrackController.audioTrack = audioTrackId;\n    }\n  }\n\n  get liveSyncPosition() {\n    return this.streamController.liveSyncPosition;\n  }\n\n  /** get alternate subtitle tracks list from playlist **/\n  get subtitleTracks() {\n    const subtitleTrackController = this.subtitleTrackController;\n    return subtitleTrackController ? subtitleTrackController.subtitleTracks : [];\n  }\n\n  /** get index of the selected subtitle track (index in subtitle track lists) **/\n  get subtitleTrack() {\n    const subtitleTrackController = this.subtitleTrackController;\n    return subtitleTrackController ? subtitleTrackController.subtitleTrack : -1;\n  }\n\n  /** select an subtitle track, based on its index in subtitle track lists**/\n  set subtitleTrack(subtitleTrackId) {\n    const subtitleTrackController = this.subtitleTrackController;\n    if (subtitleTrackController) {\n      subtitleTrackController.subtitleTrack = subtitleTrackId;\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/hls.js","function webpackBootstrapFunc (modules) {\n/******/  // The module cache\n/******/  var installedModules = {};\n\n/******/  // The require function\n/******/  function __webpack_require__(moduleId) {\n\n/******/    // Check if module is in cache\n/******/    if(installedModules[moduleId])\n/******/      return installedModules[moduleId].exports;\n\n/******/    // Create a new module (and put it into the cache)\n/******/    var module = installedModules[moduleId] = {\n/******/      i: moduleId,\n/******/      l: false,\n/******/      exports: {}\n/******/    };\n\n/******/    // Execute the module function\n/******/    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/    // Flag the module as loaded\n/******/    module.l = true;\n\n/******/    // Return the exports of the module\n/******/    return module.exports;\n/******/  }\n\n/******/  // expose the modules object (__webpack_modules__)\n/******/  __webpack_require__.m = modules;\n\n/******/  // expose the module cache\n/******/  __webpack_require__.c = installedModules;\n\n/******/  // identity function for calling harmony imports with the correct context\n/******/  __webpack_require__.i = function(value) { return value; };\n\n/******/  // define getter function for harmony exports\n/******/  __webpack_require__.d = function(exports, name, getter) {\n/******/    if(!__webpack_require__.o(exports, name)) {\n/******/      Object.defineProperty(exports, name, {\n/******/        configurable: false,\n/******/        enumerable: true,\n/******/        get: getter\n/******/      });\n/******/    }\n/******/  };\n\n/******/  // getDefaultExport function for compatibility with non-harmony modules\n/******/  __webpack_require__.n = function(module) {\n/******/    var getter = module && module.__esModule ?\n/******/      function getDefault() { return module['default']; } :\n/******/      function getModuleExports() { return module; };\n/******/    __webpack_require__.d(getter, 'a', getter);\n/******/    return getter;\n/******/  };\n\n/******/  // Object.prototype.hasOwnProperty.call\n/******/  __webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/  // __webpack_public_path__\n/******/  __webpack_require__.p = \"/\";\n\n/******/  // on error function for async loading\n/******/  __webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n  var f = __webpack_require__(__webpack_require__.s = ENTRY_MODULE)\n  return f.default || f // try to call default if defined to also support babel esmodule exports\n}\n\n// http://stackoverflow.com/a/2593661/130442\nfunction quoteRegExp (str) {\n  return (str + '').replace(/[.?*+^$[\\]\\\\(){}|-]/g, '\\\\$&')\n}\n\nfunction getModuleDependencies (module) {\n  var retval = []\n  var fnString = module.toString()\n  var wrapperSignature = fnString.match(/^function\\s?\\(\\w+,\\s*\\w+,\\s*(\\w+)\\)/)\n  if (!wrapperSignature) return retval\n\n  var webpackRequireName = wrapperSignature[1]\n  var re = new RegExp('(\\\\\\\\n|\\\\W)' + quoteRegExp(webpackRequireName) + '\\\\((\\/\\\\*.*?\\\\*\\/)?\\s?.*?([\\\\.|\\\\-|\\\\w|\\/|@]+).*?\\\\)', 'g') // additional chars when output.pathinfo is true\n  var match\n  while ((match = re.exec(fnString))) {\n    retval.push(match[3])\n  }\n  return retval\n}\n\nfunction getRequiredModules (sources, moduleId) {\n  var modulesQueue = [moduleId]\n  var requiredModules = []\n  var seenModules = {}\n\n  while (modulesQueue.length) {\n    var moduleToCheck = modulesQueue.pop()\n    if (seenModules[moduleToCheck] || !sources[moduleToCheck]) continue\n    seenModules[moduleToCheck] = true\n    requiredModules.push(moduleToCheck)\n    var newModules = getModuleDependencies(sources[moduleToCheck])\n    modulesQueue = modulesQueue.concat(newModules)\n  }\n\n  return requiredModules\n}\n\nmodule.exports = function (moduleId, options) {\n  options = options || {}\n  var sources = __webpack_modules__\n\n  var requiredModules = options.all ? Object.keys(sources) : getRequiredModules(sources, moduleId)\n  var src = '(' + webpackBootstrapFunc.toString().replace('ENTRY_MODULE', JSON.stringify(moduleId)) + ')({' + requiredModules.map(function (id) { return '' + JSON.stringify(id) + ': ' + sources[id].toString() }).join(',') + '})(self);'\n\n  var blob = new window.Blob([src], { type: 'text/javascript' })\n  if (options.bare) { return blob }\n\n  var URL = window.URL || window.webkitURL || window.mozURL || window.msURL\n\n  var workerUrl = URL.createObjectURL(blob)\n  var worker = new window.Worker(workerUrl)\n  worker.objectURL = workerUrl\n\n  return worker\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/webworkify-webpack/index.js\n// module id = 9\n// module chunks = 0","/* demuxer web worker.\n *  - listen to worker message, and trigger DemuxerInline upon reception of Fragments.\n *  - provides MP4 Boxes back to main thread using [transferable objects](https://developers.google.com/web/updates/2011/12/Transferable-Objects-Lightning-Fast) in order to minimize message passing overhead.\n */\n\n import DemuxerInline from '../demux/demuxer-inline';\n import Event from '../events';\n import {enableLogs} from '../utils/logger';\n import EventEmitter from 'events';\n\nvar DemuxerWorker = function (self) {\n  // observer setup\n  var observer = new EventEmitter();\n  observer.trigger = function trigger (event, ...data) {\n    observer.emit(event, event, ...data);\n  };\n\n  observer.off = function off (event, ...data) {\n    observer.removeListener(event, ...data);\n  };\n\n  var forwardMessage = function(ev,data) {\n    self.postMessage({event: ev, data:data });\n  };\n\n  self.addEventListener('message', function (ev) {\n    var data = ev.data;\n    //console.log('demuxer cmd:' + data.cmd);\n    switch (data.cmd) {\n      case 'init':\n        let config = JSON.parse(data.config);\n        self.demuxer = new DemuxerInline(observer, data.typeSupported, config, data.vendor);\n        try {\n          enableLogs(config.debug === true);\n        } catch(err) {\n          console.warn('demuxerWorker: unable to enable logs');\n        }\n        // signal end of worker init\n        forwardMessage('init',null);\n        break;\n      case 'demux':\n        self.demuxer.push(data.data, data.decryptdata, data.initSegment, data.audioCodec, data.videoCodec, data.timeOffset,data.discontinuity, data.trackSwitch,data.contiguous,data.duration,data.accurateTimeOffset,data.defaultInitPTS);\n        break;\n      default:\n        break;\n    }\n  });\n\n  // forward events to main thread\n  observer.on(Event.FRAG_DECRYPTED, forwardMessage);\n  observer.on(Event.FRAG_PARSING_INIT_SEGMENT, forwardMessage);\n  observer.on(Event.FRAG_PARSED, forwardMessage);\n  observer.on(Event.ERROR, forwardMessage);\n  observer.on(Event.FRAG_PARSING_METADATA, forwardMessage);\n  observer.on(Event.FRAG_PARSING_USERDATA, forwardMessage);\n  observer.on(Event.INIT_PTS_FOUND, forwardMessage);\n\n  // special case for FRAG_PARSING_DATA: pass data1/data2 as transferable object (no copy)\n  observer.on(Event.FRAG_PARSING_DATA, function(ev, data) {\n    let transferable = [];\n    let message = {event: ev, data:data};\n    if (data.data1) {\n      message.data1 = data.data1.buffer;\n      transferable.push(data.data1.buffer);\n      delete data.data1;\n    }\n    if (data.data2) {\n      message.data2 = data.data2.buffer;\n      transferable.push(data.data2.buffer);\n      delete data.data2;\n    }\n    self.postMessage(message,transferable);\n  });\n};\n\nexport default DemuxerWorker;\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/demux/demuxer-worker.js"],"sourceRoot":""}